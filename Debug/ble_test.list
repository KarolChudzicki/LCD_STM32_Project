
ble_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800c658  0800c658  0000d658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb6c  0800cb6c  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb6c  0800cb6c  0000db6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb74  0800cb74  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb74  0800cb74  0000db74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb78  0800cb78  0000db78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cb7c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  200001e8  0800cd64  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800cd64  0000e93c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a409  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000429b  00000000  00000000  00028621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0002c8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a4  00000000  00000000  0002de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a36  00000000  00000000  0002ef04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021073  00000000  00000000  0005293a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb55a  00000000  00000000  000739ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ef07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c38  00000000  00000000  0012ef4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00135b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c63c 	.word	0x0800c63c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c63c 	.word	0x0800c63c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <BSP_LED_Init+0x20>)
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	0800c6a8 	.word	0x0800c6a8

08000d18 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <BSP_LED_Toggle+0x28>)
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fc96 	bl	8002660 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000000 	.word	0x20000000

08000d44 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <BSP_PB_GetState+0x34>)
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fc47 	bl	8002600 <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bf0c      	ite	eq
 8000d78:	2301      	moveq	r3, #1
 8000d7a:	2300      	movne	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000004 	.word	0x20000004

08000d8c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d903      	bls.n	8000da8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000da0:	f06f 0301 	mvn.w	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	e025      	b.n	8000df4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	4914      	ldr	r1, [pc, #80]	@ (8000e00 <BSP_COM_Init+0x74>)
 8000dae:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000db2:	4814      	ldr	r0, [pc, #80]	@ (8000e04 <BSP_COM_Init+0x78>)
 8000db4:	4613      	mov	r3, r2
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4403      	add	r3, r0
 8000dbe:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4a0e      	ldr	r2, [pc, #56]	@ (8000e04 <BSP_COM_Init+0x78>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f86a 	bl	8000ea8 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <BSP_COM_Init+0x78>)
 8000de0:	4413      	add	r3, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f810 	bl	8000e08 <MX_USART2_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000dee:	f06f 0303 	mvn.w	r3, #3
 8000df2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000df4:	68fb      	ldr	r3, [r7, #12]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000010 	.word	0x20000010
 8000e04:	20000204 	.word	0x20000204

08000e08 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a15      	ldr	r2, [pc, #84]	@ (8000e6c <MX_USART2_UART_Init+0x64>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f004 f89a 	bl	8004f8c <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40004400 	.word	0x40004400

08000e70 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8000e78:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <__io_putchar+0x30>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4613      	mov	r3, r2
 8000e80:	011b      	lsls	r3, r3, #4
 8000e82:	4413      	add	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <__io_putchar+0x34>)
 8000e88:	1898      	adds	r0, r3, r2
 8000e8a:	1d39      	adds	r1, r7, #4
 8000e8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e90:	2201      	movs	r2, #1
 8000e92:	f004 f8d3 	bl	800503c <HAL_UART_Transmit>
  return ch;
 8000e96:	687b      	ldr	r3, [r7, #4]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000028c 	.word	0x2000028c
 8000ea4:	20000204 	.word	0x20000204

08000ea8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <USART2_MspInit+0x84>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f2c <USART2_MspInit+0x84>)
 8000eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <USART2_MspInit+0x84>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <USART2_MspInit+0x84>)
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <USART2_MspInit+0x84>)
 8000ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed2:	6153      	str	r3, [r2, #20]
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <USART2_MspInit+0x84>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efe:	f001 f939 	bl	8002174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8000f02:	2308      	movs	r3, #8
 8000f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f20:	f001 f928 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	@ 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_Init+0x28>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_Init+0x28>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f001 f875 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f006 fd86 	bl	8007a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 f88d 	bl	800209a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f001 f855 	bl	8002046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000001c 	.word	0x2000001c
 8000fb4:	20000018 	.word	0x20000018
 8000fb8:	20000014 	.word	0x20000014

08000fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000018 	.word	0x20000018
 8000fe0:	20000290 	.word	0x20000290

08000fe4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000290 	.word	0x20000290

08000ffc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000018 	.word	0x20000018

08001044 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09a      	sub	sp, #104	@ 0x68
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e169      	b.n	8001338 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d176      	bne.n	8001164 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d152      	bne.n	8001124 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f005 fd4f 	bl	8006b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d13b      	bne.n	8001124 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fdd3 	bl	8001c58 <ADC_Disable>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d12f      	bne.n	8001124 <HAL_ADC_Init+0xe0>
 80010c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d12b      	bne.n	8001124 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010d4:	f023 0302 	bic.w	r3, r3, #2
 80010d8:	f043 0202 	orr.w	r2, r3, #2
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80010ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80010fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001100:	4b8f      	ldr	r3, [pc, #572]	@ (8001340 <HAL_ADC_Init+0x2fc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a8f      	ldr	r2, [pc, #572]	@ (8001344 <HAL_ADC_Init+0x300>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0c9a      	lsrs	r2, r3, #18
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001116:	e002      	b.n	800111e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3b01      	subs	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f9      	bne.n	8001118 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800113c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001140:	d110      	bne.n	8001164 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f023 0312 	bic.w	r3, r3, #18
 800114a:	f043 0210 	orr.w	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 80d6 	bne.w	800131e <HAL_ADC_Init+0x2da>
 8001172:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 80d1 	bne.w	800131e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 80c9 	bne.w	800131e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001194:	f043 0202 	orr.w	r2, r3, #2
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800119c:	4b6a      	ldr	r3, [pc, #424]	@ (8001348 <HAL_ADC_Init+0x304>)
 800119e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_ADC_Init+0x180>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_ADC_Init+0x180>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_ADC_Init+0x182>
 80011c4:	2300      	movs	r3, #0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d11c      	bne.n	8001204 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011ca:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d010      	beq.n	80011f2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d107      	bne.n	80011ec <HAL_ADC_Init+0x1a8>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_Init+0x1a8>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_ADC_Init+0x1aa>
 80011ec:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80011f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	431a      	orrs	r2, r3
 8001200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001202:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e5b      	ldrb	r3, [r3, #25]
 8001208:	035b      	lsls	r3, r3, #13
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800120e:	2a01      	cmp	r2, #1
 8001210:	d002      	beq.n	8001218 <HAL_ADC_Init+0x1d4>
 8001212:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001216:	e000      	b.n	800121a <HAL_ADC_Init+0x1d6>
 8001218:	2200      	movs	r2, #0
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	4313      	orrs	r3, r2
 8001228:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800122a:	4313      	orrs	r3, r2
 800122c:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d11b      	bne.n	8001270 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e5b      	ldrb	r3, [r3, #25]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	3b01      	subs	r3, #1
 8001246:	045a      	lsls	r2, r3, #17
 8001248:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800124a:	4313      	orrs	r3, r2
 800124c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001250:	663b      	str	r3, [r7, #96]	@ 0x60
 8001252:	e00d      	b.n	8001270 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800125c:	f043 0220 	orr.w	r2, r3, #32
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001268:	f043 0201 	orr.w	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001274:	2b01      	cmp	r3, #1
 8001276:	d007      	beq.n	8001288 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	4313      	orrs	r3, r2
 8001282:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001284:	4313      	orrs	r3, r2
 8001286:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b00      	cmp	r3, #0
 8001294:	d114      	bne.n	80012c0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012a4:	f023 0302 	bic.w	r3, r3, #2
 80012a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7e1b      	ldrb	r3, [r3, #24]
 80012ae:	039a      	lsls	r2, r3, #14
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4313      	orrs	r3, r2
 80012ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012bc:	4313      	orrs	r3, r2
 80012be:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	4b21      	ldr	r3, [pc, #132]	@ (800134c <HAL_ADC_Init+0x308>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80012d0:	430b      	orrs	r3, r1
 80012d2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10c      	bne.n	80012f6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f023 010f 	bic.w	r1, r3, #15
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80012f4:	e007      	b.n	8001306 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 020f 	bic.w	r2, r2, #15
 8001304:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f023 0303 	bic.w	r3, r3, #3
 8001314:	f043 0201 	orr.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	@ 0x40
 800131c:	e00a      	b.n	8001334 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f023 0312 	bic.w	r3, r3, #18
 8001326:	f043 0210 	orr.w	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800132e:	2301      	movs	r3, #1
 8001330:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001334:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001338:	4618      	mov	r0, r3
 800133a:	3768      	adds	r7, #104	@ 0x68
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000001c 	.word	0x2000001c
 8001344:	431bde83 	.word	0x431bde83
 8001348:	50000300 	.word	0x50000300
 800134c:	fff0c007 	.word	0xfff0c007

08001350 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d158      	bne.n	800141c <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_ADC_Start+0x28>
 8001374:	2302      	movs	r3, #2
 8001376:	e054      	b.n	8001422 <HAL_ADC_Start+0xd2>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fc05 	bl	8001b90 <ADC_Enable>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d140      	bne.n	8001412 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013da:	d106      	bne.n	80013ea <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e0:	f023 0206 	bic.w	r2, r3, #6
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80013e8:	e002      	b.n	80013f0 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	221c      	movs	r2, #28
 80013fe:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0204 	orr.w	r2, r2, #4
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	e006      	b.n	8001420 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800141a:	e001      	b.n	8001420 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800141c:	2302      	movs	r3, #2
 800141e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_ADC_Stop+0x1a>
 8001440:	2302      	movs	r3, #2
 8001442:	e023      	b.n	800148c <HAL_ADC_Stop+0x62>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800144c:	216c      	movs	r1, #108	@ 0x6c
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fc68 	bl	8001d24 <ADC_ConversionStop>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d111      	bne.n	8001482 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fbfa 	bl	8001c58 <ADC_Disable>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	f043 0201 	orr.w	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d102      	bne.n	80014b0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80014aa:	2308      	movs	r3, #8
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e02e      	b.n	800150e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b0:	4b56      	ldr	r3, [pc, #344]	@ (800160c <HAL_ADC_PollForConversion+0x178>)
 80014b2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 031f 	and.w	r3, r3, #31
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d112      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d11d      	bne.n	800150a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f043 0220 	orr.w	r2, r3, #32
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e08d      	b.n	8001602 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f043 0220 	orr.w	r2, r3, #32
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07b      	b.n	8001602 <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800150a:	230c      	movs	r3, #12
 800150c:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001516:	f7ff fd65 	bl	8000fe4 <HAL_GetTick>
 800151a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800151c:	e021      	b.n	8001562 <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d01d      	beq.n	8001562 <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <HAL_ADC_PollForConversion+0xa8>
 800152c:	f7ff fd5a 	bl	8000fe4 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d212      	bcs.n	8001562 <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10b      	bne.n	8001562 <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f043 0204 	orr.w	r2, r3, #4
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e04f      	b.n	8001602 <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0d6      	beq.n	800151e <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001586:	2b00      	cmp	r3, #0
 8001588:	d131      	bne.n	80015ee <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001590:	2b00      	cmp	r3, #0
 8001592:	d12c      	bne.n	80015ee <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d125      	bne.n	80015ee <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d112      	bne.n	80015d6 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d112      	bne.n	80015ee <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80015d4:	e00b      	b.n	80015ee <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	50000300 	.word	0x50000300

08001610 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800162c:	b480      	push	{r7}
 800162e:	b09b      	sub	sp, #108	@ 0x6c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ADC_ConfigChannel+0x22>
 800164a:	2302      	movs	r3, #2
 800164c:	e295      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x54e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 8279 	bne.w	8001b58 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b04      	cmp	r3, #4
 800166c:	d81c      	bhi.n	80016a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	461a      	mov	r2, r3
 8001682:	231f      	movs	r3, #31
 8001684:	4093      	lsls	r3, r2
 8001686:	43db      	mvns	r3, r3
 8001688:	4019      	ands	r1, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80016a6:	e063      	b.n	8001770 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b09      	cmp	r3, #9
 80016ae:	d81e      	bhi.n	80016ee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3b1e      	subs	r3, #30
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	4019      	ands	r1, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	3b1e      	subs	r3, #30
 80016e0:	fa00 f203 	lsl.w	r2, r0, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80016ec:	e040      	b.n	8001770 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b0e      	cmp	r3, #14
 80016f4:	d81e      	bhi.n	8001734 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	3b3c      	subs	r3, #60	@ 0x3c
 800170a:	221f      	movs	r2, #31
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	4019      	ands	r1, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	3b3c      	subs	r3, #60	@ 0x3c
 8001726:	fa00 f203 	lsl.w	r2, r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	639a      	str	r2, [r3, #56]	@ 0x38
 8001732:	e01d      	b.n	8001770 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	3b5a      	subs	r3, #90	@ 0x5a
 8001748:	221f      	movs	r2, #31
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	4019      	ands	r1, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	3b5a      	subs	r3, #90	@ 0x5a
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 80e5 	bne.w	800194a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d91c      	bls.n	80017c2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6999      	ldr	r1, [r3, #24]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	3b1e      	subs	r3, #30
 800179a:	2207      	movs	r2, #7
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4019      	ands	r1, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6898      	ldr	r0, [r3, #8]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	3b1e      	subs	r3, #30
 80017b4:	fa00 f203 	lsl.w	r2, r0, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	619a      	str	r2, [r3, #24]
 80017c0:	e019      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6959      	ldr	r1, [r3, #20]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	2207      	movs	r2, #7
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	4019      	ands	r1, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6898      	ldr	r0, [r3, #8]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	fa00 f203 	lsl.w	r2, r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b03      	cmp	r3, #3
 8001816:	d84f      	bhi.n	80018b8 <HAL_ADC_ConfigChannel+0x28c>
 8001818:	a201      	add	r2, pc, #4	@ (adr r2, 8001820 <HAL_ADC_ConfigChannel+0x1f4>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001831 	.word	0x08001831
 8001824:	08001853 	.word	0x08001853
 8001828:	08001875 	.word	0x08001875
 800182c:	08001897 	.word	0x08001897
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001836:	4b97      	ldr	r3, [pc, #604]	@ (8001a94 <HAL_ADC_ConfigChannel+0x468>)
 8001838:	4013      	ands	r3, r2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	0691      	lsls	r1, r2, #26
 8001840:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001842:	430a      	orrs	r2, r1
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800184e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001850:	e07b      	b.n	800194a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001858:	4b8e      	ldr	r3, [pc, #568]	@ (8001a94 <HAL_ADC_ConfigChannel+0x468>)
 800185a:	4013      	ands	r3, r2
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	0691      	lsls	r1, r2, #26
 8001862:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001864:	430a      	orrs	r2, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001870:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001872:	e06a      	b.n	800194a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800187a:	4b86      	ldr	r3, [pc, #536]	@ (8001a94 <HAL_ADC_ConfigChannel+0x468>)
 800187c:	4013      	ands	r3, r2
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	0691      	lsls	r1, r2, #26
 8001884:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001886:	430a      	orrs	r2, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001892:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001894:	e059      	b.n	800194a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800189c:	4b7d      	ldr	r3, [pc, #500]	@ (8001a94 <HAL_ADC_ConfigChannel+0x468>)
 800189e:	4013      	ands	r3, r2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	0691      	lsls	r1, r2, #26
 80018a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80018a8:	430a      	orrs	r2, r1
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018b4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80018b6:	e048      	b.n	800194a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	069b      	lsls	r3, r3, #26
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d107      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80018da:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80018e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	069b      	lsls	r3, r3, #26
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d107      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80018fe:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001906:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	429a      	cmp	r2, r3
 8001912:	d107      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001922:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800192a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	069b      	lsls	r3, r3, #26
 8001934:	429a      	cmp	r2, r3
 8001936:	d107      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001946:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001948:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d108      	bne.n	800196a <HAL_ADC_ConfigChannel+0x33e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_ADC_ConfigChannel+0x33e>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_ADC_ConfigChannel+0x340>
 800196a:	2300      	movs	r3, #0
 800196c:	2b00      	cmp	r3, #0
 800196e:	f040 80fe 	bne.w	8001b6e <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d00f      	beq.n	800199a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43da      	mvns	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	400a      	ands	r2, r1
 8001994:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001998:	e049      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2201      	movs	r2, #1
 80019a8:	409a      	lsls	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	d91c      	bls.n	80019f6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6999      	ldr	r1, [r3, #24]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	3b1b      	subs	r3, #27
 80019ce:	2207      	movs	r2, #7
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4019      	ands	r1, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	6898      	ldr	r0, [r3, #8]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	3b1b      	subs	r3, #27
 80019e8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	e01b      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6959      	ldr	r1, [r3, #20]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	2207      	movs	r2, #7
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	4019      	ands	r1, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6898      	ldr	r0, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	fa00 f203 	lsl.w	r2, r0, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_ADC_ConfigChannel+0x46c>)
 8001a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d105      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d014      	beq.n	8001a70 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a4a:	2b11      	cmp	r3, #17
 8001a4c:	d105      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a5e:	2b12      	cmp	r3, #18
 8001a60:	f040 8085 	bne.w	8001b6e <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d17e      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10c      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x470>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x470>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e004      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x472>
 8001a94:	83fff000 	.word	0x83fff000
 8001a98:	50000300 	.word	0x50000300
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d150      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aa2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d010      	beq.n	8001aca <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x498>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x498>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x49a>
 8001ac4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d13c      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d11d      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x4e2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ada:	d118      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001adc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ae4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ae6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ae8:	4b27      	ldr	r3, [pc, #156]	@ (8001b88 <HAL_ADC_ConfigChannel+0x55c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a27      	ldr	r2, [pc, #156]	@ (8001b8c <HAL_ADC_ConfigChannel+0x560>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	0c9a      	lsrs	r2, r3, #18
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001afe:	e002      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f9      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b0c:	e02e      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b11      	cmp	r3, #17
 8001b14:	d10b      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x502>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b1e:	d106      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001b28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b2a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b2c:	e01e      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d11a      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b40:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b42:	e013      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f043 0220 	orr.w	r2, r3, #32
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001b56:	e00a      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001b6a:	e000      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b6c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	376c      	adds	r7, #108	@ 0x6c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000001c 	.word	0x2000001c
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <ADC_Enable+0x2c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <ADC_Enable+0x2c>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <ADC_Enable+0x2e>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d143      	bne.n	8001c4a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <ADC_Enable+0xc4>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e02f      	b.n	8001c4c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001bfc:	f7ff f9f2 	bl	8000fe4 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c02:	e01b      	b.n	8001c3c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c04:	f7ff f9ee 	bl	8000fe4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d914      	bls.n	8001c3c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d00d      	beq.n	8001c3c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f043 0210 	orr.w	r2, r3, #16
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e007      	b.n	8001c4c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d1dc      	bne.n	8001c04 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	8000003f 	.word	0x8000003f

08001c58 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <ADC_Disable+0x2c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <ADC_Disable+0x2c>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <ADC_Disable+0x2e>
 8001c84:	2300      	movs	r3, #0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d047      	beq.n	8001d1a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030d 	and.w	r3, r3, #13
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d10f      	bne.n	8001cb8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0202 	orr.w	r2, r2, #2
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2203      	movs	r2, #3
 8001cae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f998 	bl	8000fe4 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cb6:	e029      	b.n	8001d0c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	f043 0210 	orr.w	r2, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e023      	b.n	8001d1c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cd4:	f7ff f986 	bl	8000fe4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d914      	bls.n	8001d0c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d10d      	bne.n	8001d0c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f043 0210 	orr.w	r2, r3, #16
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e007      	b.n	8001d1c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d0dc      	beq.n	8001cd4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 809b 	beq.w	8001e80 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d58:	d12a      	bne.n	8001db0 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d126      	bne.n	8001db0 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d122      	bne.n	8001db0 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001d6e:	e014      	b.n	8001d9a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4a46      	ldr	r2, [pc, #280]	@ (8001e8c <ADC_ConversionStop+0x168>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d90d      	bls.n	8001d94 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	f043 0210 	orr.w	r2, r3, #16
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e076      	b.n	8001e82 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	3301      	adds	r3, #1
 8001d98:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da4:	2b40      	cmp	r3, #64	@ 0x40
 8001da6:	d1e3      	bne.n	8001d70 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2240      	movs	r2, #64	@ 0x40
 8001dae:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b60      	cmp	r3, #96	@ 0x60
 8001db4:	d015      	beq.n	8001de2 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d10e      	bne.n	8001de2 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0210 	orr.w	r2, r2, #16
 8001de0:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d015      	beq.n	8001e14 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d10e      	bne.n	8001e14 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d107      	bne.n	8001e14 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0220 	orr.w	r2, r2, #32
 8001e12:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b60      	cmp	r3, #96	@ 0x60
 8001e18:	d005      	beq.n	8001e26 <ADC_ConversionStop+0x102>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b6c      	cmp	r3, #108	@ 0x6c
 8001e1e:	d105      	bne.n	8001e2c <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001e20:	230c      	movs	r3, #12
 8001e22:	617b      	str	r3, [r7, #20]
        break;
 8001e24:	e005      	b.n	8001e32 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001e26:	2308      	movs	r3, #8
 8001e28:	617b      	str	r3, [r7, #20]
        break;
 8001e2a:	e002      	b.n	8001e32 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	617b      	str	r3, [r7, #20]
        break;
 8001e30:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001e32:	f7ff f8d7 	bl	8000fe4 <HAL_GetTick>
 8001e36:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001e38:	e01b      	b.n	8001e72 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e3a:	f7ff f8d3 	bl	8000fe4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b0b      	cmp	r3, #11
 8001e46:	d914      	bls.n	8001e72 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00d      	beq.n	8001e72 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f043 0210 	orr.w	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e007      	b.n	8001e82 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1dc      	bne.n	8001e3a <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	000993ff 	.word	0x000993ff

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	db0b      	blt.n	8001f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4907      	ldr	r1, [pc, #28]	@ (8001f2c <__NVIC_EnableIRQ+0x38>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2001      	movs	r0, #1
 8001f16:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	@ (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	@ 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ffc:	d301      	bcc.n	8002002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00f      	b.n	8002022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002002:	4a0a      	ldr	r2, [pc, #40]	@ (800202c <SysTick_Config+0x40>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200a:	210f      	movs	r1, #15
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f7ff ff8e 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <SysTick_Config+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201a:	4b04      	ldr	r3, [pc, #16]	@ (800202c <SysTick_Config+0x40>)
 800201c:	2207      	movs	r2, #7
 800201e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff29 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff3e 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff8e 	bl	8001f84 <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff5d 	bl	8001f30 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff31 	bl	8001ef4 <__NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa2 	bl	8001fec <SysTick_Config>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80020b2:	b480      	push	{r7}
 80020b4:	b087      	sub	sp, #28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	460b      	mov	r3, r1
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	605a      	str	r2, [r3, #4]
      break;
 80020d0:	e002      	b.n	80020d8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	75fb      	strb	r3, [r7, #23]
      break;
 80020d6:	bf00      	nop
  }

  return status;
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e003      	b.n	8002102 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0c1b      	lsrs	r3, r3, #16
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2201      	movs	r2, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR + (EXTI_CONFIG_OFFSET * offset));
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <HAL_EXTI_IRQHandler+0x5c>)
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_EXTI_IRQHandler+0x60>)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4798      	blx	r3
    }
  }
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40010414 	.word	0x40010414
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e14e      	b.n	8002422 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8140 	beq.w	800241c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d005      	beq.n	80021b4 <HAL_GPIO_Init+0x40>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d130      	bne.n	8002216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ea:	2201      	movs	r2, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0201 	and.w	r2, r3, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b03      	cmp	r3, #3
 8002220:	d017      	beq.n	8002252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d123      	bne.n	80022a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0203 	and.w	r2, r3, #3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 809a 	beq.w	800241c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e8:	4b55      	ldr	r3, [pc, #340]	@ (8002440 <HAL_GPIO_Init+0x2cc>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4a54      	ldr	r2, [pc, #336]	@ (8002440 <HAL_GPIO_Init+0x2cc>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6193      	str	r3, [r2, #24]
 80022f4:	4b52      	ldr	r3, [pc, #328]	@ (8002440 <HAL_GPIO_Init+0x2cc>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002300:	4a50      	ldr	r2, [pc, #320]	@ (8002444 <HAL_GPIO_Init+0x2d0>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800232a:	d013      	beq.n	8002354 <HAL_GPIO_Init+0x1e0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a46      	ldr	r2, [pc, #280]	@ (8002448 <HAL_GPIO_Init+0x2d4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00d      	beq.n	8002350 <HAL_GPIO_Init+0x1dc>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a45      	ldr	r2, [pc, #276]	@ (800244c <HAL_GPIO_Init+0x2d8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <HAL_GPIO_Init+0x1d8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a44      	ldr	r2, [pc, #272]	@ (8002450 <HAL_GPIO_Init+0x2dc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d101      	bne.n	8002348 <HAL_GPIO_Init+0x1d4>
 8002344:	2303      	movs	r3, #3
 8002346:	e006      	b.n	8002356 <HAL_GPIO_Init+0x1e2>
 8002348:	2305      	movs	r3, #5
 800234a:	e004      	b.n	8002356 <HAL_GPIO_Init+0x1e2>
 800234c:	2302      	movs	r3, #2
 800234e:	e002      	b.n	8002356 <HAL_GPIO_Init+0x1e2>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <HAL_GPIO_Init+0x1e2>
 8002354:	2300      	movs	r3, #0
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	f002 0203 	and.w	r2, r2, #3
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	4093      	lsls	r3, r2
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002366:	4937      	ldr	r1, [pc, #220]	@ (8002444 <HAL_GPIO_Init+0x2d0>)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002374:	4b37      	ldr	r3, [pc, #220]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002398:	4a2e      	ldr	r2, [pc, #184]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239e:	4b2d      	ldr	r3, [pc, #180]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023c2:	4a24      	ldr	r2, [pc, #144]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023ec:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f2:	4b18      	ldr	r3, [pc, #96]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002416:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <HAL_GPIO_Init+0x2e0>)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	f47f aea9 	bne.w	8002184 <HAL_GPIO_Init+0x10>
  }
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000
 8002444:	40010000 	.word	0x40010000
 8002448:	48000400 	.word	0x48000400
 800244c:	48000800 	.word	0x48000800
 8002450:	48000c00 	.word	0x48000c00
 8002454:	40010400 	.word	0x40010400

08002458 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002466:	e0b2      	b.n	80025ce <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002468:	2201      	movs	r2, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a5 	beq.w	80025c8 <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800247e:	4a5b      	ldr	r2, [pc, #364]	@ (80025ec <HAL_GPIO_DeInit+0x194>)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024a6:	d013      	beq.n	80024d0 <HAL_GPIO_DeInit+0x78>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a51      	ldr	r2, [pc, #324]	@ (80025f0 <HAL_GPIO_DeInit+0x198>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00d      	beq.n	80024cc <HAL_GPIO_DeInit+0x74>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a50      	ldr	r2, [pc, #320]	@ (80025f4 <HAL_GPIO_DeInit+0x19c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_DeInit+0x70>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a4f      	ldr	r2, [pc, #316]	@ (80025f8 <HAL_GPIO_DeInit+0x1a0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_GPIO_DeInit+0x6c>
 80024c0:	2303      	movs	r3, #3
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_DeInit+0x7a>
 80024c4:	2305      	movs	r3, #5
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_DeInit+0x7a>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_DeInit+0x7a>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_DeInit+0x7a>
 80024d0:	2300      	movs	r3, #0
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d132      	bne.n	8002548 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80024e2:	4b46      	ldr	r3, [pc, #280]	@ (80025fc <HAL_GPIO_DeInit+0x1a4>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4944      	ldr	r1, [pc, #272]	@ (80025fc <HAL_GPIO_DeInit+0x1a4>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80024f0:	4b42      	ldr	r3, [pc, #264]	@ (80025fc <HAL_GPIO_DeInit+0x1a4>)
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	4940      	ldr	r1, [pc, #256]	@ (80025fc <HAL_GPIO_DeInit+0x1a4>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80024fe:	4b3f      	ldr	r3, [pc, #252]	@ (80025fc <HAL_GPIO_DeInit+0x1a4>)
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	493d      	ldr	r1, [pc, #244]	@ (80025fc <HAL_GPIO_DeInit+0x1a4>)
 8002508:	4013      	ands	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800250c:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_GPIO_DeInit+0x1a4>)
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	4939      	ldr	r1, [pc, #228]	@ (80025fc <HAL_GPIO_DeInit+0x1a4>)
 8002516:	4013      	ands	r3, r2
 8002518:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800252a:	4a30      	ldr	r2, [pc, #192]	@ (80025ec <HAL_GPIO_DeInit+0x194>)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43da      	mvns	r2, r3
 800253a:	482c      	ldr	r0, [pc, #176]	@ (80025ec <HAL_GPIO_DeInit+0x194>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	400a      	ands	r2, r1
 8002542:	3302      	adds	r3, #2
 8002544:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2103      	movs	r1, #3
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	401a      	ands	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	08d2      	lsrs	r2, r2, #3
 800257e:	4019      	ands	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2103      	movs	r1, #3
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	401a      	ands	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	2101      	movs	r1, #1
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2103      	movs	r1, #3
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	401a      	ands	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	609a      	str	r2, [r3, #8]
    }

    position++;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3301      	adds	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f47f af46 	bne.w	8002468 <HAL_GPIO_DeInit+0x10>
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	48000400 	.word	0x48000400
 80025f4:	48000800 	.word	0x48000800
 80025f8:	48000c00 	.word	0x48000c00
 80025fc:	40010400 	.word	0x40010400

08002600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e001      	b.n	8002622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002622:	7bfb      	ldrb	r3, [r7, #15]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800264c:	e002      	b.n	8002654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43d9      	mvns	r1, r3
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	400b      	ands	r3, r1
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e081      	b.n	80027aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f004 fe5c 	bl	8007378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2224      	movs	r2, #36	@ 0x24
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	e006      	b.n	800271c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800271a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d104      	bne.n	800272e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800272c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800273c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002740:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002750:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69d9      	ldr	r1, [r3, #28]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1a      	ldr	r2, [r3, #32]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	461a      	mov	r2, r3
 80027c0:	460b      	mov	r3, r1
 80027c2:	817b      	strh	r3, [r7, #10]
 80027c4:	4613      	mov	r3, r2
 80027c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	f040 80da 	bne.w	800298a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_I2C_Master_Transmit+0x30>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e0d3      	b.n	800298c <HAL_I2C_Master_Transmit+0x1d8>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fbfa 	bl	8000fe4 <HAL_GetTick>
 80027f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2319      	movs	r3, #25
 80027f8:	2201      	movs	r2, #1
 80027fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f8f0 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0be      	b.n	800298c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2221      	movs	r2, #33	@ 0x21
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2210      	movs	r2, #16
 800281a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	893a      	ldrh	r2, [r7, #8]
 800282e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	2bff      	cmp	r3, #255	@ 0xff
 800283e:	d90e      	bls.n	800285e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	22ff      	movs	r2, #255	@ 0xff
 8002844:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284a:	b2da      	uxtb	r2, r3
 800284c:	8979      	ldrh	r1, [r7, #10]
 800284e:	4b51      	ldr	r3, [pc, #324]	@ (8002994 <HAL_I2C_Master_Transmit+0x1e0>)
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fa7e 	bl	8002d58 <I2C_TransferConfig>
 800285c:	e06c      	b.n	8002938 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286c:	b2da      	uxtb	r2, r3
 800286e:	8979      	ldrh	r1, [r7, #10]
 8002870:	4b48      	ldr	r3, [pc, #288]	@ (8002994 <HAL_I2C_Master_Transmit+0x1e0>)
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fa6d 	bl	8002d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800287e:	e05b      	b.n	8002938 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	6a39      	ldr	r1, [r7, #32]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8fc 	bl	8002a82 <I2C_WaitOnTXISFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e07b      	b.n	800298c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d034      	beq.n	8002938 <HAL_I2C_Master_Transmit+0x184>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d130      	bne.n	8002938 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	@ 0x80
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f87f 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e04d      	b.n	800298c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2bff      	cmp	r3, #255	@ 0xff
 80028f8:	d90e      	bls.n	8002918 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	22ff      	movs	r2, #255	@ 0xff
 80028fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002904:	b2da      	uxtb	r2, r3
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	2300      	movs	r3, #0
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fa21 	bl	8002d58 <I2C_TransferConfig>
 8002916:	e00f      	b.n	8002938 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002926:	b2da      	uxtb	r2, r3
 8002928:	8979      	ldrh	r1, [r7, #10]
 800292a:	2300      	movs	r3, #0
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fa10 	bl	8002d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d19e      	bne.n	8002880 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	6a39      	ldr	r1, [r7, #32]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f8e2 	bl	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e01a      	b.n	800298c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2220      	movs	r2, #32
 800295c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_I2C_Master_Transmit+0x1e4>)
 800296a:	400b      	ands	r3, r1
 800296c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	80002000 	.word	0x80002000
 8002998:	fe00e800 	.word	0xfe00e800

0800299c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d103      	bne.n	80029ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d007      	beq.n	80029d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	619a      	str	r2, [r3, #24]
  }
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f4:	e031      	b.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d02d      	beq.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fe faf1 	bl	8000fe4 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d122      	bne.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d113      	bne.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00f      	b.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4013      	ands	r3, r2
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	bf0c      	ite	eq
 8002a6a:	2301      	moveq	r3, #1
 8002a6c:	2300      	movne	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d0be      	beq.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a8e:	e033      	b.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f87f 	bl	8002b98 <I2C_IsErrorOccurred>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e031      	b.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d025      	beq.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7fe fa9a 	bl	8000fe4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11a      	bne.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d013      	beq.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad4:	f043 0220 	orr.w	r2, r3, #32
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d1c4      	bne.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1c:	e02f      	b.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f838 	bl	8002b98 <I2C_IsErrorOccurred>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e02d      	b.n	8002b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7fe fa57 	bl	8000fe4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d11a      	bne.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d013      	beq.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d1c8      	bne.n	8002b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d068      	beq.n	8002c96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2210      	movs	r2, #16
 8002bca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bcc:	e049      	b.n	8002c62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d045      	beq.n	8002c62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7fe fa05 	bl	8000fe4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <I2C_IsErrorOccurred+0x54>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d13a      	bne.n	8002c62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c0e:	d121      	bne.n	8002c54 <I2C_IsErrorOccurred+0xbc>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c16:	d01d      	beq.n	8002c54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d01a      	beq.n	8002c54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c2e:	f7fe f9d9 	bl	8000fe4 <HAL_GetTick>
 8002c32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c34:	e00e      	b.n	8002c54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c36:	f7fe f9d5 	bl	8000fe4 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b19      	cmp	r3, #25
 8002c42:	d907      	bls.n	8002c54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	f043 0320 	orr.w	r3, r3, #32
 8002c4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c52:	e006      	b.n	8002c62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b20      	cmp	r3, #32
 8002c60:	d1e9      	bne.n	8002c36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d003      	beq.n	8002c78 <I2C_IsErrorOccurred+0xe0>
 8002c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0aa      	beq.n	8002bce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2220      	movs	r2, #32
 8002c86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f043 0308 	orr.w	r3, r3, #8
 8002cd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01c      	beq.n	8002d46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff fe45 	bl	800299c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <I2C_IsErrorOccurred+0x1bc>)
 8002d1e:	400b      	ands	r3, r1
 8002d20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3728      	adds	r7, #40	@ 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	fe00e800 	.word	0xfe00e800

08002d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	817b      	strh	r3, [r7, #10]
 8002d66:	4613      	mov	r3, r2
 8002d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d70:	7a7b      	ldrb	r3, [r7, #9]
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	0d5b      	lsrs	r3, r3, #21
 8002d92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d96:	4b08      	ldr	r3, [pc, #32]	@ (8002db8 <I2C_TransferConfig+0x60>)
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	ea02 0103 	and.w	r1, r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	03ff63ff 	.word	0x03ff63ff

08002dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d138      	bne.n	8002e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e032      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	@ 0x24
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6819      	ldr	r1, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d139      	bne.n	8002edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e033      	b.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2224      	movs	r2, #36	@ 0x24
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002efc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	f001 b823 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 817d 	beq.w	8003222 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f28:	4bbc      	ldr	r3, [pc, #752]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d00c      	beq.n	8002f4e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f34:	4bb9      	ldr	r3, [pc, #740]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d15c      	bne.n	8002ffa <HAL_RCC_OscConfig+0x10e>
 8002f40:	4bb6      	ldr	r3, [pc, #728]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f4c:	d155      	bne.n	8002ffa <HAL_RCC_OscConfig+0x10e>
 8002f4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f52:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f62:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	095b      	lsrs	r3, r3, #5
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_RCC_OscConfig+0x94>
 8002f7a:	4ba8      	ldr	r3, [pc, #672]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	e015      	b.n	8002fac <HAL_RCC_OscConfig+0xc0>
 8002f80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f84:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f98:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002f9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fb0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002fb4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002fb8:	fa92 f2a2 	rbit	r2, r2
 8002fbc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002fc0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002fc4:	fab2 f282 	clz	r2, r2
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f042 0220 	orr.w	r2, r2, #32
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f002 021f 	and.w	r2, r2, #31
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 811f 	beq.w	8003220 <HAL_RCC_OscConfig+0x334>
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 8116 	bne.w	8003220 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f000 bfaf 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x12e>
 800300c:	4b83      	ldr	r3, [pc, #524]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a82      	ldr	r2, [pc, #520]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e036      	b.n	8003088 <HAL_RCC_OscConfig+0x19c>
 800301a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x158>
 800302a:	4b7c      	ldr	r3, [pc, #496]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7b      	ldr	r2, [pc, #492]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b79      	ldr	r3, [pc, #484]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a78      	ldr	r2, [pc, #480]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 800303c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e021      	b.n	8003088 <HAL_RCC_OscConfig+0x19c>
 8003044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003048:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x184>
 8003056:	4b71      	ldr	r3, [pc, #452]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a70      	ldr	r2, [pc, #448]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b6e      	ldr	r3, [pc, #440]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a6d      	ldr	r2, [pc, #436]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0x19c>
 8003070:	4b6a      	ldr	r3, [pc, #424]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a69      	ldr	r2, [pc, #420]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b67      	ldr	r3, [pc, #412]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a66      	ldr	r2, [pc, #408]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003086:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003088:	4b64      	ldr	r3, [pc, #400]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	f023 020f 	bic.w	r2, r3, #15
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	495f      	ldr	r1, [pc, #380]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d059      	beq.n	8003166 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fd ff97 	bl	8000fe4 <HAL_GetTick>
 80030b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030bc:	f7fd ff92 	bl	8000fe4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b64      	cmp	r3, #100	@ 0x64
 80030ca:	d902      	bls.n	80030d2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	f000 bf43 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>
 80030d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030d6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80030e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <HAL_RCC_OscConfig+0x218>
 80030fe:	4b47      	ldr	r3, [pc, #284]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	e015      	b.n	8003130 <HAL_RCC_OscConfig+0x244>
 8003104:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003108:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003118:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800311c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003120:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800312c:	4b3b      	ldr	r3, [pc, #236]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003134:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003138:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800313c:	fa92 f2a2 	rbit	r2, r2
 8003140:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003144:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003148:	fab2 f282 	clz	r2, r2
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	f042 0220 	orr.w	r2, r2, #32
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	f002 021f 	and.w	r2, r2, #31
 8003158:	2101      	movs	r1, #1
 800315a:	fa01 f202 	lsl.w	r2, r1, r2
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ab      	beq.n	80030bc <HAL_RCC_OscConfig+0x1d0>
 8003164:	e05d      	b.n	8003222 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003166:	f7fd ff3d 	bl	8000fe4 <HAL_GetTick>
 800316a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7fd ff38 	bl	8000fe4 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	@ 0x64
 800317e:	d902      	bls.n	8003186 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	f000 bee9 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>
 8003186:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800318a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800319a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d102      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2cc>
 80031b2:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	e015      	b.n	80031e4 <HAL_RCC_OscConfig+0x2f8>
 80031b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031bc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80031cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80031d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80031e0:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_RCC_OscConfig+0x330>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031e8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80031ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80031f0:	fa92 f2a2 	rbit	r2, r2
 80031f4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80031f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80031fc:	fab2 f282 	clz	r2, r2
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f042 0220 	orr.w	r2, r2, #32
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	f002 021f 	and.w	r2, r2, #31
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f202 	lsl.w	r2, r1, r2
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ab      	bne.n	8003170 <HAL_RCC_OscConfig+0x284>
 8003218:	e003      	b.n	8003222 <HAL_RCC_OscConfig+0x336>
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003226:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 817d 	beq.w	8003532 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003238:	4ba6      	ldr	r3, [pc, #664]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003244:	4ba3      	ldr	r3, [pc, #652]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d172      	bne.n	8003336 <HAL_RCC_OscConfig+0x44a>
 8003250:	4ba0      	ldr	r3, [pc, #640]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d16c      	bne.n	8003336 <HAL_RCC_OscConfig+0x44a>
 800325c:	2302      	movs	r3, #2
 800325e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003266:	fa93 f3a3 	rbit	r3, r3
 800326a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800326e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d102      	bne.n	800328c <HAL_RCC_OscConfig+0x3a0>
 8003286:	4b93      	ldr	r3, [pc, #588]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	e013      	b.n	80032b4 <HAL_RCC_OscConfig+0x3c8>
 800328c:	2302      	movs	r3, #2
 800328e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800329e:	2302      	movs	r3, #2
 80032a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80032a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80032b0:	4b88      	ldr	r3, [pc, #544]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	2202      	movs	r2, #2
 80032b6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80032ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80032be:	fa92 f2a2 	rbit	r2, r2
 80032c2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80032c6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f042 0220 	orr.w	r2, r2, #32
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	f002 021f 	and.w	r2, r2, #31
 80032da:	2101      	movs	r1, #1
 80032dc:	fa01 f202 	lsl.w	r2, r1, r2
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCC_OscConfig+0x410>
 80032e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d002      	beq.n	80032fc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f000 be2e 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b75      	ldr	r3, [pc, #468]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	21f8      	movs	r1, #248	@ 0xf8
 8003312:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800331a:	fa91 f1a1 	rbit	r1, r1
 800331e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003322:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003326:	fab1 f181 	clz	r1, r1
 800332a:	b2c9      	uxtb	r1, r1
 800332c:	408b      	lsls	r3, r1
 800332e:	4969      	ldr	r1, [pc, #420]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003334:	e0fd      	b.n	8003532 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8088 	beq.w	8003458 <HAL_RCC_OscConfig+0x56c>
 8003348:	2301      	movs	r3, #1
 800334a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800335a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003368:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	461a      	mov	r2, r3
 8003370:	2301      	movs	r3, #1
 8003372:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fd fe36 	bl	8000fe4 <HAL_GetTick>
 8003378:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337e:	f7fd fe31 	bl	8000fe4 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d902      	bls.n	8003394 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	f000 bde2 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>
 8003394:	2302      	movs	r3, #2
 8003396:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80033a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d102      	bne.n	80033c4 <HAL_RCC_OscConfig+0x4d8>
 80033be:	4b45      	ldr	r3, [pc, #276]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e013      	b.n	80033ec <HAL_RCC_OscConfig+0x500>
 80033c4:	2302      	movs	r3, #2
 80033c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80033dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80033e8:	4b3a      	ldr	r3, [pc, #232]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	2202      	movs	r2, #2
 80033ee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80033f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80033fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0af      	beq.n	800337e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341e:	4b2d      	ldr	r3, [pc, #180]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	21f8      	movs	r1, #248	@ 0xf8
 8003434:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800343c:	fa91 f1a1 	rbit	r1, r1
 8003440:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003444:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003448:	fab1 f181 	clz	r1, r1
 800344c:	b2c9      	uxtb	r1, r1
 800344e:	408b      	lsls	r3, r1
 8003450:	4920      	ldr	r1, [pc, #128]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]
 8003456:	e06c      	b.n	8003532 <HAL_RCC_OscConfig+0x646>
 8003458:	2301      	movs	r3, #1
 800345a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800346a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003478:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	461a      	mov	r2, r3
 8003480:	2300      	movs	r3, #0
 8003482:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fd fdae 	bl	8000fe4 <HAL_GetTick>
 8003488:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348e:	f7fd fda9 	bl	8000fe4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d902      	bls.n	80034a4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	f000 bd5a 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>
 80034a4:	2302      	movs	r3, #2
 80034a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80034b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d104      	bne.n	80034d8 <HAL_RCC_OscConfig+0x5ec>
 80034ce:	4b01      	ldr	r3, [pc, #4]	@ (80034d4 <HAL_RCC_OscConfig+0x5e8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	e015      	b.n	8003500 <HAL_RCC_OscConfig+0x614>
 80034d4:	40021000 	.word	0x40021000
 80034d8:	2302      	movs	r3, #2
 80034da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80034e2:	fa93 f3a3 	rbit	r3, r3
 80034e6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80034ea:	2302      	movs	r3, #2
 80034ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80034f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80034fc:	4bc8      	ldr	r3, [pc, #800]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	2202      	movs	r2, #2
 8003502:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003506:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800350a:	fa92 f2a2 	rbit	r2, r2
 800350e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003512:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003516:	fab2 f282 	clz	r2, r2
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	f042 0220 	orr.w	r2, r2, #32
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	f002 021f 	and.w	r2, r2, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f202 	lsl.w	r2, r1, r2
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ad      	bne.n	800348e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8110 	beq.w	8003768 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d079      	beq.n	800364c <HAL_RCC_OscConfig+0x760>
 8003558:	2301      	movs	r3, #1
 800355a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800356a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	4bab      	ldr	r3, [pc, #684]	@ (8003824 <HAL_RCC_OscConfig+0x938>)
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	461a      	mov	r2, r3
 800357e:	2301      	movs	r3, #1
 8003580:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003582:	f7fd fd2f 	bl	8000fe4 <HAL_GetTick>
 8003586:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358c:	f7fd fd2a 	bl	8000fe4 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d902      	bls.n	80035a2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	f000 bcdb 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>
 80035a2:	2302      	movs	r3, #2
 80035a4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80035bc:	2202      	movs	r2, #2
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	fa93 f2a3 	rbit	r2, r3
 80035ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80035e0:	2202      	movs	r2, #2
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80035fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fc:	4b88      	ldr	r3, [pc, #544]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 80035fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003604:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003608:	2102      	movs	r1, #2
 800360a:	6019      	str	r1, [r3, #0]
 800360c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003610:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	fa93 f1a3 	rbit	r1, r3
 800361a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003622:	6019      	str	r1, [r3, #0]
  return result;
 8003624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003628:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0a0      	beq.n	800358c <HAL_RCC_OscConfig+0x6a0>
 800364a:	e08d      	b.n	8003768 <HAL_RCC_OscConfig+0x87c>
 800364c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003650:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800366e:	601a      	str	r2, [r3, #0]
  return result;
 8003670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003674:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003678:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	4b68      	ldr	r3, [pc, #416]	@ (8003824 <HAL_RCC_OscConfig+0x938>)
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	461a      	mov	r2, r3
 800368a:	2300      	movs	r3, #0
 800368c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fd fca9 	bl	8000fe4 <HAL_GetTick>
 8003692:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003698:	f7fd fca4 	bl	8000fe4 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d902      	bls.n	80036ae <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	f000 bc55 	b.w	8003f58 <HAL_RCC_OscConfig+0x106c>
 80036ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80036b6:	2202      	movs	r2, #2
 80036b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036be:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	fa93 f2a3 	rbit	r2, r3
 80036c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036cc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80036da:	2202      	movs	r2, #2
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80036fe:	2202      	movs	r2, #2
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003706:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	fa93 f2a3 	rbit	r2, r3
 8003710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003714:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003718:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371a:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 800371c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800371e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003722:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003726:	2102      	movs	r1, #2
 8003728:	6019      	str	r1, [r3, #0]
 800372a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	fa93 f1a3 	rbit	r1, r3
 8003738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003740:	6019      	str	r1, [r3, #0]
  return result;
 8003742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003746:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f303 	lsl.w	r3, r1, r3
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d197      	bne.n	8003698 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 81a1 	beq.w	8003ac0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377e:	2300      	movs	r3, #0
 8003780:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003784:	4b26      	ldr	r3, [pc, #152]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d116      	bne.n	80037be <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003790:	4b23      	ldr	r3, [pc, #140]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	4a22      	ldr	r2, [pc, #136]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 8003796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379a:	61d3      	str	r3, [r2, #28]
 800379c:	4b20      	ldr	r3, [pc, #128]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80037a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80037b6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037be:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <HAL_RCC_OscConfig+0x93c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11a      	bne.n	8003800 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ca:	4b17      	ldr	r3, [pc, #92]	@ (8003828 <HAL_RCC_OscConfig+0x93c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a16      	ldr	r2, [pc, #88]	@ (8003828 <HAL_RCC_OscConfig+0x93c>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7fd fc05 	bl	8000fe4 <HAL_GetTick>
 80037da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	e009      	b.n	80037f4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7fd fc00 	bl	8000fe4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b64      	cmp	r3, #100	@ 0x64
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e3b1      	b.n	8003f58 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <HAL_RCC_OscConfig+0x93c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ef      	beq.n	80037e0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10d      	bne.n	800382c <HAL_RCC_OscConfig+0x940>
 8003810:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4a02      	ldr	r2, [pc, #8]	@ (8003820 <HAL_RCC_OscConfig+0x934>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6213      	str	r3, [r2, #32]
 800381c:	e03c      	b.n	8003898 <HAL_RCC_OscConfig+0x9ac>
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	10908120 	.word	0x10908120
 8003828:	40007000 	.word	0x40007000
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10c      	bne.n	8003856 <HAL_RCC_OscConfig+0x96a>
 800383c:	4bc1      	ldr	r3, [pc, #772]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	4ac0      	ldr	r2, [pc, #768]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6213      	str	r3, [r2, #32]
 8003848:	4bbe      	ldr	r3, [pc, #760]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	4abd      	ldr	r2, [pc, #756]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 800384e:	f023 0304 	bic.w	r3, r3, #4
 8003852:	6213      	str	r3, [r2, #32]
 8003854:	e020      	b.n	8003898 <HAL_RCC_OscConfig+0x9ac>
 8003856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b05      	cmp	r3, #5
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x994>
 8003866:	4bb7      	ldr	r3, [pc, #732]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4ab6      	ldr	r2, [pc, #728]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	6213      	str	r3, [r2, #32]
 8003872:	4bb4      	ldr	r3, [pc, #720]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4ab3      	ldr	r2, [pc, #716]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6213      	str	r3, [r2, #32]
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0x9ac>
 8003880:	4bb0      	ldr	r3, [pc, #704]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4aaf      	ldr	r2, [pc, #700]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	6213      	str	r3, [r2, #32]
 800388c:	4bad      	ldr	r3, [pc, #692]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4aac      	ldr	r2, [pc, #688]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003892:	f023 0304 	bic.w	r3, r3, #4
 8003896:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8081 	beq.w	80039ac <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038aa:	f7fd fb9b 	bl	8000fe4 <HAL_GetTick>
 80038ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	e00b      	b.n	80038cc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b4:	f7fd fb96 	bl	8000fe4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e345      	b.n	8003f58 <HAL_RCC_OscConfig+0x106c>
 80038cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038d4:	2202      	movs	r2, #2
 80038d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f2a3 	rbit	r2, r3
 80038e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80038f8:	2202      	movs	r2, #2
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003900:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f2a3 	rbit	r2, r3
 800390a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003912:	601a      	str	r2, [r3, #0]
  return result;
 8003914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003918:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800391c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d102      	bne.n	8003938 <HAL_RCC_OscConfig+0xa4c>
 8003932:	4b84      	ldr	r3, [pc, #528]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	e013      	b.n	8003960 <HAL_RCC_OscConfig+0xa74>
 8003938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003940:	2202      	movs	r2, #2
 8003942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003948:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003956:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	4b79      	ldr	r3, [pc, #484]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003964:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003968:	2102      	movs	r1, #2
 800396a:	6011      	str	r1, [r2, #0]
 800396c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003970:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	fa92 f1a2 	rbit	r1, r2
 800397a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800397e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003982:	6011      	str	r1, [r2, #0]
  return result;
 8003984:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003988:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	fab2 f282 	clz	r2, r2
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f002 021f 	and.w	r2, r2, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f202 	lsl.w	r2, r1, r2
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d084      	beq.n	80038b4 <HAL_RCC_OscConfig+0x9c8>
 80039aa:	e07f      	b.n	8003aac <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ac:	f7fd fb1a 	bl	8000fe4 <HAL_GetTick>
 80039b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b4:	e00b      	b.n	80039ce <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fd fb15 	bl	8000fe4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e2c4      	b.n	8003f58 <HAL_RCC_OscConfig+0x106c>
 80039ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80039d6:	2202      	movs	r2, #2
 80039d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039de:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	fa93 f2a3 	rbit	r2, r3
 80039e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ec:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a02:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a10:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003a14:	601a      	str	r2, [r3, #0]
  return result;
 8003a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003a1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d102      	bne.n	8003a3a <HAL_RCC_OscConfig+0xb4e>
 8003a34:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	e013      	b.n	8003a62 <HAL_RCC_OscConfig+0xb76>
 8003a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003a42:	2202      	movs	r2, #2
 8003a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a58:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a66:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a72:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	fa92 f1a2 	rbit	r1, r2
 8003a7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a80:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003a84:	6011      	str	r1, [r2, #0]
  return result;
 8003a86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a8a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	f002 021f 	and.w	r2, r2, #31
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d184      	bne.n	80039b6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003aac:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab4:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4a22      	ldr	r2, [pc, #136]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8242 	beq.w	8003f56 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b44 <HAL_RCC_OscConfig+0xc58>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	f000 8213 	beq.w	8003f06 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	f040 8162 	bne.w	8003db6 <HAL_RCC_OscConfig+0xeca>
 8003af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003afa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b04:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b12:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003b16:	601a      	str	r2, [r3, #0]
  return result;
 8003b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003b20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	461a      	mov	r2, r3
 8003b34:	2300      	movs	r3, #0
 8003b36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fd fa54 	bl	8000fe4 <HAL_GetTick>
 8003b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b40:	e00c      	b.n	8003b5c <HAL_RCC_OscConfig+0xc70>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd fa4c 	bl	8000fe4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1fd      	b.n	8003f58 <HAL_RCC_OscConfig+0x106c>
 8003b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b60:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003b64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	fa93 f2a3 	rbit	r2, r3
 8003b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003b80:	601a      	str	r2, [r3, #0]
  return result;
 8003b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b86:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003b8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_OscConfig+0xcba>
 8003ba0:	4bb0      	ldr	r3, [pc, #704]	@ (8003e64 <HAL_RCC_OscConfig+0xf78>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	e027      	b.n	8003bf6 <HAL_RCC_OscConfig+0xd0a>
 8003ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003baa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003bae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	fa93 f2a3 	rbit	r2, r3
 8003bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003bd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bde:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	fa93 f2a3 	rbit	r2, r3
 8003be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bec:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	4b9c      	ldr	r3, [pc, #624]	@ (8003e64 <HAL_RCC_OscConfig+0xf78>)
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bfa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003bfe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c02:	6011      	str	r1, [r2, #0]
 8003c04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c08:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	fa92 f1a2 	rbit	r1, r2
 8003c12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c16:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003c1a:	6011      	str	r1, [r2, #0]
  return result;
 8003c1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c20:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	fab2 f282 	clz	r2, r2
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	f042 0220 	orr.w	r2, r2, #32
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	f002 021f 	and.w	r2, r2, #31
 8003c36:	2101      	movs	r1, #1
 8003c38:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d182      	bne.n	8003b48 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c42:	4b88      	ldr	r3, [pc, #544]	@ (8003e64 <HAL_RCC_OscConfig+0xf78>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	430b      	orrs	r3, r1
 8003c64:	497f      	ldr	r1, [pc, #508]	@ (8003e64 <HAL_RCC_OscConfig+0xf78>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
 8003c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003c72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	fa93 f2a3 	rbit	r2, r3
 8003c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003c8e:	601a      	str	r2, [r3, #0]
  return result;
 8003c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c94:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003c98:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ca4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	461a      	mov	r2, r3
 8003cac:	2301      	movs	r3, #1
 8003cae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd f998 	bl	8000fe4 <HAL_GetTick>
 8003cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb8:	e009      	b.n	8003cce <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fd f993 	bl	8000fe4 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e144      	b.n	8003f58 <HAL_RCC_OscConfig+0x106c>
 8003cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003cd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	fa93 f2a3 	rbit	r2, r3
 8003cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003cf2:	601a      	str	r2, [r3, #0]
  return result;
 8003cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cf8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003cfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_RCC_OscConfig+0xe2c>
 8003d12:	4b54      	ldr	r3, [pc, #336]	@ (8003e64 <HAL_RCC_OscConfig+0xf78>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	e027      	b.n	8003d68 <HAL_RCC_OscConfig+0xe7c>
 8003d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003d20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	fa93 f2a3 	rbit	r2, r3
 8003d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d42:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003d46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d50:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	fa93 f2a3 	rbit	r2, r3
 8003d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	4b3f      	ldr	r3, [pc, #252]	@ (8003e64 <HAL_RCC_OscConfig+0xf78>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d6c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003d70:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003d74:	6011      	str	r1, [r2, #0]
 8003d76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d7a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	fa92 f1a2 	rbit	r1, r2
 8003d84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d88:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003d8c:	6011      	str	r1, [r2, #0]
  return result;
 8003d8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d92:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	fab2 f282 	clz	r2, r2
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	f042 0220 	orr.w	r2, r2, #32
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	f002 021f 	and.w	r2, r2, #31
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d082      	beq.n	8003cba <HAL_RCC_OscConfig+0xdce>
 8003db4:	e0cf      	b.n	8003f56 <HAL_RCC_OscConfig+0x106a>
 8003db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dba:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003dbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	fa93 f2a3 	rbit	r2, r3
 8003dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003dda:	601a      	str	r2, [r3, #0]
  return result;
 8003ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003de4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003df0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	461a      	mov	r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fd f8f2 	bl	8000fe4 <HAL_GetTick>
 8003e00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e04:	e009      	b.n	8003e1a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e06:	f7fd f8ed 	bl	8000fe4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e09e      	b.n	8003f58 <HAL_RCC_OscConfig+0x106c>
 8003e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003e22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	fa93 f2a3 	rbit	r2, r3
 8003e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003e3e:	601a      	str	r2, [r3, #0]
  return result;
 8003e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e44:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003e48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e4a:	fab3 f383 	clz	r3, r3
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d104      	bne.n	8003e68 <HAL_RCC_OscConfig+0xf7c>
 8003e5e:	4b01      	ldr	r3, [pc, #4]	@ (8003e64 <HAL_RCC_OscConfig+0xf78>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	e029      	b.n	8003eb8 <HAL_RCC_OscConfig+0xfcc>
 8003e64:	40021000 	.word	0x40021000
 8003e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003e70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	fa93 f2a3 	rbit	r2, r3
 8003e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e88:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e92:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003e96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <HAL_RCC_OscConfig+0x1078>)
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ebc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003ec0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ec4:	6011      	str	r1, [r2, #0]
 8003ec6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003eca:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	fa92 f1a2 	rbit	r1, r2
 8003ed4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ed8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003edc:	6011      	str	r1, [r2, #0]
  return result;
 8003ede:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ee2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	fab2 f282 	clz	r2, r2
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	f002 021f 	and.w	r2, r2, #31
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d180      	bne.n	8003e06 <HAL_RCC_OscConfig+0xf1a>
 8003f04:	e027      	b.n	8003f56 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e01e      	b.n	8003f58 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f1a:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <HAL_RCC_OscConfig+0x1078>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003f26:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d10b      	bne.n	8003f52 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003f3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000

08003f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b09e      	sub	sp, #120	@ 0x78
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e162      	b.n	8004246 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f80:	4b90      	ldr	r3, [pc, #576]	@ (80041c4 <HAL_RCC_ClockConfig+0x25c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d910      	bls.n	8003fb0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80041c4 <HAL_RCC_ClockConfig+0x25c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 0207 	bic.w	r2, r3, #7
 8003f96:	498b      	ldr	r1, [pc, #556]	@ (80041c4 <HAL_RCC_ClockConfig+0x25c>)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b89      	ldr	r3, [pc, #548]	@ (80041c4 <HAL_RCC_ClockConfig+0x25c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e14a      	b.n	8004246 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b82      	ldr	r3, [pc, #520]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	497f      	ldr	r1, [pc, #508]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80dc 	beq.w	8004194 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d13c      	bne.n	800405e <HAL_RCC_ClockConfig+0xf6>
 8003fe4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fe8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d102      	bne.n	800400e <HAL_RCC_ClockConfig+0xa6>
 8004008:	4b6f      	ldr	r3, [pc, #444]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	e00f      	b.n	800402e <HAL_RCC_ClockConfig+0xc6>
 800400e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004012:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	667b      	str	r3, [r7, #100]	@ 0x64
 800401c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004020:	663b      	str	r3, [r7, #96]	@ 0x60
 8004022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800402a:	4b67      	ldr	r3, [pc, #412]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004032:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004036:	fa92 f2a2 	rbit	r2, r2
 800403a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800403c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800403e:	fab2 f282 	clz	r2, r2
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	f042 0220 	orr.w	r2, r2, #32
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f002 021f 	and.w	r2, r2, #31
 800404e:	2101      	movs	r1, #1
 8004050:	fa01 f202 	lsl.w	r2, r1, r2
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d17b      	bne.n	8004152 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0f3      	b.n	8004246 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d13c      	bne.n	80040e0 <HAL_RCC_ClockConfig+0x178>
 8004066:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800406a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d102      	bne.n	8004090 <HAL_RCC_ClockConfig+0x128>
 800408a:	4b4f      	ldr	r3, [pc, #316]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e00f      	b.n	80040b0 <HAL_RCC_ClockConfig+0x148>
 8004090:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004094:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	647b      	str	r3, [r7, #68]	@ 0x44
 800409e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80040a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ac:	4b46      	ldr	r3, [pc, #280]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040b4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80040b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040b8:	fa92 f2a2 	rbit	r2, r2
 80040bc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80040be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040c0:	fab2 f282 	clz	r2, r2
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	f042 0220 	orr.w	r2, r2, #32
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	f002 021f 	and.w	r2, r2, #31
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f202 	lsl.w	r2, r1, r2
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d13a      	bne.n	8004152 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0b2      	b.n	8004246 <HAL_RCC_ClockConfig+0x2de>
 80040e0:	2302      	movs	r3, #2
 80040e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80040ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d102      	bne.n	8004108 <HAL_RCC_ClockConfig+0x1a0>
 8004102:	4b31      	ldr	r3, [pc, #196]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	e00d      	b.n	8004124 <HAL_RCC_ClockConfig+0x1bc>
 8004108:	2302      	movs	r3, #2
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
 8004114:	2302      	movs	r3, #2
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	4b29      	ldr	r3, [pc, #164]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	2202      	movs	r2, #2
 8004126:	61ba      	str	r2, [r7, #24]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	fa92 f2a2 	rbit	r2, r2
 800412e:	617a      	str	r2, [r7, #20]
  return result;
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	fab2 f282 	clz	r2, r2
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	f042 0220 	orr.w	r2, r2, #32
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	f002 021f 	and.w	r2, r2, #31
 8004142:	2101      	movs	r1, #1
 8004144:	fa01 f202 	lsl.w	r2, r1, r2
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e079      	b.n	8004246 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	491a      	ldr	r1, [pc, #104]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fc ff3e 	bl	8000fe4 <HAL_GetTick>
 8004168:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fc ff3a 	bl	8000fe4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e061      	b.n	8004246 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b11      	ldr	r3, [pc, #68]	@ (80041c8 <HAL_RCC_ClockConfig+0x260>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <HAL_RCC_ClockConfig+0x25c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d214      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <HAL_RCC_ClockConfig+0x25c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 0207 	bic.w	r2, r3, #7
 80041aa:	4906      	ldr	r1, [pc, #24]	@ (80041c4 <HAL_RCC_ClockConfig+0x25c>)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b04      	ldr	r3, [pc, #16]	@ (80041c4 <HAL_RCC_ClockConfig+0x25c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e040      	b.n	8004246 <HAL_RCC_ClockConfig+0x2de>
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004250 <HAL_RCC_ClockConfig+0x2e8>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	491a      	ldr	r1, [pc, #104]	@ (8004250 <HAL_RCC_ClockConfig+0x2e8>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f6:	4b16      	ldr	r3, [pc, #88]	@ (8004250 <HAL_RCC_ClockConfig+0x2e8>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4912      	ldr	r1, [pc, #72]	@ (8004250 <HAL_RCC_ClockConfig+0x2e8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800420a:	f000 f829 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 800420e:	4601      	mov	r1, r0
 8004210:	4b0f      	ldr	r3, [pc, #60]	@ (8004250 <HAL_RCC_ClockConfig+0x2e8>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004218:	22f0      	movs	r2, #240	@ 0xf0
 800421a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	fa92 f2a2 	rbit	r2, r2
 8004222:	60fa      	str	r2, [r7, #12]
  return result;
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	fab2 f282 	clz	r2, r2
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	40d3      	lsrs	r3, r2
 800422e:	4a09      	ldr	r2, [pc, #36]	@ (8004254 <HAL_RCC_ClockConfig+0x2ec>)
 8004230:	5cd3      	ldrb	r3, [r2, r3]
 8004232:	fa21 f303 	lsr.w	r3, r1, r3
 8004236:	4a08      	ldr	r2, [pc, #32]	@ (8004258 <HAL_RCC_ClockConfig+0x2f0>)
 8004238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800423a:	4b08      	ldr	r3, [pc, #32]	@ (800425c <HAL_RCC_ClockConfig+0x2f4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fc fe8c 	bl	8000f5c <HAL_InitTick>
  
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3778      	adds	r7, #120	@ 0x78
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000
 8004254:	0800c6cc 	.word	0x0800c6cc
 8004258:	2000001c 	.word	0x2000001c
 800425c:	20000014 	.word	0x20000014

08004260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004260:	b480      	push	{r7}
 8004262:	b08b      	sub	sp, #44	@ 0x2c
 8004264:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800427a:	4b29      	ldr	r3, [pc, #164]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xc0>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b04      	cmp	r3, #4
 8004288:	d002      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x30>
 800428a:	2b08      	cmp	r3, #8
 800428c:	d003      	beq.n	8004296 <HAL_RCC_GetSysClockFreq+0x36>
 800428e:	e03c      	b.n	800430a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004290:	4b24      	ldr	r3, [pc, #144]	@ (8004324 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004292:	623b      	str	r3, [r7, #32]
      break;
 8004294:	e03c      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800429c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80042a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	fa92 f2a2 	rbit	r2, r2
 80042a8:	607a      	str	r2, [r7, #4]
  return result;
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	fab2 f282 	clz	r2, r2
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	40d3      	lsrs	r3, r2
 80042b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004328 <HAL_RCC_GetSysClockFreq+0xc8>)
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80042ba:	4b19      	ldr	r3, [pc, #100]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	220f      	movs	r2, #15
 80042c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	fa92 f2a2 	rbit	r2, r2
 80042cc:	60fa      	str	r2, [r7, #12]
  return result;
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	fab2 f282 	clz	r2, r2
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	40d3      	lsrs	r3, r2
 80042d8:	4a14      	ldr	r2, [pc, #80]	@ (800432c <HAL_RCC_GetSysClockFreq+0xcc>)
 80042da:	5cd3      	ldrb	r3, [r2, r3]
 80042dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004324 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f8:	e004      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004330 <HAL_RCC_GetSysClockFreq+0xd0>)
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	623b      	str	r3, [r7, #32]
      break;
 8004308:	e002      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_GetSysClockFreq+0xc4>)
 800430c:	623b      	str	r3, [r7, #32]
      break;
 800430e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004310:	6a3b      	ldr	r3, [r7, #32]
}
 8004312:	4618      	mov	r0, r3
 8004314:	372c      	adds	r7, #44	@ 0x2c
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
 8004324:	007a1200 	.word	0x007a1200
 8004328:	0800c6ac 	.word	0x0800c6ac
 800432c:	0800c6bc 	.word	0x0800c6bc
 8004330:	003d0900 	.word	0x003d0900

08004334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004338:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <HAL_RCC_GetHCLKFreq+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	2000001c 	.word	0x2000001c

0800434c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004352:	f7ff ffef 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 8004356:	4601      	mov	r1, r0
 8004358:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004360:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004364:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	fa92 f2a2 	rbit	r2, r2
 800436c:	603a      	str	r2, [r7, #0]
  return result;
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	fab2 f282 	clz	r2, r2
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	40d3      	lsrs	r3, r2
 8004378:	4a04      	ldr	r2, [pc, #16]	@ (800438c <HAL_RCC_GetPCLK1Freq+0x40>)
 800437a:	5cd3      	ldrb	r3, [r2, r3]
 800437c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40021000 	.word	0x40021000
 800438c:	0800c6dc 	.word	0x0800c6dc

08004390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004396:	f7ff ffcd 	bl	8004334 <HAL_RCC_GetHCLKFreq>
 800439a:	4601      	mov	r1, r0
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80043a4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80043a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	fa92 f2a2 	rbit	r2, r2
 80043b0:	603a      	str	r2, [r7, #0]
  return result;
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	fab2 f282 	clz	r2, r2
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	40d3      	lsrs	r3, r2
 80043bc:	4a04      	ldr	r2, [pc, #16]	@ (80043d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80043be:	5cd3      	ldrb	r3, [r2, r3]
 80043c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000
 80043d0:	0800c6dc 	.word	0x0800c6dc

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b092      	sub	sp, #72	@ 0x48
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80d4 	beq.w	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f8:	4b4e      	ldr	r3, [pc, #312]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10e      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004404:	4b4b      	ldr	r3, [pc, #300]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4a4a      	ldr	r2, [pc, #296]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800440a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440e:	61d3      	str	r3, [r2, #28]
 8004410:	4b48      	ldr	r3, [pc, #288]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004422:	4b45      	ldr	r3, [pc, #276]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d118      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800442e:	4b42      	ldr	r3, [pc, #264]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a41      	ldr	r2, [pc, #260]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004438:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443a:	f7fc fdd3 	bl	8000fe4 <HAL_GetTick>
 800443e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	e008      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004442:	f7fc fdcf 	bl	8000fe4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b64      	cmp	r3, #100	@ 0x64
 800444e:	d901      	bls.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e14b      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	4b38      	ldr	r3, [pc, #224]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004460:	4b34      	ldr	r3, [pc, #208]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004468:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800446a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8084 	beq.w	800457a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800447a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800447c:	429a      	cmp	r2, r3
 800447e:	d07c      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004480:	4b2c      	ldr	r3, [pc, #176]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800448a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800448e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800449a:	fab3 f383 	clz	r3, r3
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b26      	ldr	r3, [pc, #152]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	461a      	mov	r2, r3
 80044aa:	2301      	movs	r3, #1
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80044bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	461a      	mov	r2, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044d2:	4a18      	ldr	r2, [pc, #96]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d04b      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7fc fd7f 	bl	8000fe4 <HAL_GetTick>
 80044e6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	e00a      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fc fd7b 	bl	8000fe4 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e0f5      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004500:	2302      	movs	r3, #2
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
 800450c:	2302      	movs	r3, #2
 800450e:	623b      	str	r3, [r7, #32]
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	61fb      	str	r3, [r7, #28]
  return result;
 8004518:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	fab3 f383 	clz	r3, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f043 0302 	orr.w	r3, r3, #2
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d108      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800452e:	4b01      	ldr	r3, [pc, #4]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	e00d      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004534:	40021000 	.word	0x40021000
 8004538:	40007000 	.word	0x40007000
 800453c:	10908100 	.word	0x10908100
 8004540:	2302      	movs	r3, #2
 8004542:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	4b69      	ldr	r3, [pc, #420]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	2202      	movs	r2, #2
 8004552:	613a      	str	r2, [r7, #16]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	fa92 f2a2 	rbit	r2, r2
 800455a:	60fa      	str	r2, [r7, #12]
  return result;
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	fab2 f282 	clz	r2, r2
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	f002 021f 	and.w	r2, r2, #31
 800456e:	2101      	movs	r1, #1
 8004570:	fa01 f202 	lsl.w	r2, r1, r2
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0b7      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800457a:	4b5e      	ldr	r3, [pc, #376]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	495b      	ldr	r1, [pc, #364]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004588:	4313      	orrs	r3, r2
 800458a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800458c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004594:	4b57      	ldr	r3, [pc, #348]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	4a56      	ldr	r2, [pc, #344]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800459a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ac:	4b51      	ldr	r3, [pc, #324]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b0:	f023 0203 	bic.w	r2, r3, #3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	494e      	ldr	r1, [pc, #312]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045ca:	4b4a      	ldr	r3, [pc, #296]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	f023 0210 	bic.w	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4947      	ldr	r1, [pc, #284]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80045e8:	4b42      	ldr	r3, [pc, #264]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	493f      	ldr	r1, [pc, #252]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004606:	4b3b      	ldr	r3, [pc, #236]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	f023 0220 	bic.w	r2, r3, #32
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	4938      	ldr	r1, [pc, #224]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004614:	4313      	orrs	r3, r2
 8004616:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004624:	4b33      	ldr	r3, [pc, #204]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	4930      	ldr	r1, [pc, #192]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004632:	4313      	orrs	r3, r2
 8004634:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004642:	4b2c      	ldr	r3, [pc, #176]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4929      	ldr	r1, [pc, #164]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004650:	4313      	orrs	r3, r2
 8004652:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004660:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	4921      	ldr	r1, [pc, #132]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800466e:	4313      	orrs	r3, r2
 8004670:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800467e:	4b1d      	ldr	r3, [pc, #116]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	491a      	ldr	r1, [pc, #104]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800468c:	4313      	orrs	r3, r2
 800468e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800469c:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	4912      	ldr	r1, [pc, #72]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80046ba:	4b0e      	ldr	r3, [pc, #56]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c6:	490b      	ldr	r1, [pc, #44]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80046d8:	4b06      	ldr	r3, [pc, #24]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	4903      	ldr	r1, [pc, #12]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3748      	adds	r7, #72	@ 0x48
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e09d      	b.n	8004846 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800471a:	d009      	beq.n	8004730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]
 8004722:	e005      	b.n	8004730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f87f 	bl	800484e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004766:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004770:	d902      	bls.n	8004778 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e002      	b.n	800477e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800477c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004786:	d007      	beq.n	8004798 <HAL_SPI_Init+0xa0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004790:	d002      	beq.n	8004798 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047da:	ea42 0103 	orr.w	r1, r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	f003 0204 	and.w	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004814:	ea42 0103 	orr.w	r1, r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08a      	sub	sp, #40	@ 0x28
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004870:	2301      	movs	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x26>
 8004884:	2302      	movs	r3, #2
 8004886:	e20a      	b.n	8004c9e <HAL_SPI_TransmitReceive+0x43c>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004890:	f7fc fba8 	bl	8000fe4 <HAL_GetTick>
 8004894:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800489c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048a8:	887b      	ldrh	r3, [r7, #2]
 80048aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048ac:	7efb      	ldrb	r3, [r7, #27]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d00e      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x6e>
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048b8:	d106      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_SPI_TransmitReceive+0x66>
 80048c2:	7efb      	ldrb	r3, [r7, #27]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d003      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80048ce:	e1e0      	b.n	8004c92 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x80>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x80>
 80048dc:	887b      	ldrh	r3, [r7, #2]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80048e8:	e1d3      	b.n	8004c92 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d003      	beq.n	80048fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2205      	movs	r2, #5
 80048fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	887a      	ldrh	r2, [r7, #2]
 800490e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	887a      	ldrh	r2, [r7, #2]
 8004916:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	887a      	ldrh	r2, [r7, #2]
 8004924:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	887a      	ldrh	r2, [r7, #2]
 800492a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004940:	d802      	bhi.n	8004948 <HAL_SPI_TransmitReceive+0xe6>
 8004942:	8a3b      	ldrh	r3, [r7, #16]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d908      	bls.n	800495a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	e007      	b.n	800496a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004968:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b40      	cmp	r3, #64	@ 0x40
 8004976:	d007      	beq.n	8004988 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004990:	f240 8081 	bls.w	8004a96 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x140>
 800499c:	8a7b      	ldrh	r3, [r7, #18]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d16d      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a6:	881a      	ldrh	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b2:	1c9a      	adds	r2, r3, #2
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049c6:	e05a      	b.n	8004a7e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d11b      	bne.n	8004a0e <HAL_SPI_TransmitReceive+0x1ac>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d016      	beq.n	8004a0e <HAL_SPI_TransmitReceive+0x1ac>
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d113      	bne.n	8004a0e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ea:	881a      	ldrh	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	1c9a      	adds	r2, r3, #2
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d11c      	bne.n	8004a56 <HAL_SPI_TransmitReceive+0x1f4>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d016      	beq.n	8004a56 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	b292      	uxth	r2, r2
 8004a34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	1c9a      	adds	r2, r3, #2
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a52:	2301      	movs	r3, #1
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a56:	f7fc fac5 	bl	8000fe4 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d80b      	bhi.n	8004a7e <HAL_SPI_TransmitReceive+0x21c>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d007      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004a7c:	e109      	b.n	8004c92 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d19f      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x166>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d199      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x166>
 8004a94:	e0e3      	b.n	8004c5e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_SPI_TransmitReceive+0x244>
 8004a9e:	8a7b      	ldrh	r3, [r7, #18]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f040 80cf 	bne.w	8004c44 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d912      	bls.n	8004ad6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	881a      	ldrh	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b02      	subs	r3, #2
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ad4:	e0b6      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004afc:	e0a2      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d134      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x314>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d02f      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x314>
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d12c      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d912      	bls.n	8004b4c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	1c9a      	adds	r2, r3, #2
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b02      	subs	r3, #2
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b4a:	e012      	b.n	8004b72 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	7812      	ldrb	r2, [r2, #0]
 8004b58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d148      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x3b4>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d042      	beq.n	8004c16 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d923      	bls.n	8004be4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b02      	subs	r3, #2
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d81f      	bhi.n	8004c12 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	e016      	b.n	8004c12 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f103 020c 	add.w	r2, r3, #12
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c12:	2301      	movs	r3, #1
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c16:	f7fc f9e5 	bl	8000fe4 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d803      	bhi.n	8004c2e <HAL_SPI_TransmitReceive+0x3cc>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d102      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x3d2>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004c42:	e026      	b.n	8004c92 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f47f af57 	bne.w	8004afe <HAL_SPI_TransmitReceive+0x29c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f47f af50 	bne.w	8004afe <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f94c 	bl	8004f00 <SPI_EndRxTxTransaction>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d005      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c88:	e003      	b.n	8004c92 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3728      	adds	r7, #40	@ 0x28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cb4:	b2db      	uxtb	r3, r3
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cd4:	f7fc f986 	bl	8000fe4 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ce4:	f7fc f97e 	bl	8000fe4 <HAL_GetTick>
 8004ce8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cea:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	015b      	lsls	r3, r3, #5
 8004cf0:	0d1b      	lsrs	r3, r3, #20
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	fb02 f303 	mul.w	r3, r2, r3
 8004cf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cfa:	e054      	b.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d050      	beq.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d04:	f7fc f96e 	bl	8000fe4 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d902      	bls.n	8004d1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d13d      	bne.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d32:	d111      	bne.n	8004d58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d3c:	d004      	beq.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d46:	d107      	bne.n	8004d58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d60:	d10f      	bne.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e017      	b.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4013      	ands	r3, r2
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	79fb      	ldrb	r3, [r7, #7]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d19b      	bne.n	8004cfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	2000001c 	.word	0x2000001c

08004dd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08a      	sub	sp, #40	@ 0x28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004de6:	f7fc f8fd 	bl	8000fe4 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	4413      	add	r3, r2
 8004df4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004df6:	f7fc f8f5 	bl	8000fe4 <HAL_GetTick>
 8004dfa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e04:	4b3d      	ldr	r3, [pc, #244]	@ (8004efc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00da      	lsls	r2, r3, #3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	0d1b      	lsrs	r3, r3, #20
 8004e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e1c:	e060      	b.n	8004ee0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004e24:	d107      	bne.n	8004e36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d050      	beq.n	8004ee0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e3e:	f7fc f8d1 	bl	8000fe4 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d902      	bls.n	8004e54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d13d      	bne.n	8004ed0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6c:	d111      	bne.n	8004e92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e76:	d004      	beq.n	8004e82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e80:	d107      	bne.n	8004e92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e9a:	d10f      	bne.n	8004ebc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e010      	b.n	8004ef2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d196      	bne.n	8004e1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3728      	adds	r7, #40	@ 0x28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	2000001c 	.word	0x2000001c

08004f00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff ff5b 	bl	8004dd4 <SPI_WaitFifoStateUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e027      	b.n	8004f84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2180      	movs	r1, #128	@ 0x80
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7ff fec0 	bl	8004cc4 <SPI_WaitFlagStateUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4e:	f043 0220 	orr.w	r2, r3, #32
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e014      	b.n	8004f84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f7ff ff34 	bl	8004dd4 <SPI_WaitFifoStateUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e000      	b.n	8004f84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e040      	b.n	8005020 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f83a 	bl	8005028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2224      	movs	r2, #36	@ 0x24
 8004fb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0201 	bic.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8c0 	bl	8005150 <UART_SetConfig>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e022      	b.n	8005020 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f9ea 	bl	80053bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fa71 	bl	8005500 <UART_CheckIdleState>
 800501e:	4603      	mov	r3, r0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	@ 0x28
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005050:	2b20      	cmp	r3, #32
 8005052:	d177      	bne.n	8005144 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Transmit+0x24>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e070      	b.n	8005146 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2221      	movs	r2, #33	@ 0x21
 8005070:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005072:	f7fb ffb7 	bl	8000fe4 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005090:	d108      	bne.n	80050a4 <HAL_UART_Transmit+0x68>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e003      	b.n	80050ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050ac:	e02f      	b.n	800510e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2200      	movs	r2, #0
 80050b6:	2180      	movs	r1, #128	@ 0x80
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fac9 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e03b      	b.n	8005146 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	881a      	ldrh	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e0:	b292      	uxth	r2, r2
 80050e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	3302      	adds	r3, #2
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	e007      	b.n	80050fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	781a      	ldrb	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3301      	adds	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1c9      	bne.n	80050ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	2140      	movs	r1, #64	@ 0x40
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fa93 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e005      	b.n	8005146 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005144:	2302      	movs	r3, #2
  }
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b8a      	ldr	r3, [pc, #552]	@ (80053a4 <UART_SetConfig+0x254>)
 800517c:	4013      	ands	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	6979      	ldr	r1, [r7, #20]
 8005184:	430b      	orrs	r3, r1
 8005186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	430a      	orrs	r2, r1
 80051c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a78      	ldr	r2, [pc, #480]	@ (80053a8 <UART_SetConfig+0x258>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d120      	bne.n	800520e <UART_SetConfig+0xbe>
 80051cc:	4b77      	ldr	r3, [pc, #476]	@ (80053ac <UART_SetConfig+0x25c>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d817      	bhi.n	8005208 <UART_SetConfig+0xb8>
 80051d8:	a201      	add	r2, pc, #4	@ (adr r2, 80051e0 <UART_SetConfig+0x90>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	080051f1 	.word	0x080051f1
 80051e4:	080051fd 	.word	0x080051fd
 80051e8:	08005203 	.word	0x08005203
 80051ec:	080051f7 	.word	0x080051f7
 80051f0:	2300      	movs	r3, #0
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e01d      	b.n	8005232 <UART_SetConfig+0xe2>
 80051f6:	2302      	movs	r3, #2
 80051f8:	77fb      	strb	r3, [r7, #31]
 80051fa:	e01a      	b.n	8005232 <UART_SetConfig+0xe2>
 80051fc:	2304      	movs	r3, #4
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e017      	b.n	8005232 <UART_SetConfig+0xe2>
 8005202:	2308      	movs	r3, #8
 8005204:	77fb      	strb	r3, [r7, #31]
 8005206:	e014      	b.n	8005232 <UART_SetConfig+0xe2>
 8005208:	2310      	movs	r3, #16
 800520a:	77fb      	strb	r3, [r7, #31]
 800520c:	e011      	b.n	8005232 <UART_SetConfig+0xe2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a67      	ldr	r2, [pc, #412]	@ (80053b0 <UART_SetConfig+0x260>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d102      	bne.n	800521e <UART_SetConfig+0xce>
 8005218:	2300      	movs	r3, #0
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0xe2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a64      	ldr	r2, [pc, #400]	@ (80053b4 <UART_SetConfig+0x264>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d102      	bne.n	800522e <UART_SetConfig+0xde>
 8005228:	2300      	movs	r3, #0
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e001      	b.n	8005232 <UART_SetConfig+0xe2>
 800522e:	2310      	movs	r3, #16
 8005230:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800523a:	d15a      	bne.n	80052f2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800523c:	7ffb      	ldrb	r3, [r7, #31]
 800523e:	2b08      	cmp	r3, #8
 8005240:	d827      	bhi.n	8005292 <UART_SetConfig+0x142>
 8005242:	a201      	add	r2, pc, #4	@ (adr r2, 8005248 <UART_SetConfig+0xf8>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005275 	.word	0x08005275
 8005250:	0800527d 	.word	0x0800527d
 8005254:	08005293 	.word	0x08005293
 8005258:	08005283 	.word	0x08005283
 800525c:	08005293 	.word	0x08005293
 8005260:	08005293 	.word	0x08005293
 8005264:	08005293 	.word	0x08005293
 8005268:	0800528b 	.word	0x0800528b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800526c:	f7ff f86e 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8005270:	61b8      	str	r0, [r7, #24]
        break;
 8005272:	e013      	b.n	800529c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7ff f88c 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8005278:	61b8      	str	r0, [r7, #24]
        break;
 800527a:	e00f      	b.n	800529c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800527c:	4b4e      	ldr	r3, [pc, #312]	@ (80053b8 <UART_SetConfig+0x268>)
 800527e:	61bb      	str	r3, [r7, #24]
        break;
 8005280:	e00c      	b.n	800529c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005282:	f7fe ffed 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 8005286:	61b8      	str	r0, [r7, #24]
        break;
 8005288:	e008      	b.n	800529c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800528e:	61bb      	str	r3, [r7, #24]
        break;
 8005290:	e004      	b.n	800529c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	77bb      	strb	r3, [r7, #30]
        break;
 800529a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d074      	beq.n	800538c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	005a      	lsls	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	085b      	lsrs	r3, r3, #1
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	d916      	bls.n	80052ec <UART_SetConfig+0x19c>
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c4:	d212      	bcs.n	80052ec <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f023 030f 	bic.w	r3, r3, #15
 80052ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	b29a      	uxth	r2, r3
 80052dc:	89fb      	ldrh	r3, [r7, #14]
 80052de:	4313      	orrs	r3, r2
 80052e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	89fa      	ldrh	r2, [r7, #14]
 80052e8:	60da      	str	r2, [r3, #12]
 80052ea:	e04f      	b.n	800538c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	77bb      	strb	r3, [r7, #30]
 80052f0:	e04c      	b.n	800538c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052f2:	7ffb      	ldrb	r3, [r7, #31]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d828      	bhi.n	800534a <UART_SetConfig+0x1fa>
 80052f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <UART_SetConfig+0x1b0>)
 80052fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fe:	bf00      	nop
 8005300:	08005325 	.word	0x08005325
 8005304:	0800532d 	.word	0x0800532d
 8005308:	08005335 	.word	0x08005335
 800530c:	0800534b 	.word	0x0800534b
 8005310:	0800533b 	.word	0x0800533b
 8005314:	0800534b 	.word	0x0800534b
 8005318:	0800534b 	.word	0x0800534b
 800531c:	0800534b 	.word	0x0800534b
 8005320:	08005343 	.word	0x08005343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005324:	f7ff f812 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8005328:	61b8      	str	r0, [r7, #24]
        break;
 800532a:	e013      	b.n	8005354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800532c:	f7ff f830 	bl	8004390 <HAL_RCC_GetPCLK2Freq>
 8005330:	61b8      	str	r0, [r7, #24]
        break;
 8005332:	e00f      	b.n	8005354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005334:	4b20      	ldr	r3, [pc, #128]	@ (80053b8 <UART_SetConfig+0x268>)
 8005336:	61bb      	str	r3, [r7, #24]
        break;
 8005338:	e00c      	b.n	8005354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533a:	f7fe ff91 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 800533e:	61b8      	str	r0, [r7, #24]
        break;
 8005340:	e008      	b.n	8005354 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005346:	61bb      	str	r3, [r7, #24]
        break;
 8005348:	e004      	b.n	8005354 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	77bb      	strb	r3, [r7, #30]
        break;
 8005352:	bf00      	nop
    }

    if (pclk != 0U)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d018      	beq.n	800538c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	085a      	lsrs	r2, r3, #1
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	441a      	add	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b0f      	cmp	r3, #15
 8005372:	d909      	bls.n	8005388 <UART_SetConfig+0x238>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537a:	d205      	bcs.n	8005388 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	b29a      	uxth	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60da      	str	r2, [r3, #12]
 8005386:	e001      	b.n	800538c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005398:	7fbb      	ldrb	r3, [r7, #30]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	efff69f3 	.word	0xefff69f3
 80053a8:	40013800 	.word	0x40013800
 80053ac:	40021000 	.word	0x40021000
 80053b0:	40004400 	.word	0x40004400
 80053b4:	40004800 	.word	0x40004800
 80053b8:	007a1200 	.word	0x007a1200

080053bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ba:	d10a      	bne.n	80054d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b098      	sub	sp, #96	@ 0x60
 8005504:	af02      	add	r7, sp, #8
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005510:	f7fb fd68 	bl	8000fe4 <HAL_GetTick>
 8005514:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b08      	cmp	r3, #8
 8005522:	d12e      	bne.n	8005582 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005524:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800552c:	2200      	movs	r2, #0
 800552e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f88c 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d021      	beq.n	8005582 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800554c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800554e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005552:	653b      	str	r3, [r7, #80]	@ 0x50
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800555c:	647b      	str	r3, [r7, #68]	@ 0x44
 800555e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005562:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800556a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e6      	bne.n	800553e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e062      	b.n	8005648 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d149      	bne.n	8005624 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f856 	bl	8005650 <UART_WaitOnFlagUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d03c      	beq.n	8005624 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	623b      	str	r3, [r7, #32]
   return(result);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3308      	adds	r3, #8
 80055fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055fc:	61fa      	str	r2, [r7, #28]
 80055fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	69b9      	ldr	r1, [r7, #24]
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	617b      	str	r3, [r7, #20]
   return(result);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e5      	bne.n	80055dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e011      	b.n	8005648 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3758      	adds	r7, #88	@ 0x58
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005660:	e049      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d045      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fb fcbb 	bl	8000fe4 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <UART_WaitOnFlagUntilTimeout+0x30>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e048      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d031      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b08      	cmp	r3, #8
 800569e:	d110      	bne.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2208      	movs	r2, #8
 80056a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f838 	bl	800571e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2208      	movs	r2, #8
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e029      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d0:	d111      	bne.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f81e 	bl	800571e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e00f      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	429a      	cmp	r2, r3
 8005712:	d0a6      	beq.n	8005662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571e:	b480      	push	{r7}
 8005720:	b095      	sub	sp, #84	@ 0x54
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800573a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005744:	643b      	str	r3, [r7, #64]	@ 0x40
 8005746:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800574a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e6      	bne.n	8005726 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3308      	adds	r3, #8
 800575e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	61fb      	str	r3, [r7, #28]
   return(result);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3308      	adds	r3, #8
 8005776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800577a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800577e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e5      	bne.n	8005758 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005790:	2b01      	cmp	r3, #1
 8005792:	d118      	bne.n	80057c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6979      	ldr	r1, [r7, #20]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	613b      	str	r3, [r7, #16]
   return(result);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e6      	bne.n	8005794 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057da:	bf00      	nop
 80057dc:	3754      	adds	r7, #84	@ 0x54
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b08c      	sub	sp, #48	@ 0x30
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]
 80057f2:	460b      	mov	r3, r1
 80057f4:	71bb      	strb	r3, [r7, #6]
 80057f6:	4613      	mov	r3, r2
 80057f8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80057fe:	79bb      	ldrb	r3, [r7, #6]
 8005800:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8005802:	797b      	ldrb	r3, [r7, #5]
 8005804:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005806:	f107 030c 	add.w	r3, r7, #12
 800580a:	2207      	movs	r2, #7
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f003 fb3f 	bl	8008e92 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005814:	f107 0318 	add.w	r3, r7, #24
 8005818:	2218      	movs	r2, #24
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f003 fb38 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005822:	233f      	movs	r3, #63	@ 0x3f
 8005824:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8005826:	238a      	movs	r3, #138	@ 0x8a
 8005828:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800582a:	f107 0314 	add.w	r3, r7, #20
 800582e:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8005830:	2303      	movs	r3, #3
 8005832:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8005834:	f107 030c 	add.w	r3, r7, #12
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800583a:	2307      	movs	r3, #7
 800583c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800583e:	f107 0318 	add.w	r3, r7, #24
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fe75 	bl	8006534 <hci_send_req>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	da01      	bge.n	8005854 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8005850:	23ff      	movs	r3, #255	@ 0xff
 8005852:	e014      	b.n	800587e <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8005854:	7b3b      	ldrb	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800585a:	7b3b      	ldrb	r3, [r7, #12]
 800585c:	e00f      	b.n	800587e <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800585e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8005862:	b29a      	uxth	r2, r3
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8005868:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800586c:	b29a      	uxth	r2, r3
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005872:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8005876:	b29a      	uxth	r2, r3
 8005878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800587a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3730      	adds	r7, #48	@ 0x30
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b08e      	sub	sp, #56	@ 0x38
 800588a:	af00      	add	r7, sp, #0
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4603      	mov	r3, r0
 8005894:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800589a:	f107 0314 	add.w	r3, r7, #20
 800589e:	2207      	movs	r2, #7
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f003 faf5 	bl	8008e92 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058a8:	f107 0320 	add.w	r3, r7, #32
 80058ac:	2218      	movs	r2, #24
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f003 faee 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80058b6:	233f      	movs	r3, #63	@ 0x3f
 80058b8:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80058ba:	238a      	movs	r3, #138	@ 0x8a
 80058bc:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 80058be:	f107 031c 	add.w	r3, r7, #28
 80058c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 80058c4:	2301      	movs	r3, #1
 80058c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80058ce:	2307      	movs	r3, #7
 80058d0:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80058d2:	f107 0320 	add.w	r3, r7, #32
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fe2b 	bl	8006534 <hci_send_req>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	da01      	bge.n	80058e8 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80058e4:	23ff      	movs	r3, #255	@ 0xff
 80058e6:	e014      	b.n	8005912 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80058e8:	7d3b      	ldrb	r3, [r7, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80058ee:	7d3b      	ldrb	r3, [r7, #20]
 80058f0:	e00f      	b.n	8005912 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80058f2:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80058fc:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8005900:	b29a      	uxth	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8005906:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800590a:	b29a      	uxth	r2, r3
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3738      	adds	r7, #56	@ 0x38
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800591a:	b590      	push	{r4, r7, lr}
 800591c:	b095      	sub	sp, #84	@ 0x54
 800591e:	af00      	add	r7, sp, #0
 8005920:	4604      	mov	r4, r0
 8005922:	4608      	mov	r0, r1
 8005924:	4611      	mov	r1, r2
 8005926:	461a      	mov	r2, r3
 8005928:	4623      	mov	r3, r4
 800592a:	71fb      	strb	r3, [r7, #7]
 800592c:	4603      	mov	r3, r0
 800592e:	80bb      	strh	r3, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	807b      	strh	r3, [r7, #2]
 8005934:	4613      	mov	r3, r2
 8005936:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800593e:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8005942:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8005946:	4413      	add	r3, r2
 8005948:	330e      	adds	r3, #14
 800594a:	2b28      	cmp	r3, #40	@ 0x28
 800594c:	d901      	bls.n	8005952 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800594e:	2342      	movs	r3, #66	@ 0x42
 8005950:	e0c9      	b.n	8005ae6 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8005952:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005956:	3350      	adds	r3, #80	@ 0x50
 8005958:	443b      	add	r3, r7
 800595a:	79fa      	ldrb	r2, [r7, #7]
 800595c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005960:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005964:	3301      	adds	r3, #1
 8005966:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800596a:	88bb      	ldrh	r3, [r7, #4]
 800596c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800596e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005972:	f107 0208 	add.w	r2, r7, #8
 8005976:	4413      	add	r3, r2
 8005978:	88ba      	ldrh	r2, [r7, #4]
 800597a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800597c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005980:	3302      	adds	r3, #2
 8005982:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800598a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800598e:	f107 0208 	add.w	r2, r7, #8
 8005992:	4413      	add	r3, r2
 8005994:	887a      	ldrh	r2, [r7, #2]
 8005996:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005998:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800599c:	3302      	adds	r3, #2
 800599e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 80059a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059a6:	3350      	adds	r3, #80	@ 0x50
 80059a8:	443b      	add	r3, r7
 80059aa:	79ba      	ldrb	r2, [r7, #6]
 80059ac:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80059b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059b4:	3301      	adds	r3, #1
 80059b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80059ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059be:	3350      	adds	r3, #80	@ 0x50
 80059c0:	443b      	add	r3, r7
 80059c2:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80059c6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80059ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059ce:	3301      	adds	r3, #1
 80059d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 80059d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059d8:	3350      	adds	r3, #80	@ 0x50
 80059da:	443b      	add	r3, r7
 80059dc:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80059e0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80059e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059e8:	3301      	adds	r3, #1
 80059ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80059ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80059f2:	f107 0208 	add.w	r2, r7, #8
 80059f6:	4413      	add	r3, r2
 80059f8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80059fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059fe:	4618      	mov	r0, r3
 8005a00:	f003 fac7 	bl	8008f92 <memcpy>
  indx +=  LocalNameLen;
 8005a04:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005a08:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8005a12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a16:	3350      	adds	r3, #80	@ 0x50
 8005a18:	443b      	add	r3, r7
 8005a1a:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8005a1e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8005a22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a26:	3301      	adds	r3, #1
 8005a28:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8005a2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a30:	f107 0208 	add.w	r2, r7, #8
 8005a34:	4413      	add	r3, r2
 8005a36:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8005a3a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f003 faa8 	bl	8008f92 <memcpy>
  indx +=  ServiceUUIDLen;  
 8005a42:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005a46:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8005a50:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8005a54:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8005a58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a5c:	f107 0208 	add.w	r2, r7, #8
 8005a60:	4413      	add	r3, r2
 8005a62:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8005a66:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8005a68:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8005a72:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8005a76:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8005a7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a7e:	f107 0208 	add.w	r2, r7, #8
 8005a82:	4413      	add	r3, r2
 8005a84:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8005a88:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8005a8a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005a8e:	3302      	adds	r3, #2
 8005a90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005a94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005a98:	2218      	movs	r2, #24
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f003 f9f8 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005aa2:	233f      	movs	r3, #63	@ 0x3f
 8005aa4:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8005aa6:	2383      	movs	r3, #131	@ 0x83
 8005aa8:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8005aaa:	f107 0308 	add.w	r3, r7, #8
 8005aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8005ab0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005ab4:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8005ab6:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8005aba:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8005abc:	2301      	movs	r3, #1
 8005abe:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8005ac0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fd34 	bl	8006534 <hci_send_req>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da01      	bge.n	8005ad6 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8005ad2:	23ff      	movs	r3, #255	@ 0xff
 8005ad4:	e007      	b.n	8005ae6 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8005ad6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <aci_gap_set_discoverable+0x1ca>
    return status;
 8005ade:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ae2:	e000      	b.n	8005ae6 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3754      	adds	r7, #84	@ 0x54
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd90      	pop	{r4, r7, pc}

08005aee <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8005aee:	b590      	push	{r4, r7, lr}
 8005af0:	b091      	sub	sp, #68	@ 0x44
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	603a      	str	r2, [r7, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	4603      	mov	r3, r0
 8005afa:	71fb      	strb	r3, [r7, #7]
 8005afc:	460b      	mov	r3, r1
 8005afe:	71bb      	strb	r3, [r7, #6]
 8005b00:	4613      	mov	r3, r2
 8005b02:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8005b08:	79bb      	ldrb	r3, [r7, #6]
 8005b0a:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8005b0c:	79bb      	ldrb	r3, [r7, #6]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	f107 030e 	add.w	r3, r7, #14
 8005b18:	6814      	ldr	r4, [r2, #0]
 8005b1a:	6850      	ldr	r0, [r2, #4]
 8005b1c:	6891      	ldr	r1, [r2, #8]
 8005b1e:	68d2      	ldr	r2, [r2, #12]
 8005b20:	601c      	str	r4, [r3, #0]
 8005b22:	6058      	str	r0, [r3, #4]
 8005b24:	6099      	str	r1, [r3, #8]
 8005b26:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8005b28:	797b      	ldrb	r3, [r7, #5]
 8005b2a:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8005b2c:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8005b30:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8005b32:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005b36:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8005b3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b3c:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8005b40:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8005b44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b4c:	2218      	movs	r2, #24
 8005b4e:	2100      	movs	r1, #0
 8005b50:	4618      	mov	r0, r3
 8005b52:	f003 f99e 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005b56:	233f      	movs	r3, #63	@ 0x3f
 8005b58:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8005b5a:	2386      	movs	r3, #134	@ 0x86
 8005b5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8005b5e:	f107 030c 	add.w	r3, r7, #12
 8005b62:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8005b64:	231a      	movs	r3, #26
 8005b66:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8005b68:	f107 030b 	add.w	r3, r7, #11
 8005b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8005b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b76:	2100      	movs	r1, #0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fcdb 	bl	8006534 <hci_send_req>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da01      	bge.n	8005b88 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8005b84:	23ff      	movs	r3, #255	@ 0xff
 8005b86:	e005      	b.n	8005b94 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8005b88:	7afb      	ldrb	r3, [r7, #11]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	e000      	b.n	8005b94 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3744      	adds	r7, #68	@ 0x44
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd90      	pop	{r4, r7, pc}

08005b9c <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b092      	sub	sp, #72	@ 0x48
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	6039      	str	r1, [r7, #0]
 8005ba6:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	2b1f      	cmp	r3, #31
 8005bb2:	d901      	bls.n	8005bb8 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8005bb4:	2342      	movs	r3, #66	@ 0x42
 8005bb6:	e03e      	b.n	8005c36 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8005bb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005bbc:	3348      	adds	r3, #72	@ 0x48
 8005bbe:	443b      	add	r3, r7
 8005bc0:	79fa      	ldrb	r2, [r7, #7]
 8005bc2:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8005bc6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8005bd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005bd4:	f107 0208 	add.w	r2, r7, #8
 8005bd8:	4413      	add	r3, r2
 8005bda:	79fa      	ldrb	r2, [r7, #7]
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f003 f9d7 	bl	8008f92 <memcpy>
  indx +=  AdvLen;
 8005be4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	4413      	add	r3, r2
 8005bec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005bf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005bf4:	2218      	movs	r2, #24
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f003 f94a 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005bfe:	233f      	movs	r3, #63	@ 0x3f
 8005c00:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8005c02:	238e      	movs	r3, #142	@ 0x8e
 8005c04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8005c0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8005c12:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8005c1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fc86 	bl	8006534 <hci_send_req>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	da01      	bge.n	8005c32 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8005c2e:	23ff      	movs	r3, #255	@ 0xff
 8005c30:	e001      	b.n	8005c36 <aci_gap_update_adv_data+0x9a>
    
  return status;
 8005c32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3748      	adds	r7, #72	@ 0x48
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b088      	sub	sp, #32
 8005c42:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c44:	f107 0308 	add.w	r3, r7, #8
 8005c48:	2218      	movs	r2, #24
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f003 f920 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005c52:	233f      	movs	r3, #63	@ 0x3f
 8005c54:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8005c56:	f240 1301 	movw	r3, #257	@ 0x101
 8005c5a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005c5c:	1dfb      	adds	r3, r7, #7
 8005c5e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005c60:	2301      	movs	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8005c64:	f107 0308 	add.w	r3, r7, #8
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fc62 	bl	8006534 <hci_send_req>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	da01      	bge.n	8005c7a <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8005c76:	23ff      	movs	r3, #255	@ 0xff
 8005c78:	e000      	b.n	8005c7c <aci_gatt_init+0x3e>

  return status;
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b090      	sub	sp, #64	@ 0x40
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6039      	str	r1, [r7, #0]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4603      	mov	r3, r0
 8005c92:	71fb      	strb	r3, [r7, #7]
 8005c94:	460b      	mov	r3, r1
 8005c96:	71bb      	strb	r3, [r7, #6]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8005ca2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005ca6:	3340      	adds	r3, #64	@ 0x40
 8005ca8:	443b      	add	r3, r7
 8005caa:	79fa      	ldrb	r2, [r7, #7]
 8005cac:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005cb0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d103      	bne.n	8005cc8 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005cc6:	e002      	b.n	8005cce <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8005cce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005cd2:	f107 020c 	add.w	r2, r7, #12
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f003 f957 	bl	8008f92 <memcpy>
  indx +=  uuid_len;
 8005ce4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8005ce8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005cec:	4413      	add	r3, r2
 8005cee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8005cf2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005cf6:	3340      	adds	r3, #64	@ 0x40
 8005cf8:	443b      	add	r3, r7
 8005cfa:	79ba      	ldrb	r2, [r7, #6]
 8005cfc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005d00:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005d04:	3301      	adds	r3, #1
 8005d06:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8005d0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005d0e:	3340      	adds	r3, #64	@ 0x40
 8005d10:	443b      	add	r3, r7
 8005d12:	797a      	ldrb	r2, [r7, #5]
 8005d14:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8005d18:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005d22:	f107 0320 	add.w	r3, r7, #32
 8005d26:	2203      	movs	r2, #3
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f003 f8b1 	bl	8008e92 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d34:	2218      	movs	r2, #24
 8005d36:	2100      	movs	r1, #0
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f003 f8aa 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005d3e:	233f      	movs	r3, #63	@ 0x3f
 8005d40:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8005d42:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005d46:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8005d48:	f107 030c 	add.w	r3, r7, #12
 8005d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8005d4e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005d52:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8005d54:	f107 0320 	add.w	r3, r7, #32
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8005d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fbe5 	bl	8006534 <hci_send_req>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	da01      	bge.n	8005d74 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8005d70:	23ff      	movs	r3, #255	@ 0xff
 8005d72:	e00c      	b.n	8005d8e <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8005d74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8005d7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d80:	e005      	b.n	8005d8e <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8005d82:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d8a:	801a      	strh	r2, [r3, #0]

  return 0;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3740      	adds	r7, #64	@ 0x40
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b092      	sub	sp, #72	@ 0x48
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	603a      	str	r2, [r7, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4603      	mov	r3, r0
 8005da2:	80fb      	strh	r3, [r7, #6]
 8005da4:	460b      	mov	r3, r1
 8005da6:	717b      	strb	r3, [r7, #5]
 8005da8:	4613      	mov	r3, r2
 8005daa:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8005db6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005dba:	f107 020c 	add.w	r2, r7, #12
 8005dbe:	4413      	add	r3, r2
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005dc4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005dc8:	3302      	adds	r3, #2
 8005dca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8005dce:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005dd2:	3348      	adds	r3, #72	@ 0x48
 8005dd4:	443b      	add	r3, r7
 8005dd6:	797a      	ldrb	r2, [r7, #5]
 8005dd8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005ddc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005de0:	3301      	adds	r3, #1
 8005de2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8005de6:	797b      	ldrb	r3, [r7, #5]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d103      	bne.n	8005df4 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005df2:	e002      	b.n	8005dfa <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8005dfa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005dfe:	f107 020c 	add.w	r2, r7, #12
 8005e02:	4413      	add	r3, r2
 8005e04:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f003 f8c1 	bl	8008f92 <memcpy>
  indx +=  uuid_len;
 8005e10:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005e14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e18:	4413      	add	r3, r2
 8005e1a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8005e1e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e22:	3348      	adds	r3, #72	@ 0x48
 8005e24:	443b      	add	r3, r7
 8005e26:	793a      	ldrb	r2, [r7, #4]
 8005e28:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e2c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e30:	3301      	adds	r3, #1
 8005e32:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8005e36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e3a:	3348      	adds	r3, #72	@ 0x48
 8005e3c:	443b      	add	r3, r7
 8005e3e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8005e42:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e46:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8005e50:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e54:	3348      	adds	r3, #72	@ 0x48
 8005e56:	443b      	add	r3, r7
 8005e58:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8005e5c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e60:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e64:	3301      	adds	r3, #1
 8005e66:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8005e6a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e6e:	3348      	adds	r3, #72	@ 0x48
 8005e70:	443b      	add	r3, r7
 8005e72:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8005e76:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e7a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8005e84:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e88:	3348      	adds	r3, #72	@ 0x48
 8005e8a:	443b      	add	r3, r7
 8005e8c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8005e90:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005e94:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8005e9e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005ea2:	3348      	adds	r3, #72	@ 0x48
 8005ea4:	443b      	add	r3, r7
 8005ea6:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8005eaa:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8005eae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005eb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f002 ffe6 	bl	8008e92 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ec6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005eca:	2218      	movs	r2, #24
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f002 ffdf 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005ed4:	233f      	movs	r3, #63	@ 0x3f
 8005ed6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8005ed8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005edc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8005ee4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8005eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8005ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fb1a 	bl	8006534 <hci_send_req>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	da01      	bge.n	8005f0a <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8005f06:	23ff      	movs	r3, #255	@ 0xff
 8005f08:	e00c      	b.n	8005f24 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8005f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <aci_gatt_add_char+0x182>
    return resp.status;
 8005f12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f16:	e005      	b.n	8005f24 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8005f18:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f20:	801a      	strh	r2, [r3, #0]

  return 0;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3748      	adds	r7, #72	@ 0x48
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8005f2c:	b590      	push	{r4, r7, lr}
 8005f2e:	b0ab      	sub	sp, #172	@ 0xac
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	80fb      	strh	r3, [r7, #6]
 8005f3e:	4603      	mov	r3, r0
 8005f40:	80bb      	strh	r3, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
 8005f46:	4613      	mov	r3, r2
 8005f48:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8005f50:	78bb      	ldrb	r3, [r7, #2]
 8005f52:	2b7a      	cmp	r3, #122	@ 0x7a
 8005f54:	d901      	bls.n	8005f5a <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8005f56:	2342      	movs	r3, #66	@ 0x42
 8005f58:	e074      	b.n	8006044 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8005f5e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f62:	f107 0208 	add.w	r2, r7, #8
 8005f66:	4413      	add	r3, r2
 8005f68:	88fa      	ldrh	r2, [r7, #6]
 8005f6a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005f6c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f70:	3302      	adds	r3, #2
 8005f72:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8005f76:	88bb      	ldrh	r3, [r7, #4]
 8005f78:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8005f7a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f7e:	f107 0208 	add.w	r2, r7, #8
 8005f82:	4413      	add	r3, r2
 8005f84:	88ba      	ldrh	r2, [r7, #4]
 8005f86:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8005f88:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8005f92:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005f96:	33a8      	adds	r3, #168	@ 0xa8
 8005f98:	443b      	add	r3, r7
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005fa0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8005faa:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005fae:	33a8      	adds	r3, #168	@ 0xa8
 8005fb0:	443b      	add	r3, r7
 8005fb2:	78ba      	ldrb	r2, [r7, #2]
 8005fb4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8005fb8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8005fc2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005fc6:	f107 0208 	add.w	r2, r7, #8
 8005fca:	4413      	add	r3, r2
 8005fcc:	78ba      	ldrb	r2, [r7, #2]
 8005fce:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 ffdd 	bl	8008f92 <memcpy>
  indx +=  charValueLen;
 8005fd8:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8005fdc:	78bb      	ldrb	r3, [r7, #2]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005fe4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8005fe8:	2218      	movs	r2, #24
 8005fea:	2100      	movs	r1, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f002 ff50 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8005ff2:	233f      	movs	r3, #63	@ 0x3f
 8005ff4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8005ff8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005ffc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8006000:	f107 0308 	add.w	r3, r7, #8
 8006004:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8006008:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800600c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8006010:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8006014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8006018:	2301      	movs	r3, #1
 800601a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800601e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8006022:	2100      	movs	r1, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f000 fa85 	bl	8006534 <hci_send_req>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	da01      	bge.n	8006034 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8006030:	23ff      	movs	r3, #255	@ 0xff
 8006032:	e007      	b.n	8006044 <aci_gatt_update_char_value+0x118>

  if (status) {
 8006034:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <aci_gatt_update_char_value+0x116>
    return status;
 800603c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8006040:	e000      	b.n	8006044 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	37ac      	adds	r7, #172	@ 0xac
 8006048:	46bd      	mov	sp, r7
 800604a:	bd90      	pop	{r4, r7, pc}

0800604c <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b0ac      	sub	sp, #176	@ 0xb0
 8006050:	af00      	add	r7, sp, #0
 8006052:	60ba      	str	r2, [r7, #8]
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	4603      	mov	r3, r0
 8006058:	73fb      	strb	r3, [r7, #15]
 800605a:	460b      	mov	r3, r1
 800605c:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006064:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8006068:	2218      	movs	r2, #24
 800606a:	2100      	movs	r1, #0
 800606c:	4618      	mov	r0, r3
 800606e:	f002 ff10 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006072:	233f      	movs	r3, #63	@ 0x3f
 8006074:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8006078:	230d      	movs	r3, #13
 800607a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 800607e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8006082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8006086:	2301      	movs	r3, #1
 8006088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8006094:	2380      	movs	r3, #128	@ 0x80
 8006096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800609a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fa47 	bl	8006534 <hci_send_req>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da01      	bge.n	80060b0 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 80060ac:	23ff      	movs	r3, #255	@ 0xff
 80060ae:	e01e      	b.n	80060ee <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 80060b0:	7d3b      	ldrb	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <aci_hal_read_config_data+0x6e>
    return rp.status;
 80060b6:	7d3b      	ldrb	r3, [r7, #20]
 80060b8:	e019      	b.n	80060ee <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 80060ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	89bb      	ldrh	r3, [r7, #12]
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d201      	bcs.n	80060d8 <aci_hal_read_config_data+0x8c>
 80060d4:	89ba      	ldrh	r2, [r7, #12]
 80060d6:	e002      	b.n	80060de <aci_hal_read_config_data+0x92>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	3301      	adds	r3, #1
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f002 ff53 	bl	8008f92 <memcpy>
  
  return 0;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	37b0      	adds	r7, #176	@ 0xb0
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b08a      	sub	sp, #40	@ 0x28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	4603      	mov	r3, r0
 80060fe:	460a      	mov	r2, r1
 8006100:	71fb      	strb	r3, [r7, #7]
 8006102:	4613      	mov	r3, r2
 8006104:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 800610a:	79bb      	ldrb	r3, [r7, #6]
 800610c:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800610e:	f107 0310 	add.w	r3, r7, #16
 8006112:	2218      	movs	r2, #24
 8006114:	2100      	movs	r1, #0
 8006116:	4618      	mov	r0, r3
 8006118:	f002 febb 	bl	8008e92 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800611c:	233f      	movs	r3, #63	@ 0x3f
 800611e:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8006120:	230f      	movs	r3, #15
 8006122:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800612a:	2302      	movs	r3, #2
 800612c:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 800612e:	f107 030b 	add.w	r3, r7, #11
 8006132:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8006134:	2301      	movs	r3, #1
 8006136:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8006138:	f107 0310 	add.w	r3, r7, #16
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f9f8 	bl	8006534 <hci_send_req>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	da01      	bge.n	800614e <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 800614a:	23ff      	movs	r3, #255	@ 0xff
 800614c:	e000      	b.n	8006150 <aci_hal_set_tx_power_level+0x5a>

  return status;
 800614e:	7afb      	ldrb	r3, [r7, #11]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	@ 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b089      	sub	sp, #36	@ 0x24
 800615c:	af02      	add	r7, sp, #8
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8006162:	f107 0410 	add.w	r4, r7, #16
 8006166:	f107 0215 	add.w	r2, r7, #21
 800616a:	f107 0112 	add.w	r1, r7, #18
 800616e:	f107 0016 	add.w	r0, r7, #22
 8006172:	f107 030e 	add.w	r3, r7, #14
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	4623      	mov	r3, r4
 800617a:	f000 f853 	bl	8006224 <hci_le_read_local_version>
 800617e:	4603      	mov	r3, r0
 8006180:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d126      	bne.n	80061d6 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8006188:	8a7b      	ldrh	r3, [r7, #18]
 800618a:	0a1b      	lsrs	r3, r3, #8
 800618c:	b29b      	uxth	r3, r3
 800618e:	b2da      	uxtb	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8006194:	8a7b      	ldrh	r3, [r7, #18]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	b29a      	uxth	r2, r3
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b21a      	sxth	r2, r3
 80061a4:	89fb      	ldrh	r3, [r7, #14]
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	b21b      	sxth	r3, r3
 80061b2:	4313      	orrs	r3, r2
 80061b4:	b21b      	sxth	r3, r3
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b21a      	sxth	r2, r3
 80061c2:	89fb      	ldrh	r3, [r7, #14]
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	b21b      	sxth	r3, r3
 80061cc:	4313      	orrs	r3, r2
 80061ce:	b21b      	sxth	r3, r3
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	801a      	strh	r2, [r3, #0]
  }
  return status;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd90      	pop	{r4, r7, pc}

080061e0 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80061e6:	f107 0308 	add.w	r3, r7, #8
 80061ea:	2218      	movs	r2, #24
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 fe4f 	bl	8008e92 <memset>
  rq.ogf = OGF_HOST_CTL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80061f8:	2303      	movs	r3, #3
 80061fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80061fc:	1dfb      	adds	r3, r7, #7
 80061fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006200:	2301      	movs	r3, #1
 8006202:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006204:	f107 0308 	add.w	r3, r7, #8
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f992 	bl	8006534 <hci_send_req>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	da01      	bge.n	800621a <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8006216:	23ff      	movs	r3, #255	@ 0xff
 8006218:	e000      	b.n	800621c <hci_reset+0x3c>
  
  return status;  
 800621a:	79fb      	ldrb	r3, [r7, #7]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08e      	sub	sp, #56	@ 0x38
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	2209      	movs	r2, #9
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f002 fe29 	bl	8008e92 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006240:	f107 0320 	add.w	r3, r7, #32
 8006244:	2218      	movs	r2, #24
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f002 fe22 	bl	8008e92 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800624e:	2304      	movs	r3, #4
 8006250:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8006252:	2301      	movs	r3, #1
 8006254:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 800625a:	2300      	movs	r3, #0
 800625c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 800625e:	f107 0314 	add.w	r3, r7, #20
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8006264:	2309      	movs	r3, #9
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006268:	f107 0320 	add.w	r3, r7, #32
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f960 	bl	8006534 <hci_send_req>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	da01      	bge.n	800627e <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 800627a:	23ff      	movs	r3, #255	@ 0xff
 800627c:	e018      	b.n	80062b0 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 800627e:	7d3b      	ldrb	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <hci_le_read_local_version+0x64>
    return resp.status;
 8006284:	7d3b      	ldrb	r3, [r7, #20]
 8006286:	e013      	b.n	80062b0 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8006288:	7d7a      	ldrb	r2, [r7, #21]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 800628e:	8afa      	ldrh	r2, [r7, #22]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8006294:	7e3a      	ldrb	r2, [r7, #24]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800629a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80062a4:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ac:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3738      	adds	r7, #56	@ 0x38
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b092      	sub	sp, #72	@ 0x48
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	6039      	str	r1, [r7, #0]
 80062c2:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80062c4:	f107 0310 	add.w	r3, r7, #16
 80062c8:	2220      	movs	r2, #32
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f002 fde0 	bl	8008e92 <memset>
  scan_resp_cp.length = length;
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	2b1f      	cmp	r3, #31
 80062da:	bf28      	it	cs
 80062dc:	231f      	movcs	r3, #31
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	f107 0310 	add.w	r3, r7, #16
 80062e6:	3301      	adds	r3, #1
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f002 fe51 	bl	8008f92 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80062f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80062f4:	2218      	movs	r2, #24
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f002 fdca 	bl	8008e92 <memset>
  rq.ogf = OGF_LE_CTL;
 80062fe:	2308      	movs	r3, #8
 8006300:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8006302:	2309      	movs	r3, #9
 8006304:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8006306:	f107 0310 	add.w	r3, r7, #16
 800630a:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800630c:	2320      	movs	r3, #32
 800630e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8006310:	f107 030f 	add.w	r3, r7, #15
 8006314:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8006316:	2301      	movs	r3, #1
 8006318:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800631a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f907 	bl	8006534 <hci_send_req>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	da01      	bge.n	8006330 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 800632c:	23ff      	movs	r3, #255	@ 0xff
 800632e:	e000      	b.n	8006332 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3748      	adds	r7, #72	@ 0x48
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3308      	adds	r3, #8
 8006346:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b04      	cmp	r3, #4
 800634e:	d001      	beq.n	8006354 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8006350:	2301      	movs	r3, #1
 8006352:	e00c      	b.n	800636e <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3302      	adds	r3, #2
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006362:	3b03      	subs	r3, #3
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8006368:	2302      	movs	r3, #2
 800636a:	e000      	b.n	800636e <verify_packet+0x34>
  
  return 0;      
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b0a6      	sub	sp, #152	@ 0x98
 8006380:	af00      	add	r7, sp, #0
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	4603      	mov	r3, r0
 8006386:	81fb      	strh	r3, [r7, #14]
 8006388:	460b      	mov	r3, r1
 800638a:	81bb      	strh	r3, [r7, #12]
 800638c:	4613      	mov	r3, r2
 800638e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8006390:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006398:	b21a      	sxth	r2, r3
 800639a:	89fb      	ldrh	r3, [r7, #14]
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	b21b      	sxth	r3, r3
 80063a0:	4313      	orrs	r3, r2
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 80063ac:	2301      	movs	r3, #1
 80063ae:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80063b0:	f107 0318 	add.w	r3, r7, #24
 80063b4:	3301      	adds	r3, #1
 80063b6:	461a      	mov	r2, r3
 80063b8:	f107 0314 	add.w	r3, r7, #20
 80063bc:	8819      	ldrh	r1, [r3, #0]
 80063be:	789b      	ldrb	r3, [r3, #2]
 80063c0:	8011      	strh	r1, [r2, #0]
 80063c2:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80063c4:	f107 0318 	add.w	r3, r7, #24
 80063c8:	3304      	adds	r3, #4
 80063ca:	7afa      	ldrb	r2, [r7, #11]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f002 fddf 	bl	8008f92 <memcpy>
  
  if (hciContext.io.Send)
 80063d4:	4b08      	ldr	r3, [pc, #32]	@ (80063f8 <send_cmd+0x7c>)
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80063dc:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <send_cmd+0x7c>)
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	7afa      	ldrb	r2, [r7, #11]
 80063e2:	b292      	uxth	r2, r2
 80063e4:	3204      	adds	r2, #4
 80063e6:	b291      	uxth	r1, r2
 80063e8:	f107 0218 	add.w	r2, r7, #24
 80063ec:	4610      	mov	r0, r2
 80063ee:	4798      	blx	r3
  }
}
 80063f0:	bf00      	nop
 80063f2:	3798      	adds	r7, #152	@ 0x98
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000560 	.word	0x20000560

080063fc <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8006406:	e00a      	b.n	800641e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8006408:	f107 030c 	add.w	r3, r7, #12
 800640c:	4619      	mov	r1, r3
 800640e:	6838      	ldr	r0, [r7, #0]
 8006410:	f000 fae8 	bl	80069e4 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fa4f 	bl	80068bc <list_insert_head>
  while (!list_is_empty(src_list))
 800641e:	6838      	ldr	r0, [r7, #0]
 8006420:	f000 fa2a 	bl	8006878 <list_is_empty>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0ee      	beq.n	8006408 <move_list+0xc>
  }
}
 800642a:	bf00      	nop
 800642c:	bf00      	nop
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800643a:	e009      	b.n	8006450 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4809      	ldr	r0, [pc, #36]	@ (8006468 <free_event_list+0x34>)
 8006442:	f000 faa8 	bl	8006996 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4619      	mov	r1, r3
 800644a:	4808      	ldr	r0, [pc, #32]	@ (800646c <free_event_list+0x38>)
 800644c:	f000 fa5c 	bl	8006908 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006450:	4806      	ldr	r0, [pc, #24]	@ (800646c <free_event_list+0x38>)
 8006452:	f000 faee 	bl	8006a32 <list_get_size>
 8006456:	4603      	mov	r3, r0
 8006458:	2b01      	cmp	r3, #1
 800645a:	ddef      	ble.n	800643c <free_event_list+0x8>
  }
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	2000029c 	.word	0x2000029c
 800646c:	20000294 	.word	0x20000294

08006470 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8006480:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <hci_init+0x74>)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8006486:	4818      	ldr	r0, [pc, #96]	@ (80064e8 <hci_init+0x78>)
 8006488:	f000 f9e6 	bl	8006858 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800648c:	4817      	ldr	r0, [pc, #92]	@ (80064ec <hci_init+0x7c>)
 800648e:	f000 f9e3 	bl	8006858 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8006492:	f000 fee5 	bl	8007260 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]
 800649a:	e00c      	b.n	80064b6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	228c      	movs	r2, #140	@ 0x8c
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	4a12      	ldr	r2, [pc, #72]	@ (80064f0 <hci_init+0x80>)
 80064a6:	4413      	add	r3, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	480f      	ldr	r0, [pc, #60]	@ (80064e8 <hci_init+0x78>)
 80064ac:	f000 fa2c 	bl	8006908 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	3301      	adds	r3, #1
 80064b4:	73fb      	strb	r3, [r7, #15]
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d9ef      	bls.n	800649c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 80064bc:	4b09      	ldr	r3, [pc, #36]	@ (80064e4 <hci_init+0x74>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <hci_init+0x5c>
 80064c4:	4b07      	ldr	r3, [pc, #28]	@ (80064e4 <hci_init+0x74>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2000      	movs	r0, #0
 80064ca:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 80064cc:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <hci_init+0x74>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <hci_init+0x6a>
 80064d4:	4b03      	ldr	r3, [pc, #12]	@ (80064e4 <hci_init+0x74>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4798      	blx	r3
}
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000560 	.word	0x20000560
 80064e8:	20000294 	.word	0x20000294
 80064ec:	2000029c 	.word	0x2000029c
 80064f0:	200002a4 	.word	0x200002a4

080064f4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0b      	ldr	r2, [pc, #44]	@ (8006530 <hci_register_io_bus+0x3c>)
 8006502:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a09      	ldr	r2, [pc, #36]	@ (8006530 <hci_register_io_bus+0x3c>)
 800650a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	4a07      	ldr	r2, [pc, #28]	@ (8006530 <hci_register_io_bus+0x3c>)
 8006512:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	4a05      	ldr	r2, [pc, #20]	@ (8006530 <hci_register_io_bus+0x3c>)
 800651a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	4a03      	ldr	r2, [pc, #12]	@ (8006530 <hci_register_io_bus+0x3c>)
 8006522:	6093      	str	r3, [r2, #8]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	20000560 	.word	0x20000560

08006534 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08e      	sub	sp, #56	@ 0x38
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	885b      	ldrh	r3, [r3, #2]
 8006544:	b21b      	sxth	r3, r3
 8006546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800654a:	b21a      	sxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	029b      	lsls	r3, r3, #10
 8006552:	b21b      	sxth	r3, r3
 8006554:	4313      	orrs	r3, r2
 8006556:	b21b      	sxth	r3, r3
 8006558:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800655a:	2300      	movs	r3, #0
 800655c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f978 	bl	8006858 <list_init_head>

  free_event_list();
 8006568:	f7ff ff64 	bl	8006434 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8818      	ldrh	r0, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	8859      	ldrh	r1, [r3, #2]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f7ff fefd 	bl	800637c <send_cmd>
  
  if (async)
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <hci_send_req+0x58>
  {
    return 0;
 8006588:	2300      	movs	r3, #0
 800658a:	e0e2      	b.n	8006752 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800658c:	f7fa fd2a 	bl	8000fe4 <HAL_GetTick>
 8006590:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006592:	f7fa fd27 	bl	8000fe4 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065a0:	f200 80b3 	bhi.w	800670a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80065a4:	486d      	ldr	r0, [pc, #436]	@ (800675c <hci_send_req+0x228>)
 80065a6:	f000 f967 	bl	8006878 <list_is_empty>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d000      	beq.n	80065b2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 80065b0:	e7ef      	b.n	8006592 <hci_send_req+0x5e>
      {
        break;
 80065b2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 80065b4:	f107 0310 	add.w	r3, r7, #16
 80065b8:	4619      	mov	r1, r3
 80065ba:	4868      	ldr	r0, [pc, #416]	@ (800675c <hci_send_req+0x228>)
 80065bc:	f000 f9eb 	bl	8006996 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	3308      	adds	r3, #8
 80065c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 80065c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d17f      	bne.n	80066ce <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 80065ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d0:	3301      	adds	r3, #1
 80065d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	3308      	adds	r3, #8
 80065d8:	3303      	adds	r3, #3
 80065da:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80065e2:	3b03      	subs	r3, #3
 80065e4:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80065ec:	d04c      	beq.n	8006688 <hci_send_req+0x154>
 80065ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80065f0:	dc68      	bgt.n	80066c4 <hci_send_req+0x190>
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	f000 808b 	beq.w	800670e <hci_send_req+0x1da>
 80065f8:	2b10      	cmp	r3, #16
 80065fa:	dc63      	bgt.n	80066c4 <hci_send_req+0x190>
 80065fc:	2b0e      	cmp	r3, #14
 80065fe:	d023      	beq.n	8006648 <hci_send_req+0x114>
 8006600:	2b0f      	cmp	r3, #15
 8006602:	d15f      	bne.n	80066c4 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	885b      	ldrh	r3, [r3, #2]
 800660c:	b29b      	uxth	r3, r3
 800660e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006610:	429a      	cmp	r2, r3
 8006612:	d17e      	bne.n	8006712 <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d004      	beq.n	8006626 <hci_send_req+0xf2>
          if (cs->status) {
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d051      	beq.n	80066c8 <hci_send_req+0x194>
            goto failed;
 8006624:	e078      	b.n	8006718 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	429a      	cmp	r2, r3
 800662e:	bf28      	it	cs
 8006630:	461a      	movcs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6918      	ldr	r0, [r3, #16]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	461a      	mov	r2, r3
 8006640:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006642:	f002 fca6 	bl	8008f92 <memcpy>
        goto done;
 8006646:	e078      	b.n	800673a <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006652:	b29b      	uxth	r3, r3
 8006654:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006656:	429a      	cmp	r2, r3
 8006658:	d15d      	bne.n	8006716 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	3303      	adds	r3, #3
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	3b03      	subs	r3, #3
 8006664:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	429a      	cmp	r2, r3
 800666e:	bf28      	it	cs
 8006670:	461a      	movcs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6918      	ldr	r0, [r3, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	461a      	mov	r2, r3
 8006680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006682:	f002 fc86 	bl	8008f92 <memcpy>
        goto done;
 8006686:	e058      	b.n	800673a <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d118      	bne.n	80066cc <hci_send_req+0x198>
          break;
      
        len -= 1;
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	3b01      	subs	r3, #1
 800669e:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	bf28      	it	cs
 80066aa:	461a      	movcs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6918      	ldr	r0, [r3, #16]
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	1c59      	adds	r1, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	461a      	mov	r2, r3
 80066be:	f002 fc68 	bl	8008f92 <memcpy>
        goto done;
 80066c2:	e03a      	b.n	800673a <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 80066c4:	bf00      	nop
 80066c6:	e002      	b.n	80066ce <hci_send_req+0x19a>
          break;
 80066c8:	bf00      	nop
 80066ca:	e000      	b.n	80066ce <hci_send_req+0x19a>
          break;
 80066cc:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80066ce:	4824      	ldr	r0, [pc, #144]	@ (8006760 <hci_send_req+0x22c>)
 80066d0:	f000 f8d2 	bl	8006878 <list_is_empty>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00d      	beq.n	80066f6 <hci_send_req+0x1c2>
 80066da:	4820      	ldr	r0, [pc, #128]	@ (800675c <hci_send_req+0x228>)
 80066dc:	f000 f8cc 	bl	8006878 <list_is_empty>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4619      	mov	r1, r3
 80066ea:	481d      	ldr	r0, [pc, #116]	@ (8006760 <hci_send_req+0x22c>)
 80066ec:	f000 f90c 	bl	8006908 <list_insert_tail>
      hciReadPacket=NULL;
 80066f0:	2300      	movs	r3, #0
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	e008      	b.n	8006708 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	f107 0308 	add.w	r3, r7, #8
 80066fc:	4611      	mov	r1, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 f902 	bl	8006908 <list_insert_tail>
      hciReadPacket=NULL;
 8006704:	2300      	movs	r3, #0
 8006706:	613b      	str	r3, [r7, #16]
  {
 8006708:	e740      	b.n	800658c <hci_send_req+0x58>
        goto failed;
 800670a:	bf00      	nop
 800670c:	e004      	b.n	8006718 <hci_send_req+0x1e4>
        goto failed;
 800670e:	bf00      	nop
 8006710:	e002      	b.n	8006718 <hci_send_req+0x1e4>
          goto failed;
 8006712:	bf00      	nop
 8006714:	e000      	b.n	8006718 <hci_send_req+0x1e4>
          goto failed;
 8006716:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4619      	mov	r1, r3
 8006722:	480f      	ldr	r0, [pc, #60]	@ (8006760 <hci_send_req+0x22c>)
 8006724:	f000 f8ca 	bl	80068bc <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006728:	f107 0308 	add.w	r3, r7, #8
 800672c:	4619      	mov	r1, r3
 800672e:	480b      	ldr	r0, [pc, #44]	@ (800675c <hci_send_req+0x228>)
 8006730:	f7ff fe64 	bl	80063fc <move_list>

  return -1;
 8006734:	f04f 33ff 	mov.w	r3, #4294967295
 8006738:	e00b      	b.n	8006752 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4619      	mov	r1, r3
 800673e:	4808      	ldr	r0, [pc, #32]	@ (8006760 <hci_send_req+0x22c>)
 8006740:	f000 f8bc 	bl	80068bc <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	4619      	mov	r1, r3
 800674a:	4804      	ldr	r0, [pc, #16]	@ (800675c <hci_send_req+0x228>)
 800674c:	f7ff fe56 	bl	80063fc <move_list>

  return 0;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3738      	adds	r7, #56	@ 0x38
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	2000029c 	.word	0x2000029c
 8006760:	20000294 	.word	0x20000294

08006764 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800676e:	e013      	b.n	8006798 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	4619      	mov	r1, r3
 8006774:	480e      	ldr	r0, [pc, #56]	@ (80067b0 <hci_user_evt_proc+0x4c>)
 8006776:	f000 f90e 	bl	8006996 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800677a:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <hci_user_evt_proc+0x50>)
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8006782:	4b0c      	ldr	r3, [pc, #48]	@ (80067b4 <hci_user_evt_proc+0x50>)
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	3208      	adds	r2, #8
 800678a:	4610      	mov	r0, r2
 800678c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4619      	mov	r1, r3
 8006792:	4809      	ldr	r0, [pc, #36]	@ (80067b8 <hci_user_evt_proc+0x54>)
 8006794:	f000 f8b8 	bl	8006908 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8006798:	4805      	ldr	r0, [pc, #20]	@ (80067b0 <hci_user_evt_proc+0x4c>)
 800679a:	f000 f86d 	bl	8006878 <list_is_empty>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0e5      	beq.n	8006770 <hci_user_evt_proc+0xc>
  }
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	2000029c 	.word	0x2000029c
 80067b4:	20000560 	.word	0x20000560
 80067b8:	20000294 	.word	0x20000294

080067bc <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80067cc:	481f      	ldr	r0, [pc, #124]	@ (800684c <hci_notify_asynch_evt+0x90>)
 80067ce:	f000 f853 	bl	8006878 <list_is_empty>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d132      	bne.n	800683e <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80067d8:	f107 030c 	add.w	r3, r7, #12
 80067dc:	4619      	mov	r1, r3
 80067de:	481b      	ldr	r0, [pc, #108]	@ (800684c <hci_notify_asynch_evt+0x90>)
 80067e0:	f000 f8d9 	bl	8006996 <list_remove_head>
    
    if (hciContext.io.Receive)
 80067e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006850 <hci_notify_asynch_evt+0x94>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d02a      	beq.n	8006842 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80067ec:	4b18      	ldr	r3, [pc, #96]	@ (8006850 <hci_notify_asynch_evt+0x94>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	3208      	adds	r2, #8
 80067f4:	2180      	movs	r1, #128	@ 0x80
 80067f6:	4610      	mov	r0, r2
 80067f8:	4798      	blx	r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80067fe:	7cfb      	ldrb	r3, [r7, #19]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d016      	beq.n	8006832 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	7cfa      	ldrb	r2, [r7, #19]
 8006808:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff fd93 	bl	800633a <verify_packet>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4619      	mov	r1, r3
 800681e:	480d      	ldr	r0, [pc, #52]	@ (8006854 <hci_notify_asynch_evt+0x98>)
 8006820:	f000 f872 	bl	8006908 <list_insert_tail>
 8006824:	e00d      	b.n	8006842 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4619      	mov	r1, r3
 800682a:	4808      	ldr	r0, [pc, #32]	@ (800684c <hci_notify_asynch_evt+0x90>)
 800682c:	f000 f846 	bl	80068bc <list_insert_head>
 8006830:	e007      	b.n	8006842 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4619      	mov	r1, r3
 8006836:	4805      	ldr	r0, [pc, #20]	@ (800684c <hci_notify_asynch_evt+0x90>)
 8006838:	f000 f840 	bl	80068bc <list_insert_head>
 800683c:	e001      	b.n	8006842 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800683e:	2301      	movs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8006842:	697b      	ldr	r3, [r7, #20]

}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000294 	.word	0x20000294
 8006850:	20000560 	.word	0x20000560
 8006854:	2000029c 	.word	0x2000029c

08006858 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	605a      	str	r2, [r3, #4]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006880:	f3ef 8310 	mrs	r3, PRIMASK
 8006884:	60fb      	str	r3, [r7, #12]
  return(result);
 8006886:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800688a:	b672      	cpsid	i
}
 800688c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d102      	bne.n	800689e <list_is_empty+0x26>
  {
    return_value = 1;
 8006898:	2301      	movs	r3, #1
 800689a:	75fb      	strb	r3, [r7, #23]
 800689c:	e001      	b.n	80068a2 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f383 8810 	msr	PRIMASK, r3
}
 80068ac:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c6:	f3ef 8310 	mrs	r3, PRIMASK
 80068ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80068cc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80068ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80068d0:	b672      	cpsid	i
}
 80068d2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	605a      	str	r2, [r3, #4]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f383 8810 	msr	PRIMASK, r3
}
 80068fa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80068fc:	bf00      	nop
 80068fe:	371c      	adds	r7, #28
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006912:	f3ef 8310 	mrs	r3, PRIMASK
 8006916:	60fb      	str	r3, [r7, #12]
  return(result);
 8006918:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800691a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800691c:	b672      	cpsid	i
}
 800691e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f383 8810 	msr	PRIMASK, r3
}
 8006946:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006948:	bf00      	nop
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800695c:	f3ef 8310 	mrs	r3, PRIMASK
 8006960:	60fb      	str	r3, [r7, #12]
  return(result);
 8006962:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006966:	b672      	cpsid	i
}
 8006968:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6852      	ldr	r2, [r2, #4]
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f383 8810 	msr	PRIMASK, r3
}
 8006988:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8310 	mrs	r3, PRIMASK
 80069a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80069a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80069a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80069aa:	b672      	cpsid	i
}
 80069ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff ffca 	bl	8006954 <list_remove_node>
  (*node)->next = NULL;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2200      	movs	r2, #0
 80069ce:	605a      	str	r2, [r3, #4]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f383 8810 	msr	PRIMASK, r3
}
 80069da:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80069dc:	bf00      	nop
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ee:	f3ef 8310 	mrs	r3, PRIMASK
 80069f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80069f4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80069f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80069f8:	b672      	cpsid	i
}
 80069fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff ffa3 	bl	8006954 <list_remove_node>
  (*node)->next = NULL;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	605a      	str	r2, [r3, #4]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f383 8810 	msr	PRIMASK, r3
}
 8006a28:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006a2a:	bf00      	nop
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b089      	sub	sp, #36	@ 0x24
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  int size = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a42:	613b      	str	r3, [r7, #16]
  return(result);
 8006a44:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a48:	b672      	cpsid	i
}
 8006a4a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006a52:	e005      	b.n	8006a60 <list_get_size+0x2e>
  {
    size++;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	3301      	adds	r3, #1
 8006a58:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d1f5      	bne.n	8006a54 <list_get_size+0x22>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f383 8810 	msr	PRIMASK, r3
}
 8006a72:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8006a74:	69fb      	ldr	r3, [r7, #28]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3724      	adds	r7, #36	@ 0x24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	609a      	str	r2, [r3, #8]
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	611a      	str	r2, [r3, #16]
 8006a98:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8006a9a:	4b27      	ldr	r3, [pc, #156]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006a9c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006aa0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006aa2:	4b25      	ldr	r3, [pc, #148]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006aa8:	4b23      	ldr	r3, [pc, #140]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006aae:	4b22      	ldr	r3, [pc, #136]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006ab4:	4b20      	ldr	r3, [pc, #128]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006aba:	4b1f      	ldr	r3, [pc, #124]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006aca:	2201      	movs	r2, #1
 8006acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ace:	4b1a      	ldr	r3, [pc, #104]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006ad4:	4b18      	ldr	r3, [pc, #96]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006ada:	4b17      	ldr	r3, [pc, #92]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006ae2:	4b15      	ldr	r3, [pc, #84]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006ae8:	4b13      	ldr	r3, [pc, #76]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006aee:	4b12      	ldr	r3, [pc, #72]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006af4:	4810      	ldr	r0, [pc, #64]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006af6:	f7fa faa5 	bl	8001044 <HAL_ADC_Init>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8006b00:	f000 fd69 	bl	80075d6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006b04:	2305      	movs	r3, #5
 8006b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8006b10:	2305      	movs	r3, #5
 8006b12:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4805      	ldr	r0, [pc, #20]	@ (8006b38 <MX_ADC1_Init+0xb4>)
 8006b22:	f7fa fd83 	bl	800162c <HAL_ADC_ConfigChannel>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006b2c:	f000 fd53 	bl	80075d6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006b30:	bf00      	nop
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20000580 	.word	0x20000580

08006b3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	@ 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b44:	f107 0314 	add.w	r3, r7, #20
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	605a      	str	r2, [r3, #4]
 8006b4e:	609a      	str	r2, [r3, #8]
 8006b50:	60da      	str	r2, [r3, #12]
 8006b52:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b5c:	d124      	bne.n	8006ba8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006b5e:	4b14      	ldr	r3, [pc, #80]	@ (8006bb0 <HAL_ADC_MspInit+0x74>)
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	4a13      	ldr	r2, [pc, #76]	@ (8006bb0 <HAL_ADC_MspInit+0x74>)
 8006b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b68:	6153      	str	r3, [r2, #20]
 8006b6a:	4b11      	ldr	r3, [pc, #68]	@ (8006bb0 <HAL_ADC_MspInit+0x74>)
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b76:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <HAL_ADC_MspInit+0x74>)
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006bb0 <HAL_ADC_MspInit+0x74>)
 8006b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b80:	6153      	str	r3, [r2, #20]
 8006b82:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <HAL_ADC_MspInit+0x74>)
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006b8e:	2310      	movs	r3, #16
 8006b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b92:	2303      	movs	r3, #3
 8006b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b9a:	f107 0314 	add.w	r3, r7, #20
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ba4:	f7fb fae6 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006ba8:	bf00      	nop
 8006baa:	3728      	adds	r7, #40	@ 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40021000 	.word	0x40021000

08006bb4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8006bb4:	b5b0      	push	{r4, r5, r7, lr}
 8006bb6:	b08a      	sub	sp, #40	@ 0x28
 8006bb8:	af04      	add	r7, sp, #16
  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8006bba:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce4 <MX_BlueNRG_MS_Init+0x130>)
 8006bbc:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8006bbe:	f000 f8a5 	bl	8006d0c <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f7fa f8c6 	bl	8000d54 <BSP_PB_GetState>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	4b46      	ldr	r3, [pc, #280]	@ (8006ce8 <MX_BlueNRG_MS_Init+0x134>)
 8006bce:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4846      	ldr	r0, [pc, #280]	@ (8006cec <MX_BlueNRG_MS_Init+0x138>)
 8006bd4:	f7ff fc4c 	bl	8006470 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8006bd8:	1dba      	adds	r2, r7, #6
 8006bda:	f107 0308 	add.w	r3, r7, #8
 8006bde:	4611      	mov	r1, r2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fab9 	bl	8006158 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8006be6:	f7ff fafb 	bl	80061e0 <hci_reset>
  HAL_Delay(100);
 8006bea:	2064      	movs	r0, #100	@ 0x64
 8006bec:	f7fa fa06 	bl	8000ffc <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8006bf0:	7a3b      	ldrb	r3, [r7, #8]
 8006bf2:	2b30      	cmp	r3, #48	@ 0x30
 8006bf4:	d902      	bls.n	8006bfc <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8006bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8006cf0 <MX_BlueNRG_MS_Init+0x13c>)
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8006bfc:	f107 0209 	add.w	r2, r7, #9
 8006c00:	4b3c      	ldr	r3, [pc, #240]	@ (8006cf4 <MX_BlueNRG_MS_Init+0x140>)
 8006c02:	2106      	movs	r1, #6
 8006c04:	2080      	movs	r0, #128	@ 0x80
 8006c06:	f7ff fa21 	bl	800604c <aci_hal_read_config_data>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8006c0e:	4b39      	ldr	r3, [pc, #228]	@ (8006cf4 <MX_BlueNRG_MS_Init+0x140>)
 8006c10:	795b      	ldrb	r3, [r3, #5]
 8006c12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c16:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c18:	d001      	beq.n	8006c1e <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8006c1e:	f7ff f80e 	bl	8005c3e <aci_gatt_init>
 8006c22:	4603      	mov	r3, r0
 8006c24:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8006c26:	4b32      	ldr	r3, [pc, #200]	@ (8006cf0 <MX_BlueNRG_MS_Init+0x13c>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d110      	bne.n	8006c50 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8006c2e:	f107 020e 	add.w	r2, r7, #14
 8006c32:	f107 030a 	add.w	r3, r7, #10
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	f107 030c 	add.w	r3, r7, #12
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	2207      	movs	r2, #7
 8006c42:	2100      	movs	r1, #0
 8006c44:	2001      	movs	r0, #1
 8006c46:	f7fe fdce 	bl	80057e6 <aci_gap_init_IDB05A1>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	e00a      	b.n	8006c66 <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8006c50:	f107 030a 	add.w	r3, r7, #10
 8006c54:	f107 020c 	add.w	r2, r7, #12
 8006c58:	f107 010e 	add.w	r1, r7, #14
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	f7fe fe12 	bl	8005886 <aci_gap_init_IDB04A1>
 8006c62:	4603      	mov	r3, r0
 8006c64:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8006c66:	89fc      	ldrh	r4, [r7, #14]
 8006c68:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8006c6a:	6978      	ldr	r0, [r7, #20]
 8006c6c:	f7f9 fb00 	bl	8000270 <strlen>
 8006c70:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f7ff f954 	bl	8005f2c <aci_gatt_update_char_value>
 8006c84:	4603      	mov	r3, r0
 8006c86:	613b      	str	r3, [r7, #16]
  if (ret) {
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8006c8e:	bf00      	nop
 8006c90:	e7fd      	b.n	8006c8e <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8006c92:	2301      	movs	r3, #1
 8006c94:	9303      	str	r3, [sp, #12]
 8006c96:	4b18      	ldr	r3, [pc, #96]	@ (8006cf8 <MX_BlueNRG_MS_Init+0x144>)
 8006c98:	9302      	str	r3, [sp, #8]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	2307      	movs	r3, #7
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	2001      	movs	r0, #1
 8006caa:	f7fe ff20 	bl	8005aee <aci_gap_set_auth_requirement>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8006cb8:	bf00      	nop
 8006cba:	e7fd      	b.n	8006cb8 <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8006cbc:	f000 f862 	bl	8006d84 <Add_HWServW2ST_Service>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <MX_BlueNRG_MS_Init+0x116>
  }



  ret = aci_hal_set_tx_power_level(1,4);
 8006cce:	2104      	movs	r1, #4
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f7ff fa10 	bl	80060f6 <aci_hal_set_tx_power_level>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	613b      	str	r3, [r7, #16]

}
 8006cda:	bf00      	nop
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	0800c658 	.word	0x0800c658
 8006ce8:	20000019 	.word	0x20000019
 8006cec:	0800795d 	.word	0x0800795d
 8006cf0:	200005d0 	.word	0x200005d0
 8006cf4:	200005d4 	.word	0x200005d4
 8006cf8:	0001e240 	.word	0x0001e240

08006cfc <MX_BlueNRG_MS_Process>:


void MX_BlueNRG_MS_Process(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  User_Process();
 8006d00:	f000 f80e 	bl	8006d20 <User_Process>
  hci_user_evt_proc();
 8006d04:	f7ff fd2e 	bl	8006764 <hci_user_evt_proc>
}
 8006d08:	bf00      	nop
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <User_Init>:


static void User_Init(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 8006d10:	2000      	movs	r0, #0
 8006d12:	f7f9 ffef 	bl	8000cf4 <BSP_LED_Init>
  BSP_COM_Init(COM1);
 8006d16:	2000      	movs	r0, #0
 8006d18:	f7fa f838 	bl	8000d8c <BSP_COM_Init>
}
 8006d1c:	bf00      	nop
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <User_Process>:


static void User_Process(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
  int16_t data_t;

  if (set_connectable)
 8006d26:	4b14      	ldr	r3, [pc, #80]	@ (8006d78 <User_Process+0x58>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8006d30:	f000 fda0 	bl	8007874 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8006d34:	4b10      	ldr	r3, [pc, #64]	@ (8006d78 <User_Process+0x58>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
  }


    BSP_LED_Toggle(LED2);
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	f7f9 ffec 	bl	8000d18 <BSP_LED_Toggle>

    if (connected)
 8006d40:	4b0e      	ldr	r3, [pc, #56]	@ (8006d7c <User_Process+0x5c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d012      	beq.n	8006d6e <User_Process+0x4e>
    {
      srand(HAL_GetTick());
 8006d48:	f7fa f94c 	bl	8000fe4 <HAL_GetTick>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f001 f8e0 	bl	8007f14 <srand>
      data_t = (int16_t)temp;
 8006d54:	4b0a      	ldr	r3, [pc, #40]	@ (8006d80 <User_Process+0x60>)
 8006d56:	edd3 7a00 	vldr	s15, [r3]
 8006d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d5e:	ee17 3a90 	vmov	r3, s15
 8006d62:	80fb      	strh	r3, [r7, #6]
      BlueMS_Environmental_Update(data_t);
 8006d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 f895 	bl	8006e98 <BlueMS_Environmental_Update>
    }

}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	2000001a 	.word	0x2000001a
 8006d7c:	20000780 	.word	0x20000780
 8006d80:	200005dc 	.word	0x200005dc

08006d84 <Add_HWServW2ST_Service>:

extern uint16_t connection_handle;
extern uint32_t start_time;

tBleStatus Add_HWServW2ST_Service(void)
{
 8006d84:	b590      	push	{r4, r7, lr}
 8006d86:	b08d      	sub	sp, #52	@ 0x34
 8006d88:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8006d8a:	231b      	movs	r3, #27
 8006d8c:	713b      	strb	r3, [r7, #4]
 8006d8e:	23c5      	movs	r3, #197	@ 0xc5
 8006d90:	717b      	strb	r3, [r7, #5]
 8006d92:	23d5      	movs	r3, #213	@ 0xd5
 8006d94:	71bb      	strb	r3, [r7, #6]
 8006d96:	23a5      	movs	r3, #165	@ 0xa5
 8006d98:	71fb      	strb	r3, [r7, #7]
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	723b      	strb	r3, [r7, #8]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	727b      	strb	r3, [r7, #9]
 8006da2:	23b4      	movs	r3, #180	@ 0xb4
 8006da4:	72bb      	strb	r3, [r7, #10]
 8006da6:	239a      	movs	r3, #154	@ 0x9a
 8006da8:	72fb      	strb	r3, [r7, #11]
 8006daa:	23e1      	movs	r3, #225	@ 0xe1
 8006dac:	733b      	strb	r3, [r7, #12]
 8006dae:	2311      	movs	r3, #17
 8006db0:	737b      	strb	r3, [r7, #13]
 8006db2:	2301      	movs	r3, #1
 8006db4:	73bb      	strb	r3, [r7, #14]
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	743b      	strb	r3, [r7, #16]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	747b      	strb	r3, [r7, #17]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	74bb      	strb	r3, [r7, #18]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8006dca:	4b2f      	ldr	r3, [pc, #188]	@ (8006e88 <Add_HWServW2ST_Service+0x104>)
 8006dcc:	461c      	mov	r4, r3
 8006dce:	1d3b      	adds	r3, r7, #4
 8006dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8006dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8006e8c <Add_HWServW2ST_Service+0x108>)
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	2310      	movs	r3, #16
 8006ddc:	2201      	movs	r2, #1
 8006dde:	492a      	ldr	r1, [pc, #168]	@ (8006e88 <Add_HWServW2ST_Service+0x104>)
 8006de0:	2002      	movs	r0, #2
 8006de2:	f7fe ff4f 	bl	8005c84 <aci_gatt_add_serv>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8006df0:	2347      	movs	r3, #71	@ 0x47
 8006df2:	e045      	b.n	8006e80 <Add_HWServW2ST_Service+0xfc>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8006df4:	231b      	movs	r3, #27
 8006df6:	713b      	strb	r3, [r7, #4]
 8006df8:	23c5      	movs	r3, #197	@ 0xc5
 8006dfa:	717b      	strb	r3, [r7, #5]
 8006dfc:	23d5      	movs	r3, #213	@ 0xd5
 8006dfe:	71bb      	strb	r3, [r7, #6]
 8006e00:	23a5      	movs	r3, #165	@ 0xa5
 8006e02:	71fb      	strb	r3, [r7, #7]
 8006e04:	2302      	movs	r3, #2
 8006e06:	723b      	strb	r3, [r7, #8]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	727b      	strb	r3, [r7, #9]
 8006e0c:	2336      	movs	r3, #54	@ 0x36
 8006e0e:	72bb      	strb	r3, [r7, #10]
 8006e10:	23ac      	movs	r3, #172	@ 0xac
 8006e12:	72fb      	strb	r3, [r7, #11]
 8006e14:	23e1      	movs	r3, #225	@ 0xe1
 8006e16:	733b      	strb	r3, [r7, #12]
 8006e18:	2311      	movs	r3, #17
 8006e1a:	737b      	strb	r3, [r7, #13]
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	73bb      	strb	r3, [r7, #14]
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
 8006e24:	2300      	movs	r3, #0
 8006e26:	743b      	strb	r3, [r7, #16]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	747b      	strb	r3, [r7, #17]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	74bb      	strb	r3, [r7, #18]
 8006e30:	2300      	movs	r3, #0
 8006e32:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8006e34:	7cbb      	ldrb	r3, [r7, #18]
 8006e36:	f043 0304 	orr.w	r3, r3, #4
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	74bb      	strb	r3, [r7, #18]
  //uuid[14] |= 0x10; /* Pressure value*/
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8006e3e:	4b14      	ldr	r3, [pc, #80]	@ (8006e90 <Add_HWServW2ST_Service+0x10c>)
 8006e40:	461c      	mov	r4, r3
 8006e42:	1d3b      	adds	r3, r7, #4
 8006e44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8006e4a:	4b10      	ldr	r3, [pc, #64]	@ (8006e8c <Add_HWServW2ST_Service+0x108>)
 8006e4c:	8818      	ldrh	r0, [r3, #0]
 8006e4e:	4b11      	ldr	r3, [pc, #68]	@ (8006e94 <Add_HWServW2ST_Service+0x110>)
 8006e50:	9305      	str	r3, [sp, #20]
 8006e52:	2300      	movs	r3, #0
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	2310      	movs	r3, #16
 8006e58:	9303      	str	r3, [sp, #12]
 8006e5a:	2304      	movs	r3, #4
 8006e5c:	9302      	str	r3, [sp, #8]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	2312      	movs	r3, #18
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	2308      	movs	r3, #8
 8006e68:	4a09      	ldr	r2, [pc, #36]	@ (8006e90 <Add_HWServW2ST_Service+0x10c>)
 8006e6a:	2102      	movs	r1, #2
 8006e6c:	f7fe ff93 	bl	8005d96 <aci_gatt_add_char>
 8006e70:	4603      	mov	r3, r0
 8006e72:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <Add_HWServW2ST_Service+0xfa>
    return BLE_STATUS_ERROR;
 8006e7a:	2347      	movs	r3, #71	@ 0x47
 8006e7c:	e000      	b.n	8006e80 <Add_HWServW2ST_Service+0xfc>


  return BLE_STATUS_SUCCESS;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}
 8006e88:	200005e4 	.word	0x200005e4
 8006e8c:	200005e0 	.word	0x200005e0
 8006e90:	200005f4 	.word	0x200005f4
 8006e94:	200005e2 	.word	0x200005e2

08006e98 <BlueMS_Environmental_Update>:



tBleStatus BlueMS_Environmental_Update(int16_t temp)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8006ea2:	f7fa f89f 	bl	8000fe4 <HAL_GetTick>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	08db      	lsrs	r3, r3, #3
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	733b      	strb	r3, [r7, #12]
 8006eae:	f7fa f899 	bl	8000fe4 <HAL_GetTick>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	0adb      	lsrs	r3, r3, #11
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	737b      	strb	r3, [r7, #13]

  //HOST_TO_LE_32(buff+2,press);
  HOST_TO_LE_16(buff+2,temp);
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	73bb      	strb	r3, [r7, #14]
 8006ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ec4:	121b      	asrs	r3, r3, #8
 8006ec6:	b21b      	sxth	r3, r3
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	73fb      	strb	r3, [r7, #15]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <BlueMS_Environmental_Update+0x64>)
 8006ece:	8818      	ldrh	r0, [r3, #0]
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f00 <BlueMS_Environmental_Update+0x68>)
 8006ed2:	8819      	ldrh	r1, [r3, #0]
 8006ed4:	f107 030c 	add.w	r3, r7, #12
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2308      	movs	r3, #8
 8006edc:	2200      	movs	r2, #0
 8006ede:	f7ff f825 	bl	8005f2c <aci_gatt_update_char_value>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <BlueMS_Environmental_Update+0x58>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8006eec:	2347      	movs	r3, #71	@ 0x47
 8006eee:	e000      	b.n	8006ef2 <BlueMS_Environmental_Update+0x5a>
  }

  return BLE_STATUS_SUCCESS;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	200005e0 	.word	0x200005e0
 8006f00:	200005e2 	.word	0x200005e2

08006f04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	@ 0x28
 8006f08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f0a:	f107 0314 	add.w	r3, r7, #20
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	605a      	str	r2, [r3, #4]
 8006f14:	609a      	str	r2, [r3, #8]
 8006f16:	60da      	str	r2, [r3, #12]
 8006f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f1a:	4b34      	ldr	r3, [pc, #208]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	4a33      	ldr	r2, [pc, #204]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f24:	6153      	str	r3, [r2, #20]
 8006f26:	4b31      	ldr	r3, [pc, #196]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006f32:	4b2e      	ldr	r3, [pc, #184]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	4a2d      	ldr	r2, [pc, #180]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f3c:	6153      	str	r3, [r2, #20]
 8006f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f4a:	4b28      	ldr	r3, [pc, #160]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	4a27      	ldr	r2, [pc, #156]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f54:	6153      	str	r3, [r2, #20]
 8006f56:	4b25      	ldr	r3, [pc, #148]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5e:	60bb      	str	r3, [r7, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f62:	4b22      	ldr	r3, [pc, #136]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	4a21      	ldr	r2, [pc, #132]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f6c:	6153      	str	r3, [r2, #20]
 8006f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8006fec <MX_GPIO_Init+0xe8>)
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f76:	607b      	str	r3, [r7, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8006f80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f84:	f7fb fb54 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006f8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006fa0:	f7fb f8e8 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8006fa4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006faa:	2301      	movs	r3, #1
 8006fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fb6:	f107 0314 	add.w	r3, r7, #20
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006fc0:	f7fb f8d8 	bl	8002174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	2006      	movs	r0, #6
 8006fca:	f7fb f83c 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006fce:	2006      	movs	r0, #6
 8006fd0:	f7fb f855 	bl	800207e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	2028      	movs	r0, #40	@ 0x28
 8006fda:	f7fb f834 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fde:	2028      	movs	r0, #40	@ 0x28
 8006fe0:	f7fb f84d 	bl	800207e <HAL_NVIC_EnableIRQ>

}
 8006fe4:	bf00      	nop
 8006fe6:	3728      	adds	r7, #40	@ 0x28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40021000 	.word	0x40021000

08006ff0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8007078 <HCI_TL_SPI_Init+0x88>)
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8007078 <HCI_TL_SPI_Init+0x88>)
 8006ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007002:	6153      	str	r3, [r2, #20]
 8007004:	4b1c      	ldr	r3, [pc, #112]	@ (8007078 <HCI_TL_SPI_Init+0x88>)
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8007010:	2301      	movs	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007014:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8007018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800701e:	f107 030c 	add.w	r3, r7, #12
 8007022:	4619      	mov	r1, r3
 8007024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007028:	f7fb f8a4 	bl	8002174 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800702c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007032:	2301      	movs	r3, #1
 8007034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800703a:	2300      	movs	r3, #0
 800703c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800703e:	f107 030c 	add.w	r3, r7, #12
 8007042:	4619      	mov	r1, r3
 8007044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007048:	f7fb f894 	bl	8002174 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800704c:	2302      	movs	r3, #2
 800704e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007050:	2301      	movs	r3, #1
 8007052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007058:	2300      	movs	r3, #0
 800705a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800705c:	f107 030c 	add.w	r3, r7, #12
 8007060:	4619      	mov	r1, r3
 8007062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007066:	f7fb f885 	bl	8002174 <HAL_GPIO_Init>

  return BSP_SPI2_Init();
 800706a:	f000 fd5f 	bl	8007b2c <BSP_SPI2_Init>
 800706e:	4603      	mov	r3, r0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3720      	adds	r7, #32
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40021000 	.word	0x40021000

0800707c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8007080:	2101      	movs	r1, #1
 8007082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007086:	f7fb f9e7 	bl	8002458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800708a:	2102      	movs	r1, #2
 800708c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007090:	f7fb f9e2 	bl	8002458 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8007094:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800709c:	f7fb f9dc 	bl	8002458 <HAL_GPIO_DeInit>
  return 0;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80070aa:	2201      	movs	r2, #1
 80070ac:	2102      	movs	r1, #2
 80070ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070b2:	f7fb fabd 	bl	8002630 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80070b6:	2200      	movs	r2, #0
 80070b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80070bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070c0:	f7fb fab6 	bl	8002630 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80070c4:	2005      	movs	r0, #5
 80070c6:	f7f9 ff99 	bl	8000ffc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80070ca:	2201      	movs	r2, #1
 80070cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80070d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070d4:	f7fb faac 	bl	8002630 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80070d8:	2005      	movs	r0, #5
 80070da:	f7f9 ff8f 	bl	8000ffc <HAL_Delay>
  return 0;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80070f4:	23ff      	movs	r3, #255	@ 0xff
 80070f6:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80070f8:	4a26      	ldr	r2, [pc, #152]	@ (8007194 <HCI_TL_SPI_Receive+0xb0>)
 80070fa:	f107 0314 	add.w	r3, r7, #20
 80070fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007102:	6018      	str	r0, [r3, #0]
 8007104:	3304      	adds	r3, #4
 8007106:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8007108:	2200      	movs	r2, #0
 800710a:	2102      	movs	r1, #2
 800710c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007110:	f7fb fa8e 	bl	8002630 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 8007114:	f107 010c 	add.w	r1, r7, #12
 8007118:	f107 0314 	add.w	r3, r7, #20
 800711c:	2205      	movs	r2, #5
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fd34 	bl	8007b8c <BSP_SPI2_SendRecv>

  if(header_slave[0] == 0x02)
 8007124:	7b3b      	ldrb	r3, [r7, #12]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d129      	bne.n	800717e <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800712a:	7c3b      	ldrb	r3, [r7, #16]
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	b21a      	sxth	r2, r3
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	b21b      	sxth	r3, r3
 8007134:	4313      	orrs	r3, r2
 8007136:	b21b      	sxth	r3, r3
 8007138:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800713a:	8bfb      	ldrh	r3, [r7, #30]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01e      	beq.n	800717e <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8007140:	8bfa      	ldrh	r2, [r7, #30]
 8007142:	887b      	ldrh	r3, [r7, #2]
 8007144:	429a      	cmp	r2, r3
 8007146:	d901      	bls.n	800714c <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8007148:	887b      	ldrh	r3, [r7, #2]
 800714a:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800714c:	2300      	movs	r3, #0
 800714e:	777b      	strb	r3, [r7, #29]
 8007150:	e010      	b.n	8007174 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI2_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8007152:	f107 011b 	add.w	r1, r7, #27
 8007156:	f107 031c 	add.w	r3, r7, #28
 800715a:	2201      	movs	r2, #1
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fd15 	bl	8007b8c <BSP_SPI2_SendRecv>
        buffer[len] = read_char;
 8007162:	7f7b      	ldrb	r3, [r7, #29]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	4413      	add	r3, r2
 8007168:	7efa      	ldrb	r2, [r7, #27]
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800716e:	7f7b      	ldrb	r3, [r7, #29]
 8007170:	3301      	adds	r3, #1
 8007172:	777b      	strb	r3, [r7, #29]
 8007174:	7f7b      	ldrb	r3, [r7, #29]
 8007176:	b29b      	uxth	r3, r3
 8007178:	8bfa      	ldrh	r2, [r7, #30]
 800717a:	429a      	cmp	r2, r3
 800717c:	d8e9      	bhi.n	8007152 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800717e:	2201      	movs	r2, #1
 8007180:	2102      	movs	r1, #2
 8007182:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007186:	f7fb fa53 	bl	8002630 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800718a:	7f7b      	ldrb	r3, [r7, #29]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3720      	adds	r7, #32
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	0800c660 	.word	0x0800c660

08007198 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80071a4:	4a24      	ldr	r2, [pc, #144]	@ (8007238 <HCI_TL_SPI_Send+0xa0>)
 80071a6:	f107 0310 	add.w	r3, r7, #16
 80071aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071ae:	6018      	str	r0, [r3, #0]
 80071b0:	3304      	adds	r3, #4
 80071b2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80071b4:	f7f9 ff16 	bl	8000fe4 <HAL_GetTick>
 80071b8:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80071be:	2200      	movs	r2, #0
 80071c0:	2102      	movs	r1, #2
 80071c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80071c6:	f7fb fa33 	bl	8002630 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI2_SendRecv(header_master, header_slave, HEADER_SIZE);
 80071ca:	f107 0108 	add.w	r1, r7, #8
 80071ce:	f107 0310 	add.w	r3, r7, #16
 80071d2:	2205      	movs	r2, #5
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fcd9 	bl	8007b8c <BSP_SPI2_SendRecv>

    if(header_slave[0] == 0x02)
 80071da:	7a3b      	ldrb	r3, [r7, #8]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d10f      	bne.n	8007200 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80071e0:	7a7b      	ldrb	r3, [r7, #9]
 80071e2:	461a      	mov	r2, r3
 80071e4:	887b      	ldrh	r3, [r7, #2]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d806      	bhi.n	80071f8 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI2_SendRecv(buffer, read_char_buf, size);
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	461a      	mov	r2, r3
 80071ee:	4913      	ldr	r1, [pc, #76]	@ (800723c <HCI_TL_SPI_Send+0xa4>)
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fccb 	bl	8007b8c <BSP_SPI2_SendRecv>
 80071f6:	e006      	b.n	8007206 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80071f8:	f06f 0301 	mvn.w	r3, #1
 80071fc:	61fb      	str	r3, [r7, #28]
 80071fe:	e002      	b.n	8007206 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8007200:	f04f 33ff 	mov.w	r3, #4294967295
 8007204:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007206:	2201      	movs	r2, #1
 8007208:	2102      	movs	r1, #2
 800720a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800720e:	f7fb fa0f 	bl	8002630 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8007212:	f7f9 fee7 	bl	8000fe4 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b0f      	cmp	r3, #15
 800721e:	d903      	bls.n	8007228 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8007220:	f06f 0302 	mvn.w	r3, #2
 8007224:	61fb      	str	r3, [r7, #28]
      break;
 8007226:	e002      	b.n	800722e <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	2b00      	cmp	r3, #0
 800722c:	dbc5      	blt.n	80071ba <HCI_TL_SPI_Send+0x22>

  return result;
 800722e:	69fb      	ldr	r3, [r7, #28]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3720      	adds	r7, #32
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	0800c668 	.word	0x0800c668
 800723c:	2000060c 	.word	0x2000060c

08007240 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8007244:	2101      	movs	r1, #1
 8007246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800724a:	f7fb f9d9 	bl	8002600 <HAL_GPIO_ReadPin>
 800724e:	4603      	mov	r3, r0
 8007250:	2b01      	cmp	r3, #1
 8007252:	bf0c      	ite	eq
 8007254:	2301      	moveq	r3, #1
 8007256:	2300      	movne	r3, #0
 8007258:	b2db      	uxtb	r3, r3
}
 800725a:	4618      	mov	r0, r3
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8007266:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <hci_tl_lowlevel_init+0x54>)
 8007268:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800726a:	4b13      	ldr	r3, [pc, #76]	@ (80072b8 <hci_tl_lowlevel_init+0x58>)
 800726c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800726e:	4b13      	ldr	r3, [pc, #76]	@ (80072bc <hci_tl_lowlevel_init+0x5c>)
 8007270:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8007272:	4b13      	ldr	r3, [pc, #76]	@ (80072c0 <hci_tl_lowlevel_init+0x60>)
 8007274:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8007276:	4b13      	ldr	r3, [pc, #76]	@ (80072c4 <hci_tl_lowlevel_init+0x64>)
 8007278:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800727a:	4b13      	ldr	r3, [pc, #76]	@ (80072c8 <hci_tl_lowlevel_init+0x68>)
 800727c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800727e:	1d3b      	adds	r3, r7, #4
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff f937 	bl	80064f4 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8007286:	f04f 61c0 	mov.w	r1, #100663296	@ 0x6000000
 800728a:	4810      	ldr	r0, [pc, #64]	@ (80072cc <hci_tl_lowlevel_init+0x6c>)
 800728c:	f7fa ff2b 	bl	80020e6 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8007290:	4a0f      	ldr	r2, [pc, #60]	@ (80072d0 <hci_tl_lowlevel_init+0x70>)
 8007292:	2100      	movs	r1, #0
 8007294:	480d      	ldr	r0, [pc, #52]	@ (80072cc <hci_tl_lowlevel_init+0x6c>)
 8007296:	f7fa ff0c 	bl	80020b2 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	2006      	movs	r0, #6
 80072a0:	f7fa fed1 	bl	8002046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80072a4:	2006      	movs	r0, #6
 80072a6:	f7fa feea 	bl	800207e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80072aa:	bf00      	nop
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	08006ff1 	.word	0x08006ff1
 80072b8:	0800707d 	.word	0x0800707d
 80072bc:	08007199 	.word	0x08007199
 80072c0:	080070e5 	.word	0x080070e5
 80072c4:	080070a7 	.word	0x080070a7
 80072c8:	08007bcd 	.word	0x08007bcd
 80072cc:	20000604 	.word	0x20000604
 80072d0:	080072d5 	.word	0x080072d5

080072d4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80072d8:	e005      	b.n	80072e6 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80072da:	2000      	movs	r0, #0
 80072dc:	f7ff fa6e 	bl	80067bc <hci_notify_asynch_evt>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d105      	bne.n	80072f2 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80072e6:	f7ff ffab 	bl	8007240 <IsDataAvailable>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f4      	bne.n	80072da <hci_tl_lowlevel_isr+0x6>
 80072f0:	e000      	b.n	80072f4 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80072f2:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80072fc:	4b1b      	ldr	r3, [pc, #108]	@ (800736c <MX_I2C1_Init+0x74>)
 80072fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007370 <MX_I2C1_Init+0x78>)
 8007300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8007302:	4b1a      	ldr	r3, [pc, #104]	@ (800736c <MX_I2C1_Init+0x74>)
 8007304:	4a1b      	ldr	r2, [pc, #108]	@ (8007374 <MX_I2C1_Init+0x7c>)
 8007306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007308:	4b18      	ldr	r3, [pc, #96]	@ (800736c <MX_I2C1_Init+0x74>)
 800730a:	2200      	movs	r2, #0
 800730c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800730e:	4b17      	ldr	r3, [pc, #92]	@ (800736c <MX_I2C1_Init+0x74>)
 8007310:	2201      	movs	r2, #1
 8007312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007314:	4b15      	ldr	r3, [pc, #84]	@ (800736c <MX_I2C1_Init+0x74>)
 8007316:	2200      	movs	r2, #0
 8007318:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800731a:	4b14      	ldr	r3, [pc, #80]	@ (800736c <MX_I2C1_Init+0x74>)
 800731c:	2200      	movs	r2, #0
 800731e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007320:	4b12      	ldr	r3, [pc, #72]	@ (800736c <MX_I2C1_Init+0x74>)
 8007322:	2200      	movs	r2, #0
 8007324:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007326:	4b11      	ldr	r3, [pc, #68]	@ (800736c <MX_I2C1_Init+0x74>)
 8007328:	2200      	movs	r2, #0
 800732a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800732c:	4b0f      	ldr	r3, [pc, #60]	@ (800736c <MX_I2C1_Init+0x74>)
 800732e:	2200      	movs	r2, #0
 8007330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007332:	480e      	ldr	r0, [pc, #56]	@ (800736c <MX_I2C1_Init+0x74>)
 8007334:	f7fb f9ae 	bl	8002694 <HAL_I2C_Init>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800733e:	f000 f94a 	bl	80075d6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007342:	2100      	movs	r1, #0
 8007344:	4809      	ldr	r0, [pc, #36]	@ (800736c <MX_I2C1_Init+0x74>)
 8007346:	f7fb fd39 	bl	8002dbc <HAL_I2CEx_ConfigAnalogFilter>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007350:	f000 f941 	bl	80075d6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007354:	2100      	movs	r1, #0
 8007356:	4805      	ldr	r0, [pc, #20]	@ (800736c <MX_I2C1_Init+0x74>)
 8007358:	f7fb fd7b 	bl	8002e52 <HAL_I2CEx_ConfigDigitalFilter>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007362:	f000 f938 	bl	80075d6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007366:	bf00      	nop
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	2000070c 	.word	0x2000070c
 8007370:	40005400 	.word	0x40005400
 8007374:	2000090e 	.word	0x2000090e

08007378 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08a      	sub	sp, #40	@ 0x28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007380:	f107 0314 	add.w	r3, r7, #20
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	605a      	str	r2, [r3, #4]
 800738a:	609a      	str	r2, [r3, #8]
 800738c:	60da      	str	r2, [r3, #12]
 800738e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a17      	ldr	r2, [pc, #92]	@ (80073f4 <HAL_I2C_MspInit+0x7c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d128      	bne.n	80073ec <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800739a:	4b17      	ldr	r3, [pc, #92]	@ (80073f8 <HAL_I2C_MspInit+0x80>)
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	4a16      	ldr	r2, [pc, #88]	@ (80073f8 <HAL_I2C_MspInit+0x80>)
 80073a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073a4:	6153      	str	r3, [r2, #20]
 80073a6:	4b14      	ldr	r3, [pc, #80]	@ (80073f8 <HAL_I2C_MspInit+0x80>)
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80073b2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80073b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073b8:	2312      	movs	r3, #18
 80073ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073bc:	2300      	movs	r3, #0
 80073be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073c0:	2303      	movs	r3, #3
 80073c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80073c4:	2304      	movs	r3, #4
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	4619      	mov	r1, r3
 80073ce:	480b      	ldr	r0, [pc, #44]	@ (80073fc <HAL_I2C_MspInit+0x84>)
 80073d0:	f7fa fed0 	bl	8002174 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80073d4:	4b08      	ldr	r3, [pc, #32]	@ (80073f8 <HAL_I2C_MspInit+0x80>)
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	4a07      	ldr	r2, [pc, #28]	@ (80073f8 <HAL_I2C_MspInit+0x80>)
 80073da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073de:	61d3      	str	r3, [r2, #28]
 80073e0:	4b05      	ldr	r3, [pc, #20]	@ (80073f8 <HAL_I2C_MspInit+0x80>)
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80073ec:	bf00      	nop
 80073ee:	3728      	adds	r7, #40	@ 0x28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	40005400 	.word	0x40005400
 80073f8:	40021000 	.word	0x40021000
 80073fc:	48000400 	.word	0x48000400

08007400 <main>:
extern volatile int connected;
char tempString[20];
uint32_t adcValue = 0;

int main(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0

  HAL_Init();
 8007404:	f7f9 fd94 	bl	8000f30 <HAL_Init>

  SystemClock_Config();
 8007408:	f000 f88c 	bl	8007524 <SystemClock_Config>

  MX_GPIO_Init();
 800740c:	f7ff fd7a 	bl	8006f04 <MX_GPIO_Init>
  MX_I2C1_Init();
 8007410:	f7ff ff72 	bl	80072f8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8007414:	f7ff fb36 	bl	8006a84 <MX_ADC1_Init>
  LCD1602_Init();
 8007418:	f000 f8e4 	bl	80075e4 <LCD1602_Init>
  MX_BlueNRG_MS_Init();
 800741c:	f7ff fbca 	bl	8006bb4 <MX_BlueNRG_MS_Init>


  while (1)
  {

	  MX_BlueNRG_MS_Process();
 8007420:	f7ff fc6c 	bl	8006cfc <MX_BlueNRG_MS_Process>
	  bleStatus();
 8007424:	f000 f804 	bl	8007430 <bleStatus>
	  tempData();
 8007428:	f000 f822 	bl	8007470 <tempData>
	  MX_BlueNRG_MS_Process();
 800742c:	bf00      	nop
 800742e:	e7f7      	b.n	8007420 <main+0x20>

08007430 <bleStatus>:

  }

}

void bleStatus(void) {
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
	LCD1602_MoveCursorTo(0,2);
 8007434:	2102      	movs	r1, #2
 8007436:	2000      	movs	r0, #0
 8007438:	f000 f914 	bl	8007664 <LCD1602_MoveCursorTo>
	if(connected) {
 800743c:	4b08      	ldr	r3, [pc, #32]	@ (8007460 <bleStatus+0x30>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <bleStatus+0x1c>
		LCD1602_WriteText("BLT device on ");
 8007444:	4807      	ldr	r0, [pc, #28]	@ (8007464 <bleStatus+0x34>)
 8007446:	f000 f9c7 	bl	80077d8 <LCD1602_WriteText>
 800744a:	e002      	b.n	8007452 <bleStatus+0x22>
	}
	else LCD1602_WriteText("BLT device off");
 800744c:	4806      	ldr	r0, [pc, #24]	@ (8007468 <bleStatus+0x38>)
 800744e:	f000 f9c3 	bl	80077d8 <LCD1602_WriteText>
	HAL_Delay(500);
 8007452:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007456:	f7f9 fdd1 	bl	8000ffc <HAL_Delay>
}
 800745a:	bf00      	nop
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000780 	.word	0x20000780
 8007464:	0800c670 	.word	0x0800c670
 8007468:	0800c680 	.word	0x0800c680
 800746c:	00000000 	.word	0x00000000

08007470 <tempData>:

void tempData(void) {
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8007474:	4824      	ldr	r0, [pc, #144]	@ (8007508 <tempData+0x98>)
 8007476:	f7f9 ff6b 	bl	8001350 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800747a:	2164      	movs	r1, #100	@ 0x64
 800747c:	4822      	ldr	r0, [pc, #136]	@ (8007508 <tempData+0x98>)
 800747e:	f7fa f809 	bl	8001494 <HAL_ADC_PollForConversion>
	adcValue = HAL_ADC_GetValue(&hadc1);
 8007482:	4821      	ldr	r0, [pc, #132]	@ (8007508 <tempData+0x98>)
 8007484:	f7fa f8c4 	bl	8001610 <HAL_ADC_GetValue>
 8007488:	4603      	mov	r3, r0
 800748a:	4a20      	ldr	r2, [pc, #128]	@ (800750c <tempData+0x9c>)
 800748c:	6013      	str	r3, [r2, #0]

	temp = adcValue * ((3300.0 - 500.0)/(4095.0 * 10));
 800748e:	4b1f      	ldr	r3, [pc, #124]	@ (800750c <tempData+0x9c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f7f9 f836 	bl	8000504 <__aeabi_ui2d>
 8007498:	a319      	add	r3, pc, #100	@ (adr r3, 8007500 <tempData+0x90>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f9 f8ab 	bl	80005f8 <__aeabi_dmul>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4610      	mov	r0, r2
 80074a8:	4619      	mov	r1, r3
 80074aa:	f7f9 fb9d 	bl	8000be8 <__aeabi_d2f>
 80074ae:	4603      	mov	r3, r0
 80074b0:	4a17      	ldr	r2, [pc, #92]	@ (8007510 <tempData+0xa0>)
 80074b2:	6013      	str	r3, [r2, #0]
	sprintf(tempString, "Temp: %.2f", temp/10.0);
 80074b4:	4b16      	ldr	r3, [pc, #88]	@ (8007510 <tempData+0xa0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7f9 f845 	bl	8000548 <__aeabi_f2d>
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	4b14      	ldr	r3, [pc, #80]	@ (8007514 <tempData+0xa4>)
 80074c4:	f7f9 f9c2 	bl	800084c <__aeabi_ddiv>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4912      	ldr	r1, [pc, #72]	@ (8007518 <tempData+0xa8>)
 80074ce:	4813      	ldr	r0, [pc, #76]	@ (800751c <tempData+0xac>)
 80074d0:	f001 fc7c 	bl	8008dcc <siprintf>
    HAL_ADC_Stop(&hadc1);
 80074d4:	480c      	ldr	r0, [pc, #48]	@ (8007508 <tempData+0x98>)
 80074d6:	f7f9 ffa8 	bl	800142a <HAL_ADC_Stop>
    LCD1602_MoveCursorTo(0,1);
 80074da:	2101      	movs	r1, #1
 80074dc:	2000      	movs	r0, #0
 80074de:	f000 f8c1 	bl	8007664 <LCD1602_MoveCursorTo>
	LCD1602_WriteText(tempString);
 80074e2:	480e      	ldr	r0, [pc, #56]	@ (800751c <tempData+0xac>)
 80074e4:	f000 f978 	bl	80077d8 <LCD1602_WriteText>
	LCD1602_WriteLetter(0b11011111);
 80074e8:	20df      	movs	r0, #223	@ 0xdf
 80074ea:	f000 f93d 	bl	8007768 <LCD1602_WriteLetter>
	LCD1602_WriteText("C ");
 80074ee:	480c      	ldr	r0, [pc, #48]	@ (8007520 <tempData+0xb0>)
 80074f0:	f000 f972 	bl	80077d8 <LCD1602_WriteText>
	HAL_Delay(500);
 80074f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80074f8:	f7f9 fd80 	bl	8000ffc <HAL_Delay>
}
 80074fc:	bf00      	nop
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	11811812 	.word	0x11811812
 8007504:	3fb18118 	.word	0x3fb18118
 8007508:	20000580 	.word	0x20000580
 800750c:	20000774 	.word	0x20000774
 8007510:	200005dc 	.word	0x200005dc
 8007514:	40240000 	.word	0x40240000
 8007518:	0800c690 	.word	0x0800c690
 800751c:	20000760 	.word	0x20000760
 8007520:	0800c69c 	.word	0x0800c69c

08007524 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b09c      	sub	sp, #112	@ 0x70
 8007528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800752a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800752e:	2228      	movs	r2, #40	@ 0x28
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f001 fcad 	bl	8008e92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007538:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007548:	463b      	mov	r3, r7
 800754a:	2234      	movs	r2, #52	@ 0x34
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f001 fc9f 	bl	8008e92 <memset>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007554:	2302      	movs	r3, #2
 8007556:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007558:	2301      	movs	r3, #1
 800755a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800755c:	2310      	movs	r3, #16
 800755e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007560:	2302      	movs	r3, #2
 8007562:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007564:	2300      	movs	r3, #0
 8007566:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8007568:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800756c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800756e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007572:	4618      	mov	r0, r3
 8007574:	f7fb fcba 	bl	8002eec <HAL_RCC_OscConfig>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800757e:	f000 f82a 	bl	80075d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007582:	230f      	movs	r3, #15
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007586:	2302      	movs	r3, #2
 8007588:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800758a:	2300      	movs	r3, #0
 800758c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800758e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007592:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007594:	2300      	movs	r3, #0
 8007596:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007598:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800759c:	2102      	movs	r1, #2
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fc fce2 	bl	8003f68 <HAL_RCC_ClockConfig>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80075aa:	f000 f814 	bl	80075d6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC1;
 80075ae:	23a0      	movs	r3, #160	@ 0xa0
 80075b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80075b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80075bc:	463b      	mov	r3, r7
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fc ff08 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80075ca:	f000 f804 	bl	80075d6 <Error_Handler>
  }
}
 80075ce:	bf00      	nop
 80075d0:	3770      	adds	r7, #112	@ 0x70
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <Error_Handler>:


void Error_Handler(void)
{
 80075d6:	b480      	push	{r7}
 80075d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80075da:	b672      	cpsid	i
}
 80075dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <Error_Handler+0x8>
	...

080075e4 <LCD1602_Init>:


HAL_StatusTypeDef res;
uint8_t cursor;

void LCD1602_Init(void) {
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
	LCD1602_WriteInst(0b00110000);
 80075e8:	2030      	movs	r0, #48	@ 0x30
 80075ea:	f000 f913 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(5);
 80075ee:	2005      	movs	r0, #5
 80075f0:	f7f9 fd04 	bl	8000ffc <HAL_Delay>
	LCD1602_WriteInst(0b00110000);
 80075f4:	2030      	movs	r0, #48	@ 0x30
 80075f6:	f000 f90d 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(1);
 80075fa:	2001      	movs	r0, #1
 80075fc:	f7f9 fcfe 	bl	8000ffc <HAL_Delay>
	LCD1602_WriteInst(0b00110000);
 8007600:	2030      	movs	r0, #48	@ 0x30
 8007602:	f000 f907 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(1);
 8007606:	2001      	movs	r0, #1
 8007608:	f7f9 fcf8 	bl	8000ffc <HAL_Delay>
	LCD1602_WriteInst(0b00100000);
 800760c:	2020      	movs	r0, #32
 800760e:	f000 f901 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(1);
 8007612:	2001      	movs	r0, #1
 8007614:	f7f9 fcf2 	bl	8000ffc <HAL_Delay>
	LCD1602_WriteInst(0b00101000);
 8007618:	2028      	movs	r0, #40	@ 0x28
 800761a:	f000 f8fb 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(1);
 800761e:	2001      	movs	r0, #1
 8007620:	f7f9 fcec 	bl	8000ffc <HAL_Delay>
	LCD1602_WriteInst(0b00001000);
 8007624:	2008      	movs	r0, #8
 8007626:	f000 f8f5 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(1);
 800762a:	2001      	movs	r0, #1
 800762c:	f7f9 fce6 	bl	8000ffc <HAL_Delay>
	LCD1602_WriteInst(0b00000001);
 8007630:	2001      	movs	r0, #1
 8007632:	f000 f8ef 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(1);
 8007636:	2001      	movs	r0, #1
 8007638:	f7f9 fce0 	bl	8000ffc <HAL_Delay>
	LCD1602_WriteInst(0b00000110);
 800763c:	2006      	movs	r0, #6
 800763e:	f000 f8e9 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(1);
 8007642:	2001      	movs	r0, #1
 8007644:	f7f9 fcda 	bl	8000ffc <HAL_Delay>
	LCD1602_WriteInst(0b00001100);
 8007648:	200c      	movs	r0, #12
 800764a:	f000 f8e3 	bl	8007814 <LCD1602_WriteInst>
	HAL_Delay(1);
 800764e:	2001      	movs	r0, #1
 8007650:	f7f9 fcd4 	bl	8000ffc <HAL_Delay>
	cursor = 0;
 8007654:	4b02      	ldr	r3, [pc, #8]	@ (8007660 <LCD1602_Init+0x7c>)
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
}
 800765a:	bf00      	nop
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000778 	.word	0x20000778

08007664 <LCD1602_MoveCursorTo>:
	LCD1602_WriteInst(0b00000011);
	HAL_Delay(1);
	cursor = 0;
}

void LCD1602_MoveCursorTo(uint8_t place, uint8_t line) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	460a      	mov	r2, r1
 800766e:	71fb      	strb	r3, [r7, #7]
 8007670:	4613      	mov	r3, r2
 8007672:	71bb      	strb	r3, [r7, #6]
	//Check if place is between possible boundaries
	if(place >= 0 && place <= 15 && (line == 1 || line == 2)) {
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	2b0f      	cmp	r3, #15
 8007678:	d86f      	bhi.n	800775a <LCD1602_MoveCursorTo+0xf6>
 800767a:	79bb      	ldrb	r3, [r7, #6]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d002      	beq.n	8007686 <LCD1602_MoveCursorTo+0x22>
 8007680:	79bb      	ldrb	r3, [r7, #6]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d169      	bne.n	800775a <LCD1602_MoveCursorTo+0xf6>
		//Cursor is before or equal to the declared place in the first line
		if(place + 40*(line-1) - cursor >= 0) {
 8007686:	79f9      	ldrb	r1, [r7, #7]
 8007688:	79bb      	ldrb	r3, [r7, #6]
 800768a:	1e5a      	subs	r2, r3, #1
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	440b      	add	r3, r1
 8007696:	4a33      	ldr	r2, [pc, #204]	@ (8007764 <LCD1602_MoveCursorTo+0x100>)
 8007698:	7812      	ldrb	r2, [r2, #0]
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	db27      	blt.n	80076f0 <LCD1602_MoveCursorTo+0x8c>
			for(int i = 0; i <  place + 40*(line-1) - cursor; i++) {
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	e008      	b.n	80076b8 <LCD1602_MoveCursorTo+0x54>
				LCD1602_WriteInst(0b00010100);
 80076a6:	2014      	movs	r0, #20
 80076a8:	f000 f8b4 	bl	8007814 <LCD1602_WriteInst>
				HAL_Delay(1);
 80076ac:	2001      	movs	r0, #1
 80076ae:	f7f9 fca5 	bl	8000ffc <HAL_Delay>
			for(int i = 0; i <  place + 40*(line-1) - cursor; i++) {
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	79f9      	ldrb	r1, [r7, #7]
 80076ba:	79bb      	ldrb	r3, [r7, #6]
 80076bc:	1e5a      	subs	r2, r3, #1
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	440b      	add	r3, r1
 80076c8:	4a26      	ldr	r2, [pc, #152]	@ (8007764 <LCD1602_MoveCursorTo+0x100>)
 80076ca:	7812      	ldrb	r2, [r2, #0]
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	dbe8      	blt.n	80076a6 <LCD1602_MoveCursorTo+0x42>
			}
			cursor = place + 40*(line-1);
 80076d4:	79bb      	ldrb	r3, [r7, #6]
 80076d6:	461a      	mov	r2, r3
 80076d8:	0092      	lsls	r2, r2, #2
 80076da:	4413      	add	r3, r2
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	4413      	add	r3, r2
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	3b28      	subs	r3, #40	@ 0x28
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007764 <LCD1602_MoveCursorTo+0x100>)
 80076ec:	701a      	strb	r2, [r3, #0]
			}
			cursor = place + 40*(line-1);
		}

	}
}
 80076ee:	e034      	b.n	800775a <LCD1602_MoveCursorTo+0xf6>
		else if(place + 40*(line-1) - cursor < 0) {
 80076f0:	79f9      	ldrb	r1, [r7, #7]
 80076f2:	79bb      	ldrb	r3, [r7, #6]
 80076f4:	1e5a      	subs	r2, r3, #1
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	440b      	add	r3, r1
 8007700:	4a18      	ldr	r2, [pc, #96]	@ (8007764 <LCD1602_MoveCursorTo+0x100>)
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	1a9b      	subs	r3, r3, r2
 8007706:	2b00      	cmp	r3, #0
 8007708:	da27      	bge.n	800775a <LCD1602_MoveCursorTo+0xf6>
			for(int i = 0; i < cursor - (place + 40*(line-1)); i++) {
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	e008      	b.n	8007722 <LCD1602_MoveCursorTo+0xbe>
				LCD1602_WriteInst(0b00010000); //Changes 3 bit to 0 so it shifts to the left
 8007710:	2010      	movs	r0, #16
 8007712:	f000 f87f 	bl	8007814 <LCD1602_WriteInst>
				HAL_Delay(1);
 8007716:	2001      	movs	r0, #1
 8007718:	f7f9 fc70 	bl	8000ffc <HAL_Delay>
			for(int i = 0; i < cursor - (place + 40*(line-1)); i++) {
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	3301      	adds	r3, #1
 8007720:	60bb      	str	r3, [r7, #8]
 8007722:	4b10      	ldr	r3, [pc, #64]	@ (8007764 <LCD1602_MoveCursorTo+0x100>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	79f9      	ldrb	r1, [r7, #7]
 800772a:	79bb      	ldrb	r3, [r7, #6]
 800772c:	1e5a      	subs	r2, r3, #1
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	440b      	add	r3, r1
 8007738:	1ac3      	subs	r3, r0, r3
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	429a      	cmp	r2, r3
 800773e:	dbe7      	blt.n	8007710 <LCD1602_MoveCursorTo+0xac>
			cursor = place + 40*(line-1);
 8007740:	79bb      	ldrb	r3, [r7, #6]
 8007742:	461a      	mov	r2, r3
 8007744:	0092      	lsls	r2, r2, #2
 8007746:	4413      	add	r3, r2
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	b2da      	uxtb	r2, r3
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	4413      	add	r3, r2
 8007750:	b2db      	uxtb	r3, r3
 8007752:	3b28      	subs	r3, #40	@ 0x28
 8007754:	b2da      	uxtb	r2, r3
 8007756:	4b03      	ldr	r3, [pc, #12]	@ (8007764 <LCD1602_MoveCursorTo+0x100>)
 8007758:	701a      	strb	r2, [r3, #0]
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000778 	.word	0x20000778

08007768 <LCD1602_WriteLetter>:


void LCD1602_WriteLetter(char data) {
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af02      	add	r7, sp, #8
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
	char data_up, data_low;
	uint8_t data_t[4];
	data_up = (data & 0b11110000);
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	f023 030f 	bic.w	r3, r3, #15
 8007778:	73fb      	strb	r3, [r7, #15]
	data_low = ((data<<4) & 0b11110000);
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	011b      	lsls	r3, r3, #4
 800777e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_up	| 0b00001101;  // backlight, enable, write, register select
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	f043 030d 	orr.w	r3, r3, #13
 8007786:	b2db      	uxtb	r3, r3
 8007788:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_up	| 0b00001001;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	f043 0309 	orr.w	r3, r3, #9
 8007790:	b2db      	uxtb	r3, r3
 8007792:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_low| 0b00001101;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f043 030d 	orr.w	r3, r3, #13
 800779a:	b2db      	uxtb	r3, r3
 800779c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_low| 0b00001001;
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	f043 0309 	orr.w	r3, r3, #9
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, PCF8574T_ADDRESS, data_t, 4, 1000);
 80077a8:	f107 0208 	add.w	r2, r7, #8
 80077ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	2304      	movs	r3, #4
 80077b4:	214e      	movs	r1, #78	@ 0x4e
 80077b6:	4806      	ldr	r0, [pc, #24]	@ (80077d0 <LCD1602_WriteLetter+0x68>)
 80077b8:	f7fa fffc 	bl	80027b4 <HAL_I2C_Master_Transmit>
	cursor++;
 80077bc:	4b05      	ldr	r3, [pc, #20]	@ (80077d4 <LCD1602_WriteLetter+0x6c>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	3301      	adds	r3, #1
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	4b03      	ldr	r3, [pc, #12]	@ (80077d4 <LCD1602_WriteLetter+0x6c>)
 80077c6:	701a      	strb	r2, [r3, #0]
}
 80077c8:	bf00      	nop
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	2000070c 	.word	0x2000070c
 80077d4:	20000778 	.word	0x20000778

080077d8 <LCD1602_WriteText>:

void LCD1602_WriteText(char text[]) {
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < strlen(text); i++) {
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e009      	b.n	80077fa <LCD1602_WriteText+0x22>
		LCD1602_WriteLetter(text[i]);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4413      	add	r3, r2
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff ffba 	bl	8007768 <LCD1602_WriteLetter>
	for(int i = 0; i < strlen(text); i++) {
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7f8 fd38 	bl	8000270 <strlen>
 8007800:	4602      	mov	r2, r0
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	429a      	cmp	r2, r3
 8007806:	d8ee      	bhi.n	80077e6 <LCD1602_WriteText+0xe>
	}
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <LCD1602_WriteInst>:

void LCD1602_WriteInst(uint8_t data) {
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af02      	add	r7, sp, #8
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
	char data_up, data_low;
	uint8_t data_t[4];
	data_up = (data & 0b11110000);
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	f023 030f 	bic.w	r3, r3, #15
 8007824:	73fb      	strb	r3, [r7, #15]
	data_low = ((data<<4) & 0b11110000);
 8007826:	79fb      	ldrb	r3, [r7, #7]
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_up	| 0b00001100;  // backlight, enable, write, register select
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	f043 030c 	orr.w	r3, r3, #12
 8007832:	b2db      	uxtb	r3, r3
 8007834:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_up	| 0b00001000;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	f043 0308 	orr.w	r3, r3, #8
 800783c:	b2db      	uxtb	r3, r3
 800783e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_low| 0b00001100;
 8007840:	7bbb      	ldrb	r3, [r7, #14]
 8007842:	f043 030c 	orr.w	r3, r3, #12
 8007846:	b2db      	uxtb	r3, r3
 8007848:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_low| 0b00001000;
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	f043 0308 	orr.w	r3, r3, #8
 8007850:	b2db      	uxtb	r3, r3
 8007852:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(&hi2c1, PCF8574T_ADDRESS, data_t, 4, 1000);
 8007854:	f107 0208 	add.w	r2, r7, #8
 8007858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	2304      	movs	r3, #4
 8007860:	214e      	movs	r1, #78	@ 0x4e
 8007862:	4803      	ldr	r0, [pc, #12]	@ (8007870 <LCD1602_WriteInst+0x5c>)
 8007864:	f7fa ffa6 	bl	80027b4 <HAL_I2C_Master_Transmit>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	2000070c 	.word	0x2000070c

08007874 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b092      	sub	sp, #72	@ 0x48
 8007878:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 800787a:	4a36      	ldr	r2, [pc, #216]	@ (8007954 <Set_DeviceConnectable+0xe0>)
 800787c:	f107 031c 	add.w	r3, r7, #28
 8007880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007884:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8007888:	2302      	movs	r3, #2
 800788a:	703b      	strb	r3, [r7, #0]
 800788c:	230a      	movs	r3, #10
 800788e:	707b      	strb	r3, [r7, #1]
 8007890:	2300      	movs	r3, #0
 8007892:	70bb      	strb	r3, [r7, #2]
 8007894:	2308      	movs	r3, #8
 8007896:	70fb      	strb	r3, [r7, #3]
 8007898:	2309      	movs	r3, #9
 800789a:	713b      	strb	r3, [r7, #4]
 800789c:	2342      	movs	r3, #66	@ 0x42
 800789e:	717b      	strb	r3, [r7, #5]
 80078a0:	236c      	movs	r3, #108	@ 0x6c
 80078a2:	71bb      	strb	r3, [r7, #6]
 80078a4:	2375      	movs	r3, #117	@ 0x75
 80078a6:	71fb      	strb	r3, [r7, #7]
 80078a8:	2365      	movs	r3, #101	@ 0x65
 80078aa:	723b      	strb	r3, [r7, #8]
 80078ac:	234e      	movs	r3, #78	@ 0x4e
 80078ae:	727b      	strb	r3, [r7, #9]
 80078b0:	2352      	movs	r3, #82	@ 0x52
 80078b2:	72bb      	strb	r3, [r7, #10]
 80078b4:	2347      	movs	r3, #71	@ 0x47
 80078b6:	72fb      	strb	r3, [r7, #11]
 80078b8:	230d      	movs	r3, #13
 80078ba:	733b      	strb	r3, [r7, #12]
 80078bc:	23ff      	movs	r3, #255	@ 0xff
 80078be:	737b      	strb	r3, [r7, #13]
 80078c0:	2301      	movs	r3, #1
 80078c2:	73bb      	strb	r3, [r7, #14]
 80078c4:	2380      	movs	r3, #128	@ 0x80
 80078c6:	73fb      	strb	r3, [r7, #15]
 80078c8:	2300      	movs	r3, #0
 80078ca:	743b      	strb	r3, [r7, #16]
 80078cc:	23f4      	movs	r3, #244	@ 0xf4
 80078ce:	747b      	strb	r3, [r7, #17]
 80078d0:	2300      	movs	r3, #0
 80078d2:	74bb      	strb	r3, [r7, #18]
 80078d4:	2300      	movs	r3, #0
 80078d6:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 80078d8:	4b1f      	ldr	r3, [pc, #124]	@ (8007958 <Set_DeviceConnectable+0xe4>)
 80078da:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 80078dc:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 80078de:	4b1e      	ldr	r3, [pc, #120]	@ (8007958 <Set_DeviceConnectable+0xe4>)
 80078e0:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 80078e2:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 80078e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007958 <Set_DeviceConnectable+0xe4>)
 80078e6:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 80078e8:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 80078ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007958 <Set_DeviceConnectable+0xe4>)
 80078ec:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 80078ee:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 80078f0:	4b19      	ldr	r3, [pc, #100]	@ (8007958 <Set_DeviceConnectable+0xe4>)
 80078f2:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 80078f4:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 80078f6:	4b18      	ldr	r3, [pc, #96]	@ (8007958 <Set_DeviceConnectable+0xe4>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 80078fa:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 80078fc:	7cbb      	ldrb	r3, [r7, #18]
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	b2db      	uxtb	r3, r3
 8007904:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8007906:	2100      	movs	r1, #0
 8007908:	2000      	movs	r0, #0
 800790a:	f7fe fcd5 	bl	80062b8 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 800790e:	2300      	movs	r3, #0
 8007910:	9306      	str	r3, [sp, #24]
 8007912:	2300      	movs	r3, #0
 8007914:	9305      	str	r3, [sp, #20]
 8007916:	2300      	movs	r3, #0
 8007918:	9304      	str	r3, [sp, #16]
 800791a:	2300      	movs	r3, #0
 800791c:	9303      	str	r3, [sp, #12]
 800791e:	f107 031c 	add.w	r3, r7, #28
 8007922:	9302      	str	r3, [sp, #8]
 8007924:	2308      	movs	r3, #8
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	2300      	movs	r3, #0
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	2301      	movs	r3, #1
 800792e:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8007932:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8007936:	2000      	movs	r0, #0
 8007938:	f7fd ffef 	bl	800591a <aci_gap_set_discoverable>
 800793c:	4603      	mov	r3, r0
 800793e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8007942:	463b      	mov	r3, r7
 8007944:	4619      	mov	r1, r3
 8007946:	201a      	movs	r0, #26
 8007948:	f7fe f928 	bl	8005b9c <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 800794c:	bf00      	nop
 800794e:	3728      	adds	r7, #40	@ 0x28
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	0800c6a0 	.word	0x0800c6a0
 8007958:	200005d4 	.word	0x200005d4

0800795c <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	61fb      	str	r3, [r7, #28]
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	3301      	adds	r3, #1
 800796c:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type != HCI_EVENT_PKT)
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b04      	cmp	r3, #4
 8007974:	d133      	bne.n	80079de <user_notify+0x82>
    return;

  switch(event_pckt->evt){
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2bff      	cmp	r3, #255	@ 0xff
 800797c:	d01f      	beq.n	80079be <user_notify+0x62>
 800797e:	2bff      	cmp	r3, #255	@ 0xff
 8007980:	dc32      	bgt.n	80079e8 <user_notify+0x8c>
 8007982:	2b05      	cmp	r3, #5
 8007984:	d002      	beq.n	800798c <user_notify+0x30>
 8007986:	2b3e      	cmp	r3, #62	@ 0x3e
 8007988:	d003      	beq.n	8007992 <user_notify+0x36>
 800798a:	e02d      	b.n	80079e8 <user_notify+0x8c>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 800798c:	f000 f830 	bl	80079f0 <GAP_DisconnectionComplete_CB>
    }
    break;
 8007990:	e02a      	b.n	80079e8 <user_notify+0x8c>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	3302      	adds	r3, #2
 8007996:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d120      	bne.n	80079e2 <user_notify+0x86>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	1d5a      	adds	r2, r3, #5
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4619      	mov	r1, r3
 80079b4:	4610      	mov	r0, r2
 80079b6:	f000 f831 	bl	8007a1c <GAP_ConnectionComplete_CB>
        }
        break;
 80079ba:	bf00      	nop
      }
    }
    break;
 80079bc:	e011      	b.n	80079e2 <user_notify+0x86>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	3302      	adds	r3, #2
 80079c2:	617b      	str	r3, [r7, #20]
      switch(blue_evt->ecode){
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	f640 4314 	movw	r3, #3092	@ 0xc14
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d108      	bne.n	80079e6 <user_notify+0x8a>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3302      	adds	r3, #2
 80079d8:	613b      	str	r3, [r7, #16]
          //Read_Request_CB(pr->attr_handle);
        }
        break;
 80079da:	bf00      	nop
      }

    }
    break;
 80079dc:	e003      	b.n	80079e6 <user_notify+0x8a>
    return;
 80079de:	bf00      	nop
 80079e0:	e002      	b.n	80079e8 <user_notify+0x8c>
    break;
 80079e2:	bf00      	nop
 80079e4:	e000      	b.n	80079e8 <user_notify+0x8c>
    break;
 80079e6:	bf00      	nop
  }
}
 80079e8:	3720      	adds	r7, #32
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  connected = FALSE;
 80079f4:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <GAP_DisconnectionComplete_CB+0x20>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 80079fa:	4b06      	ldr	r3, [pc, #24]	@ (8007a14 <GAP_DisconnectionComplete_CB+0x24>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8007a00:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <GAP_DisconnectionComplete_CB+0x28>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
}
 8007a06:	bf00      	nop
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	20000780 	.word	0x20000780
 8007a14:	2000001a 	.word	0x2000001a
 8007a18:	2000077c 	.word	0x2000077c

08007a1c <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8007a28:	4b0a      	ldr	r3, [pc, #40]	@ (8007a54 <GAP_ConnectionComplete_CB+0x38>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8007a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8007a58 <GAP_ConnectionComplete_CB+0x3c>)
 8007a30:	887b      	ldrh	r3, [r7, #2]
 8007a32:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8007a34:	2305      	movs	r3, #5
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	e002      	b.n	8007a40 <GAP_ConnectionComplete_CB+0x24>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1f9      	bne.n	8007a3a <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	20000780 	.word	0x20000780
 8007a58:	2000077a 	.word	0x2000077a

08007a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a62:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa0 <HAL_MspInit+0x44>)
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	4a0e      	ldr	r2, [pc, #56]	@ (8007aa0 <HAL_MspInit+0x44>)
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	6193      	str	r3, [r2, #24]
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa0 <HAL_MspInit+0x44>)
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	607b      	str	r3, [r7, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a7a:	4b09      	ldr	r3, [pc, #36]	@ (8007aa0 <HAL_MspInit+0x44>)
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	4a08      	ldr	r2, [pc, #32]	@ (8007aa0 <HAL_MspInit+0x44>)
 8007a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a84:	61d3      	str	r3, [r2, #28]
 8007a86:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <HAL_MspInit+0x44>)
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007a92:	2007      	movs	r0, #7
 8007a94:	f7fa facc 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40021000 	.word	0x40021000

08007aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <NMI_Handler+0x4>

08007aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ab0:	bf00      	nop
 8007ab2:	e7fd      	b.n	8007ab0 <HardFault_Handler+0x4>

08007ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ab8:	bf00      	nop
 8007aba:	e7fd      	b.n	8007ab8 <MemManage_Handler+0x4>

08007abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <BusFault_Handler+0x4>

08007ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ac8:	bf00      	nop
 8007aca:	e7fd      	b.n	8007ac8 <UsageFault_Handler+0x4>

08007acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ad0:	bf00      	nop
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007ada:	b480      	push	{r7}
 8007adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ade:	bf00      	nop
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007aec:	bf00      	nop
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007afa:	f7f9 fa5f 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007afe:	bf00      	nop
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8007b08:	4802      	ldr	r0, [pc, #8]	@ (8007b14 <EXTI0_IRQHandler+0x10>)
 8007b0a:	f7fa fb01 	bl	8002110 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007b0e:	bf00      	nop
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000604 	.word	0x20000604

08007b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8007b1c:	4802      	ldr	r0, [pc, #8]	@ (8007b28 <EXTI15_10_IRQHandler+0x10>)
 8007b1e:	f7fa faf7 	bl	8002110 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007b22:	bf00      	nop
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000008 	.word	0x20000008

08007b2c <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8007b36:	4b12      	ldr	r3, [pc, #72]	@ (8007b80 <BSP_SPI2_Init+0x54>)
 8007b38:	4a12      	ldr	r2, [pc, #72]	@ (8007b84 <BSP_SPI2_Init+0x58>)
 8007b3a:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8007b3c:	4b12      	ldr	r3, [pc, #72]	@ (8007b88 <BSP_SPI2_Init+0x5c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	4911      	ldr	r1, [pc, #68]	@ (8007b88 <BSP_SPI2_Init+0x5c>)
 8007b44:	600a      	str	r2, [r1, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d114      	bne.n	8007b74 <BSP_SPI2_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8007b4a:	480d      	ldr	r0, [pc, #52]	@ (8007b80 <BSP_SPI2_Init+0x54>)
 8007b4c:	f7fd f8ab 	bl	8004ca6 <HAL_SPI_GetState>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10e      	bne.n	8007b74 <BSP_SPI2_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
 8007b56:	480a      	ldr	r0, [pc, #40]	@ (8007b80 <BSP_SPI2_Init+0x54>)
 8007b58:	f000 f882 	bl	8007c60 <SPI2_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d108      	bne.n	8007b74 <BSP_SPI2_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8007b62:	4807      	ldr	r0, [pc, #28]	@ (8007b80 <BSP_SPI2_Init+0x54>)
 8007b64:	f000 f83a 	bl	8007bdc <MX_SPI2_Init>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <BSP_SPI2_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8007b6e:	f06f 0307 	mvn.w	r3, #7
 8007b72:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8007b74:	687b      	ldr	r3, [r7, #4]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000784 	.word	0x20000784
 8007b84:	40003800 	.word	0x40003800
 8007b88:	200007e8 	.word	0x200007e8

08007b8c <BSP_SPI2_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007ba4:	9200      	str	r2, [sp, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	68f9      	ldr	r1, [r7, #12]
 8007baa:	4807      	ldr	r0, [pc, #28]	@ (8007bc8 <BSP_SPI2_SendRecv+0x3c>)
 8007bac:	f7fc fe59 	bl	8004862 <HAL_SPI_TransmitReceive>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <BSP_SPI2_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8007bb6:	f06f 0305 	mvn.w	r3, #5
 8007bba:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8007bbc:	697b      	ldr	r3, [r7, #20]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000784 	.word	0x20000784

08007bcc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007bd0:	f7f9 fa08 	bl	8000fe4 <HAL_GetTick>
 8007bd4:	4603      	mov	r3, r0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	bd80      	pop	{r7, pc}
	...

08007bdc <MX_SPI2_Init>:

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI2;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1c      	ldr	r2, [pc, #112]	@ (8007c5c <MX_SPI2_Init+0x80>)
 8007bec:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007bf4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007c02:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c16:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2218      	movs	r2, #24
 8007c1c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2207      	movs	r2, #7
 8007c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2208      	movs	r2, #8
 8007c40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fc fd58 	bl	80046f8 <HAL_SPI_Init>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <MX_SPI2_Init+0x76>
  {
    ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40003800 	.word	0x40003800

08007c60 <SPI2_MspInit>:

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	@ 0x28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007c68:	4b27      	ldr	r3, [pc, #156]	@ (8007d08 <SPI2_MspInit+0xa8>)
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	4a26      	ldr	r2, [pc, #152]	@ (8007d08 <SPI2_MspInit+0xa8>)
 8007c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c72:	61d3      	str	r3, [r2, #28]
 8007c74:	4b24      	ldr	r3, [pc, #144]	@ (8007d08 <SPI2_MspInit+0xa8>)
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c80:	4b21      	ldr	r3, [pc, #132]	@ (8007d08 <SPI2_MspInit+0xa8>)
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	4a20      	ldr	r2, [pc, #128]	@ (8007d08 <SPI2_MspInit+0xa8>)
 8007c86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c8a:	6153      	str	r3, [r2, #20]
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007d08 <SPI2_MspInit+0xa8>)
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8007c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8007caa:	2305      	movs	r3, #5
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007cae:	f107 0314 	add.w	r3, r7, #20
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4815      	ldr	r0, [pc, #84]	@ (8007d0c <SPI2_MspInit+0xac>)
 8007cb6:	f7fa fa5d 	bl	8002174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8007cba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8007ccc:	2305      	movs	r3, #5
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	480d      	ldr	r0, [pc, #52]	@ (8007d0c <SPI2_MspInit+0xac>)
 8007cd8:	f7fa fa4c 	bl	8002174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8007cdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007cea:	2303      	movs	r3, #3
 8007cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8007cee:	2305      	movs	r3, #5
 8007cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007cf2:	f107 0314 	add.w	r3, r7, #20
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4804      	ldr	r0, [pc, #16]	@ (8007d0c <SPI2_MspInit+0xac>)
 8007cfa:	f7fa fa3b 	bl	8002174 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8007cfe:	bf00      	nop
 8007d00:	3728      	adds	r7, #40	@ 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	48000400 	.word	0x48000400

08007d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
  return 1;
 8007d14:	2301      	movs	r3, #1
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <_kill>:

int _kill(int pid, int sig)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007d2a:	f001 f905 	bl	8008f38 <__errno>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2216      	movs	r2, #22
 8007d32:	601a      	str	r2, [r3, #0]
  return -1;
 8007d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <_exit>:

void _exit (int status)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007d48:	f04f 31ff 	mov.w	r1, #4294967295
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ffe7 	bl	8007d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <_exit+0x12>

08007d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
 8007d66:	e00a      	b.n	8007d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007d68:	f3af 8000 	nop.w
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	60ba      	str	r2, [r7, #8]
 8007d74:	b2ca      	uxtb	r2, r1
 8007d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	dbf0      	blt.n	8007d68 <_read+0x12>
  }

  return len;
 8007d86:	687b      	ldr	r3, [r7, #4]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e009      	b.n	8007db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	60ba      	str	r2, [r7, #8]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7f9 f860 	bl	8000e70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	3301      	adds	r3, #1
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	dbf1      	blt.n	8007da2 <_write+0x12>
  }
  return len;
 8007dbe:	687b      	ldr	r3, [r7, #4]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <_close>:

int _close(int file)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007df0:	605a      	str	r2, [r3, #4]
  return 0;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <_isatty>:

int _isatty(int file)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007e08:	2301      	movs	r3, #1
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007e38:	4a14      	ldr	r2, [pc, #80]	@ (8007e8c <_sbrk+0x5c>)
 8007e3a:	4b15      	ldr	r3, [pc, #84]	@ (8007e90 <_sbrk+0x60>)
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007e44:	4b13      	ldr	r3, [pc, #76]	@ (8007e94 <_sbrk+0x64>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007e4c:	4b11      	ldr	r3, [pc, #68]	@ (8007e94 <_sbrk+0x64>)
 8007e4e:	4a12      	ldr	r2, [pc, #72]	@ (8007e98 <_sbrk+0x68>)
 8007e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007e52:	4b10      	ldr	r3, [pc, #64]	@ (8007e94 <_sbrk+0x64>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4413      	add	r3, r2
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d207      	bcs.n	8007e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007e60:	f001 f86a 	bl	8008f38 <__errno>
 8007e64:	4603      	mov	r3, r0
 8007e66:	220c      	movs	r2, #12
 8007e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6e:	e009      	b.n	8007e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007e70:	4b08      	ldr	r3, [pc, #32]	@ (8007e94 <_sbrk+0x64>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007e76:	4b07      	ldr	r3, [pc, #28]	@ (8007e94 <_sbrk+0x64>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	4a05      	ldr	r2, [pc, #20]	@ (8007e94 <_sbrk+0x64>)
 8007e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007e82:	68fb      	ldr	r3, [r7, #12]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20004000 	.word	0x20004000
 8007e90:	00000400 	.word	0x00000400
 8007e94:	200007ec 	.word	0x200007ec
 8007e98:	20000940 	.word	0x20000940

08007e9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ea0:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <SystemInit+0x20>)
 8007ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ea6:	4a05      	ldr	r2, [pc, #20]	@ (8007ebc <SystemInit+0x20>)
 8007ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007eb0:	bf00      	nop
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	e000ed00 	.word	0xe000ed00

08007ec0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
	Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007ef8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8007ec4:	f7ff ffea 	bl	8007e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ec8:	480c      	ldr	r0, [pc, #48]	@ (8007efc <LoopForever+0x6>)
  ldr r1, =_edata
 8007eca:	490d      	ldr	r1, [pc, #52]	@ (8007f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8007f04 <LoopForever+0xe>)
  movs r3, #0
 8007ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ed0:	e002      	b.n	8007ed8 <LoopCopyDataInit>

08007ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ed6:	3304      	adds	r3, #4

08007ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007edc:	d3f9      	bcc.n	8007ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ede:	4a0a      	ldr	r2, [pc, #40]	@ (8007f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8007f0c <LoopForever+0x16>)
  movs r3, #0
 8007ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ee4:	e001      	b.n	8007eea <LoopFillZerobss>

08007ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ee8:	3204      	adds	r2, #4

08007eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007eec:	d3fb      	bcc.n	8007ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007eee:	f001 f829 	bl	8008f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007ef2:	f7ff fa85 	bl	8007400 <main>

08007ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8007ef6:	e7fe      	b.n	8007ef6 <LoopForever>
	Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007ef8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8007efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f00:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8007f04:	0800cb7c 	.word	0x0800cb7c
  ldr r2, =_sbss
 8007f08:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8007f0c:	2000093c 	.word	0x2000093c

08007f10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007f10:	e7fe      	b.n	8007f10 <ADC1_IRQHandler>
	...

08007f14 <srand>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4b10      	ldr	r3, [pc, #64]	@ (8007f58 <srand+0x44>)
 8007f18:	681d      	ldr	r5, [r3, #0]
 8007f1a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	b9b3      	cbnz	r3, 8007f4e <srand+0x3a>
 8007f20:	2018      	movs	r0, #24
 8007f22:	f001 feff 	bl	8009d24 <malloc>
 8007f26:	4602      	mov	r2, r0
 8007f28:	6328      	str	r0, [r5, #48]	@ 0x30
 8007f2a:	b920      	cbnz	r0, 8007f36 <srand+0x22>
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f5c <srand+0x48>)
 8007f2e:	480c      	ldr	r0, [pc, #48]	@ (8007f60 <srand+0x4c>)
 8007f30:	2146      	movs	r1, #70	@ 0x46
 8007f32:	f001 f843 	bl	8008fbc <__assert_func>
 8007f36:	490b      	ldr	r1, [pc, #44]	@ (8007f64 <srand+0x50>)
 8007f38:	4b0b      	ldr	r3, [pc, #44]	@ (8007f68 <srand+0x54>)
 8007f3a:	e9c0 1300 	strd	r1, r3, [r0]
 8007f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f6c <srand+0x58>)
 8007f40:	6083      	str	r3, [r0, #8]
 8007f42:	230b      	movs	r3, #11
 8007f44:	8183      	strh	r3, [r0, #12]
 8007f46:	2100      	movs	r1, #0
 8007f48:	2001      	movs	r0, #1
 8007f4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007f4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8007f50:	2200      	movs	r2, #0
 8007f52:	611c      	str	r4, [r3, #16]
 8007f54:	615a      	str	r2, [r3, #20]
 8007f56:	bd38      	pop	{r3, r4, r5, pc}
 8007f58:	2000002c 	.word	0x2000002c
 8007f5c:	0800c6e4 	.word	0x0800c6e4
 8007f60:	0800c6fb 	.word	0x0800c6fb
 8007f64:	abcd330e 	.word	0xabcd330e
 8007f68:	e66d1234 	.word	0xe66d1234
 8007f6c:	0005deec 	.word	0x0005deec

08007f70 <__cvt>:
 8007f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	ec57 6b10 	vmov	r6, r7, d0
 8007f78:	2f00      	cmp	r7, #0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	463b      	mov	r3, r7
 8007f80:	bfbb      	ittet	lt
 8007f82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007f86:	461f      	movlt	r7, r3
 8007f88:	2300      	movge	r3, #0
 8007f8a:	232d      	movlt	r3, #45	@ 0x2d
 8007f8c:	700b      	strb	r3, [r1, #0]
 8007f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f94:	4691      	mov	r9, r2
 8007f96:	f023 0820 	bic.w	r8, r3, #32
 8007f9a:	bfbc      	itt	lt
 8007f9c:	4632      	movlt	r2, r6
 8007f9e:	4616      	movlt	r6, r2
 8007fa0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007fa4:	d005      	beq.n	8007fb2 <__cvt+0x42>
 8007fa6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007faa:	d100      	bne.n	8007fae <__cvt+0x3e>
 8007fac:	3401      	adds	r4, #1
 8007fae:	2102      	movs	r1, #2
 8007fb0:	e000      	b.n	8007fb4 <__cvt+0x44>
 8007fb2:	2103      	movs	r1, #3
 8007fb4:	ab03      	add	r3, sp, #12
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	ab02      	add	r3, sp, #8
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	ec47 6b10 	vmov	d0, r6, r7
 8007fc0:	4653      	mov	r3, sl
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	f001 f8a0 	bl	8009108 <_dtoa_r>
 8007fc8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007fcc:	4605      	mov	r5, r0
 8007fce:	d119      	bne.n	8008004 <__cvt+0x94>
 8007fd0:	f019 0f01 	tst.w	r9, #1
 8007fd4:	d00e      	beq.n	8007ff4 <__cvt+0x84>
 8007fd6:	eb00 0904 	add.w	r9, r0, r4
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4630      	mov	r0, r6
 8007fe0:	4639      	mov	r1, r7
 8007fe2:	f7f8 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fe6:	b108      	cbz	r0, 8007fec <__cvt+0x7c>
 8007fe8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fec:	2230      	movs	r2, #48	@ 0x30
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	454b      	cmp	r3, r9
 8007ff2:	d31e      	bcc.n	8008032 <__cvt+0xc2>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ff8:	1b5b      	subs	r3, r3, r5
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	b004      	add	sp, #16
 8008000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008004:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008008:	eb00 0904 	add.w	r9, r0, r4
 800800c:	d1e5      	bne.n	8007fda <__cvt+0x6a>
 800800e:	7803      	ldrb	r3, [r0, #0]
 8008010:	2b30      	cmp	r3, #48	@ 0x30
 8008012:	d10a      	bne.n	800802a <__cvt+0xba>
 8008014:	2200      	movs	r2, #0
 8008016:	2300      	movs	r3, #0
 8008018:	4630      	mov	r0, r6
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008020:	b918      	cbnz	r0, 800802a <__cvt+0xba>
 8008022:	f1c4 0401 	rsb	r4, r4, #1
 8008026:	f8ca 4000 	str.w	r4, [sl]
 800802a:	f8da 3000 	ldr.w	r3, [sl]
 800802e:	4499      	add	r9, r3
 8008030:	e7d3      	b.n	8007fda <__cvt+0x6a>
 8008032:	1c59      	adds	r1, r3, #1
 8008034:	9103      	str	r1, [sp, #12]
 8008036:	701a      	strb	r2, [r3, #0]
 8008038:	e7d9      	b.n	8007fee <__cvt+0x7e>

0800803a <__exponent>:
 800803a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800803c:	2900      	cmp	r1, #0
 800803e:	bfba      	itte	lt
 8008040:	4249      	neglt	r1, r1
 8008042:	232d      	movlt	r3, #45	@ 0x2d
 8008044:	232b      	movge	r3, #43	@ 0x2b
 8008046:	2909      	cmp	r1, #9
 8008048:	7002      	strb	r2, [r0, #0]
 800804a:	7043      	strb	r3, [r0, #1]
 800804c:	dd29      	ble.n	80080a2 <__exponent+0x68>
 800804e:	f10d 0307 	add.w	r3, sp, #7
 8008052:	461d      	mov	r5, r3
 8008054:	270a      	movs	r7, #10
 8008056:	461a      	mov	r2, r3
 8008058:	fbb1 f6f7 	udiv	r6, r1, r7
 800805c:	fb07 1416 	mls	r4, r7, r6, r1
 8008060:	3430      	adds	r4, #48	@ 0x30
 8008062:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008066:	460c      	mov	r4, r1
 8008068:	2c63      	cmp	r4, #99	@ 0x63
 800806a:	f103 33ff 	add.w	r3, r3, #4294967295
 800806e:	4631      	mov	r1, r6
 8008070:	dcf1      	bgt.n	8008056 <__exponent+0x1c>
 8008072:	3130      	adds	r1, #48	@ 0x30
 8008074:	1e94      	subs	r4, r2, #2
 8008076:	f803 1c01 	strb.w	r1, [r3, #-1]
 800807a:	1c41      	adds	r1, r0, #1
 800807c:	4623      	mov	r3, r4
 800807e:	42ab      	cmp	r3, r5
 8008080:	d30a      	bcc.n	8008098 <__exponent+0x5e>
 8008082:	f10d 0309 	add.w	r3, sp, #9
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	42ac      	cmp	r4, r5
 800808a:	bf88      	it	hi
 800808c:	2300      	movhi	r3, #0
 800808e:	3302      	adds	r3, #2
 8008090:	4403      	add	r3, r0
 8008092:	1a18      	subs	r0, r3, r0
 8008094:	b003      	add	sp, #12
 8008096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008098:	f813 6b01 	ldrb.w	r6, [r3], #1
 800809c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80080a0:	e7ed      	b.n	800807e <__exponent+0x44>
 80080a2:	2330      	movs	r3, #48	@ 0x30
 80080a4:	3130      	adds	r1, #48	@ 0x30
 80080a6:	7083      	strb	r3, [r0, #2]
 80080a8:	70c1      	strb	r1, [r0, #3]
 80080aa:	1d03      	adds	r3, r0, #4
 80080ac:	e7f1      	b.n	8008092 <__exponent+0x58>
	...

080080b0 <_printf_float>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	b08d      	sub	sp, #52	@ 0x34
 80080b6:	460c      	mov	r4, r1
 80080b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80080bc:	4616      	mov	r6, r2
 80080be:	461f      	mov	r7, r3
 80080c0:	4605      	mov	r5, r0
 80080c2:	f000 feef 	bl	8008ea4 <_localeconv_r>
 80080c6:	6803      	ldr	r3, [r0, #0]
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f8 f8d0 	bl	8000270 <strlen>
 80080d0:	2300      	movs	r3, #0
 80080d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d4:	f8d8 3000 	ldr.w	r3, [r8]
 80080d8:	9005      	str	r0, [sp, #20]
 80080da:	3307      	adds	r3, #7
 80080dc:	f023 0307 	bic.w	r3, r3, #7
 80080e0:	f103 0208 	add.w	r2, r3, #8
 80080e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080e8:	f8d4 b000 	ldr.w	fp, [r4]
 80080ec:	f8c8 2000 	str.w	r2, [r8]
 80080f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80080f8:	9307      	str	r3, [sp, #28]
 80080fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80080fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008106:	4b9c      	ldr	r3, [pc, #624]	@ (8008378 <_printf_float+0x2c8>)
 8008108:	f04f 32ff 	mov.w	r2, #4294967295
 800810c:	f7f8 fd0e 	bl	8000b2c <__aeabi_dcmpun>
 8008110:	bb70      	cbnz	r0, 8008170 <_printf_float+0xc0>
 8008112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008116:	4b98      	ldr	r3, [pc, #608]	@ (8008378 <_printf_float+0x2c8>)
 8008118:	f04f 32ff 	mov.w	r2, #4294967295
 800811c:	f7f8 fce8 	bl	8000af0 <__aeabi_dcmple>
 8008120:	bb30      	cbnz	r0, 8008170 <_printf_float+0xc0>
 8008122:	2200      	movs	r2, #0
 8008124:	2300      	movs	r3, #0
 8008126:	4640      	mov	r0, r8
 8008128:	4649      	mov	r1, r9
 800812a:	f7f8 fcd7 	bl	8000adc <__aeabi_dcmplt>
 800812e:	b110      	cbz	r0, 8008136 <_printf_float+0x86>
 8008130:	232d      	movs	r3, #45	@ 0x2d
 8008132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008136:	4a91      	ldr	r2, [pc, #580]	@ (800837c <_printf_float+0x2cc>)
 8008138:	4b91      	ldr	r3, [pc, #580]	@ (8008380 <_printf_float+0x2d0>)
 800813a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800813e:	bf94      	ite	ls
 8008140:	4690      	movls	r8, r2
 8008142:	4698      	movhi	r8, r3
 8008144:	2303      	movs	r3, #3
 8008146:	6123      	str	r3, [r4, #16]
 8008148:	f02b 0304 	bic.w	r3, fp, #4
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	f04f 0900 	mov.w	r9, #0
 8008152:	9700      	str	r7, [sp, #0]
 8008154:	4633      	mov	r3, r6
 8008156:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008158:	4621      	mov	r1, r4
 800815a:	4628      	mov	r0, r5
 800815c:	f000 f9d2 	bl	8008504 <_printf_common>
 8008160:	3001      	adds	r0, #1
 8008162:	f040 808d 	bne.w	8008280 <_printf_float+0x1d0>
 8008166:	f04f 30ff 	mov.w	r0, #4294967295
 800816a:	b00d      	add	sp, #52	@ 0x34
 800816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	4640      	mov	r0, r8
 8008176:	4649      	mov	r1, r9
 8008178:	f7f8 fcd8 	bl	8000b2c <__aeabi_dcmpun>
 800817c:	b140      	cbz	r0, 8008190 <_printf_float+0xe0>
 800817e:	464b      	mov	r3, r9
 8008180:	2b00      	cmp	r3, #0
 8008182:	bfbc      	itt	lt
 8008184:	232d      	movlt	r3, #45	@ 0x2d
 8008186:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800818a:	4a7e      	ldr	r2, [pc, #504]	@ (8008384 <_printf_float+0x2d4>)
 800818c:	4b7e      	ldr	r3, [pc, #504]	@ (8008388 <_printf_float+0x2d8>)
 800818e:	e7d4      	b.n	800813a <_printf_float+0x8a>
 8008190:	6863      	ldr	r3, [r4, #4]
 8008192:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008196:	9206      	str	r2, [sp, #24]
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	d13b      	bne.n	8008214 <_printf_float+0x164>
 800819c:	2306      	movs	r3, #6
 800819e:	6063      	str	r3, [r4, #4]
 80081a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80081a4:	2300      	movs	r3, #0
 80081a6:	6022      	str	r2, [r4, #0]
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80081ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80081b0:	ab09      	add	r3, sp, #36	@ 0x24
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	6861      	ldr	r1, [r4, #4]
 80081b6:	ec49 8b10 	vmov	d0, r8, r9
 80081ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80081be:	4628      	mov	r0, r5
 80081c0:	f7ff fed6 	bl	8007f70 <__cvt>
 80081c4:	9b06      	ldr	r3, [sp, #24]
 80081c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081c8:	2b47      	cmp	r3, #71	@ 0x47
 80081ca:	4680      	mov	r8, r0
 80081cc:	d129      	bne.n	8008222 <_printf_float+0x172>
 80081ce:	1cc8      	adds	r0, r1, #3
 80081d0:	db02      	blt.n	80081d8 <_printf_float+0x128>
 80081d2:	6863      	ldr	r3, [r4, #4]
 80081d4:	4299      	cmp	r1, r3
 80081d6:	dd41      	ble.n	800825c <_printf_float+0x1ac>
 80081d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80081dc:	fa5f fa8a 	uxtb.w	sl, sl
 80081e0:	3901      	subs	r1, #1
 80081e2:	4652      	mov	r2, sl
 80081e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80081e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80081ea:	f7ff ff26 	bl	800803a <__exponent>
 80081ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081f0:	1813      	adds	r3, r2, r0
 80081f2:	2a01      	cmp	r2, #1
 80081f4:	4681      	mov	r9, r0
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	dc02      	bgt.n	8008200 <_printf_float+0x150>
 80081fa:	6822      	ldr	r2, [r4, #0]
 80081fc:	07d2      	lsls	r2, r2, #31
 80081fe:	d501      	bpl.n	8008204 <_printf_float+0x154>
 8008200:	3301      	adds	r3, #1
 8008202:	6123      	str	r3, [r4, #16]
 8008204:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0a2      	beq.n	8008152 <_printf_float+0xa2>
 800820c:	232d      	movs	r3, #45	@ 0x2d
 800820e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008212:	e79e      	b.n	8008152 <_printf_float+0xa2>
 8008214:	9a06      	ldr	r2, [sp, #24]
 8008216:	2a47      	cmp	r2, #71	@ 0x47
 8008218:	d1c2      	bne.n	80081a0 <_printf_float+0xf0>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1c0      	bne.n	80081a0 <_printf_float+0xf0>
 800821e:	2301      	movs	r3, #1
 8008220:	e7bd      	b.n	800819e <_printf_float+0xee>
 8008222:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008226:	d9db      	bls.n	80081e0 <_printf_float+0x130>
 8008228:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800822c:	d118      	bne.n	8008260 <_printf_float+0x1b0>
 800822e:	2900      	cmp	r1, #0
 8008230:	6863      	ldr	r3, [r4, #4]
 8008232:	dd0b      	ble.n	800824c <_printf_float+0x19c>
 8008234:	6121      	str	r1, [r4, #16]
 8008236:	b913      	cbnz	r3, 800823e <_printf_float+0x18e>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	07d0      	lsls	r0, r2, #31
 800823c:	d502      	bpl.n	8008244 <_printf_float+0x194>
 800823e:	3301      	adds	r3, #1
 8008240:	440b      	add	r3, r1
 8008242:	6123      	str	r3, [r4, #16]
 8008244:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008246:	f04f 0900 	mov.w	r9, #0
 800824a:	e7db      	b.n	8008204 <_printf_float+0x154>
 800824c:	b913      	cbnz	r3, 8008254 <_printf_float+0x1a4>
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	07d2      	lsls	r2, r2, #31
 8008252:	d501      	bpl.n	8008258 <_printf_float+0x1a8>
 8008254:	3302      	adds	r3, #2
 8008256:	e7f4      	b.n	8008242 <_printf_float+0x192>
 8008258:	2301      	movs	r3, #1
 800825a:	e7f2      	b.n	8008242 <_printf_float+0x192>
 800825c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008262:	4299      	cmp	r1, r3
 8008264:	db05      	blt.n	8008272 <_printf_float+0x1c2>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	6121      	str	r1, [r4, #16]
 800826a:	07d8      	lsls	r0, r3, #31
 800826c:	d5ea      	bpl.n	8008244 <_printf_float+0x194>
 800826e:	1c4b      	adds	r3, r1, #1
 8008270:	e7e7      	b.n	8008242 <_printf_float+0x192>
 8008272:	2900      	cmp	r1, #0
 8008274:	bfd4      	ite	le
 8008276:	f1c1 0202 	rsble	r2, r1, #2
 800827a:	2201      	movgt	r2, #1
 800827c:	4413      	add	r3, r2
 800827e:	e7e0      	b.n	8008242 <_printf_float+0x192>
 8008280:	6823      	ldr	r3, [r4, #0]
 8008282:	055a      	lsls	r2, r3, #21
 8008284:	d407      	bmi.n	8008296 <_printf_float+0x1e6>
 8008286:	6923      	ldr	r3, [r4, #16]
 8008288:	4642      	mov	r2, r8
 800828a:	4631      	mov	r1, r6
 800828c:	4628      	mov	r0, r5
 800828e:	47b8      	blx	r7
 8008290:	3001      	adds	r0, #1
 8008292:	d12b      	bne.n	80082ec <_printf_float+0x23c>
 8008294:	e767      	b.n	8008166 <_printf_float+0xb6>
 8008296:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800829a:	f240 80dd 	bls.w	8008458 <_printf_float+0x3a8>
 800829e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082a2:	2200      	movs	r2, #0
 80082a4:	2300      	movs	r3, #0
 80082a6:	f7f8 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d033      	beq.n	8008316 <_printf_float+0x266>
 80082ae:	4a37      	ldr	r2, [pc, #220]	@ (800838c <_printf_float+0x2dc>)
 80082b0:	2301      	movs	r3, #1
 80082b2:	4631      	mov	r1, r6
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b8      	blx	r7
 80082b8:	3001      	adds	r0, #1
 80082ba:	f43f af54 	beq.w	8008166 <_printf_float+0xb6>
 80082be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80082c2:	4543      	cmp	r3, r8
 80082c4:	db02      	blt.n	80082cc <_printf_float+0x21c>
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	07d8      	lsls	r0, r3, #31
 80082ca:	d50f      	bpl.n	80082ec <_printf_float+0x23c>
 80082cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082d0:	4631      	mov	r1, r6
 80082d2:	4628      	mov	r0, r5
 80082d4:	47b8      	blx	r7
 80082d6:	3001      	adds	r0, #1
 80082d8:	f43f af45 	beq.w	8008166 <_printf_float+0xb6>
 80082dc:	f04f 0900 	mov.w	r9, #0
 80082e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80082e4:	f104 0a1a 	add.w	sl, r4, #26
 80082e8:	45c8      	cmp	r8, r9
 80082ea:	dc09      	bgt.n	8008300 <_printf_float+0x250>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	079b      	lsls	r3, r3, #30
 80082f0:	f100 8103 	bmi.w	80084fa <_printf_float+0x44a>
 80082f4:	68e0      	ldr	r0, [r4, #12]
 80082f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082f8:	4298      	cmp	r0, r3
 80082fa:	bfb8      	it	lt
 80082fc:	4618      	movlt	r0, r3
 80082fe:	e734      	b.n	800816a <_printf_float+0xba>
 8008300:	2301      	movs	r3, #1
 8008302:	4652      	mov	r2, sl
 8008304:	4631      	mov	r1, r6
 8008306:	4628      	mov	r0, r5
 8008308:	47b8      	blx	r7
 800830a:	3001      	adds	r0, #1
 800830c:	f43f af2b 	beq.w	8008166 <_printf_float+0xb6>
 8008310:	f109 0901 	add.w	r9, r9, #1
 8008314:	e7e8      	b.n	80082e8 <_printf_float+0x238>
 8008316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	dc39      	bgt.n	8008390 <_printf_float+0x2e0>
 800831c:	4a1b      	ldr	r2, [pc, #108]	@ (800838c <_printf_float+0x2dc>)
 800831e:	2301      	movs	r3, #1
 8008320:	4631      	mov	r1, r6
 8008322:	4628      	mov	r0, r5
 8008324:	47b8      	blx	r7
 8008326:	3001      	adds	r0, #1
 8008328:	f43f af1d 	beq.w	8008166 <_printf_float+0xb6>
 800832c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008330:	ea59 0303 	orrs.w	r3, r9, r3
 8008334:	d102      	bne.n	800833c <_printf_float+0x28c>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	07d9      	lsls	r1, r3, #31
 800833a:	d5d7      	bpl.n	80082ec <_printf_float+0x23c>
 800833c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008340:	4631      	mov	r1, r6
 8008342:	4628      	mov	r0, r5
 8008344:	47b8      	blx	r7
 8008346:	3001      	adds	r0, #1
 8008348:	f43f af0d 	beq.w	8008166 <_printf_float+0xb6>
 800834c:	f04f 0a00 	mov.w	sl, #0
 8008350:	f104 0b1a 	add.w	fp, r4, #26
 8008354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008356:	425b      	negs	r3, r3
 8008358:	4553      	cmp	r3, sl
 800835a:	dc01      	bgt.n	8008360 <_printf_float+0x2b0>
 800835c:	464b      	mov	r3, r9
 800835e:	e793      	b.n	8008288 <_printf_float+0x1d8>
 8008360:	2301      	movs	r3, #1
 8008362:	465a      	mov	r2, fp
 8008364:	4631      	mov	r1, r6
 8008366:	4628      	mov	r0, r5
 8008368:	47b8      	blx	r7
 800836a:	3001      	adds	r0, #1
 800836c:	f43f aefb 	beq.w	8008166 <_printf_float+0xb6>
 8008370:	f10a 0a01 	add.w	sl, sl, #1
 8008374:	e7ee      	b.n	8008354 <_printf_float+0x2a4>
 8008376:	bf00      	nop
 8008378:	7fefffff 	.word	0x7fefffff
 800837c:	0800c753 	.word	0x0800c753
 8008380:	0800c757 	.word	0x0800c757
 8008384:	0800c75b 	.word	0x0800c75b
 8008388:	0800c75f 	.word	0x0800c75f
 800838c:	0800c763 	.word	0x0800c763
 8008390:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008392:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008396:	4553      	cmp	r3, sl
 8008398:	bfa8      	it	ge
 800839a:	4653      	movge	r3, sl
 800839c:	2b00      	cmp	r3, #0
 800839e:	4699      	mov	r9, r3
 80083a0:	dc36      	bgt.n	8008410 <_printf_float+0x360>
 80083a2:	f04f 0b00 	mov.w	fp, #0
 80083a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083aa:	f104 021a 	add.w	r2, r4, #26
 80083ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80083b0:	9306      	str	r3, [sp, #24]
 80083b2:	eba3 0309 	sub.w	r3, r3, r9
 80083b6:	455b      	cmp	r3, fp
 80083b8:	dc31      	bgt.n	800841e <_printf_float+0x36e>
 80083ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083bc:	459a      	cmp	sl, r3
 80083be:	dc3a      	bgt.n	8008436 <_printf_float+0x386>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	07da      	lsls	r2, r3, #31
 80083c4:	d437      	bmi.n	8008436 <_printf_float+0x386>
 80083c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c8:	ebaa 0903 	sub.w	r9, sl, r3
 80083cc:	9b06      	ldr	r3, [sp, #24]
 80083ce:	ebaa 0303 	sub.w	r3, sl, r3
 80083d2:	4599      	cmp	r9, r3
 80083d4:	bfa8      	it	ge
 80083d6:	4699      	movge	r9, r3
 80083d8:	f1b9 0f00 	cmp.w	r9, #0
 80083dc:	dc33      	bgt.n	8008446 <_printf_float+0x396>
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083e6:	f104 0b1a 	add.w	fp, r4, #26
 80083ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ec:	ebaa 0303 	sub.w	r3, sl, r3
 80083f0:	eba3 0309 	sub.w	r3, r3, r9
 80083f4:	4543      	cmp	r3, r8
 80083f6:	f77f af79 	ble.w	80082ec <_printf_float+0x23c>
 80083fa:	2301      	movs	r3, #1
 80083fc:	465a      	mov	r2, fp
 80083fe:	4631      	mov	r1, r6
 8008400:	4628      	mov	r0, r5
 8008402:	47b8      	blx	r7
 8008404:	3001      	adds	r0, #1
 8008406:	f43f aeae 	beq.w	8008166 <_printf_float+0xb6>
 800840a:	f108 0801 	add.w	r8, r8, #1
 800840e:	e7ec      	b.n	80083ea <_printf_float+0x33a>
 8008410:	4642      	mov	r2, r8
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	47b8      	blx	r7
 8008418:	3001      	adds	r0, #1
 800841a:	d1c2      	bne.n	80083a2 <_printf_float+0x2f2>
 800841c:	e6a3      	b.n	8008166 <_printf_float+0xb6>
 800841e:	2301      	movs	r3, #1
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	9206      	str	r2, [sp, #24]
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	f43f ae9c 	beq.w	8008166 <_printf_float+0xb6>
 800842e:	9a06      	ldr	r2, [sp, #24]
 8008430:	f10b 0b01 	add.w	fp, fp, #1
 8008434:	e7bb      	b.n	80083ae <_printf_float+0x2fe>
 8008436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800843a:	4631      	mov	r1, r6
 800843c:	4628      	mov	r0, r5
 800843e:	47b8      	blx	r7
 8008440:	3001      	adds	r0, #1
 8008442:	d1c0      	bne.n	80083c6 <_printf_float+0x316>
 8008444:	e68f      	b.n	8008166 <_printf_float+0xb6>
 8008446:	9a06      	ldr	r2, [sp, #24]
 8008448:	464b      	mov	r3, r9
 800844a:	4442      	add	r2, r8
 800844c:	4631      	mov	r1, r6
 800844e:	4628      	mov	r0, r5
 8008450:	47b8      	blx	r7
 8008452:	3001      	adds	r0, #1
 8008454:	d1c3      	bne.n	80083de <_printf_float+0x32e>
 8008456:	e686      	b.n	8008166 <_printf_float+0xb6>
 8008458:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800845c:	f1ba 0f01 	cmp.w	sl, #1
 8008460:	dc01      	bgt.n	8008466 <_printf_float+0x3b6>
 8008462:	07db      	lsls	r3, r3, #31
 8008464:	d536      	bpl.n	80084d4 <_printf_float+0x424>
 8008466:	2301      	movs	r3, #1
 8008468:	4642      	mov	r2, r8
 800846a:	4631      	mov	r1, r6
 800846c:	4628      	mov	r0, r5
 800846e:	47b8      	blx	r7
 8008470:	3001      	adds	r0, #1
 8008472:	f43f ae78 	beq.w	8008166 <_printf_float+0xb6>
 8008476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	47b8      	blx	r7
 8008480:	3001      	adds	r0, #1
 8008482:	f43f ae70 	beq.w	8008166 <_printf_float+0xb6>
 8008486:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800848a:	2200      	movs	r2, #0
 800848c:	2300      	movs	r3, #0
 800848e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008492:	f7f8 fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 8008496:	b9c0      	cbnz	r0, 80084ca <_printf_float+0x41a>
 8008498:	4653      	mov	r3, sl
 800849a:	f108 0201 	add.w	r2, r8, #1
 800849e:	4631      	mov	r1, r6
 80084a0:	4628      	mov	r0, r5
 80084a2:	47b8      	blx	r7
 80084a4:	3001      	adds	r0, #1
 80084a6:	d10c      	bne.n	80084c2 <_printf_float+0x412>
 80084a8:	e65d      	b.n	8008166 <_printf_float+0xb6>
 80084aa:	2301      	movs	r3, #1
 80084ac:	465a      	mov	r2, fp
 80084ae:	4631      	mov	r1, r6
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b8      	blx	r7
 80084b4:	3001      	adds	r0, #1
 80084b6:	f43f ae56 	beq.w	8008166 <_printf_float+0xb6>
 80084ba:	f108 0801 	add.w	r8, r8, #1
 80084be:	45d0      	cmp	r8, sl
 80084c0:	dbf3      	blt.n	80084aa <_printf_float+0x3fa>
 80084c2:	464b      	mov	r3, r9
 80084c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80084c8:	e6df      	b.n	800828a <_printf_float+0x1da>
 80084ca:	f04f 0800 	mov.w	r8, #0
 80084ce:	f104 0b1a 	add.w	fp, r4, #26
 80084d2:	e7f4      	b.n	80084be <_printf_float+0x40e>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4642      	mov	r2, r8
 80084d8:	e7e1      	b.n	800849e <_printf_float+0x3ee>
 80084da:	2301      	movs	r3, #1
 80084dc:	464a      	mov	r2, r9
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	47b8      	blx	r7
 80084e4:	3001      	adds	r0, #1
 80084e6:	f43f ae3e 	beq.w	8008166 <_printf_float+0xb6>
 80084ea:	f108 0801 	add.w	r8, r8, #1
 80084ee:	68e3      	ldr	r3, [r4, #12]
 80084f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084f2:	1a5b      	subs	r3, r3, r1
 80084f4:	4543      	cmp	r3, r8
 80084f6:	dcf0      	bgt.n	80084da <_printf_float+0x42a>
 80084f8:	e6fc      	b.n	80082f4 <_printf_float+0x244>
 80084fa:	f04f 0800 	mov.w	r8, #0
 80084fe:	f104 0919 	add.w	r9, r4, #25
 8008502:	e7f4      	b.n	80084ee <_printf_float+0x43e>

08008504 <_printf_common>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	4616      	mov	r6, r2
 800850a:	4698      	mov	r8, r3
 800850c:	688a      	ldr	r2, [r1, #8]
 800850e:	690b      	ldr	r3, [r1, #16]
 8008510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008514:	4293      	cmp	r3, r2
 8008516:	bfb8      	it	lt
 8008518:	4613      	movlt	r3, r2
 800851a:	6033      	str	r3, [r6, #0]
 800851c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008520:	4607      	mov	r7, r0
 8008522:	460c      	mov	r4, r1
 8008524:	b10a      	cbz	r2, 800852a <_printf_common+0x26>
 8008526:	3301      	adds	r3, #1
 8008528:	6033      	str	r3, [r6, #0]
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	0699      	lsls	r1, r3, #26
 800852e:	bf42      	ittt	mi
 8008530:	6833      	ldrmi	r3, [r6, #0]
 8008532:	3302      	addmi	r3, #2
 8008534:	6033      	strmi	r3, [r6, #0]
 8008536:	6825      	ldr	r5, [r4, #0]
 8008538:	f015 0506 	ands.w	r5, r5, #6
 800853c:	d106      	bne.n	800854c <_printf_common+0x48>
 800853e:	f104 0a19 	add.w	sl, r4, #25
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	6832      	ldr	r2, [r6, #0]
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	42ab      	cmp	r3, r5
 800854a:	dc26      	bgt.n	800859a <_printf_common+0x96>
 800854c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008550:	6822      	ldr	r2, [r4, #0]
 8008552:	3b00      	subs	r3, #0
 8008554:	bf18      	it	ne
 8008556:	2301      	movne	r3, #1
 8008558:	0692      	lsls	r2, r2, #26
 800855a:	d42b      	bmi.n	80085b4 <_printf_common+0xb0>
 800855c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008560:	4641      	mov	r1, r8
 8008562:	4638      	mov	r0, r7
 8008564:	47c8      	blx	r9
 8008566:	3001      	adds	r0, #1
 8008568:	d01e      	beq.n	80085a8 <_printf_common+0xa4>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	f003 0306 	and.w	r3, r3, #6
 8008572:	2b04      	cmp	r3, #4
 8008574:	bf02      	ittt	eq
 8008576:	68e5      	ldreq	r5, [r4, #12]
 8008578:	6833      	ldreq	r3, [r6, #0]
 800857a:	1aed      	subeq	r5, r5, r3
 800857c:	68a3      	ldr	r3, [r4, #8]
 800857e:	bf0c      	ite	eq
 8008580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008584:	2500      	movne	r5, #0
 8008586:	4293      	cmp	r3, r2
 8008588:	bfc4      	itt	gt
 800858a:	1a9b      	subgt	r3, r3, r2
 800858c:	18ed      	addgt	r5, r5, r3
 800858e:	2600      	movs	r6, #0
 8008590:	341a      	adds	r4, #26
 8008592:	42b5      	cmp	r5, r6
 8008594:	d11a      	bne.n	80085cc <_printf_common+0xc8>
 8008596:	2000      	movs	r0, #0
 8008598:	e008      	b.n	80085ac <_printf_common+0xa8>
 800859a:	2301      	movs	r3, #1
 800859c:	4652      	mov	r2, sl
 800859e:	4641      	mov	r1, r8
 80085a0:	4638      	mov	r0, r7
 80085a2:	47c8      	blx	r9
 80085a4:	3001      	adds	r0, #1
 80085a6:	d103      	bne.n	80085b0 <_printf_common+0xac>
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b0:	3501      	adds	r5, #1
 80085b2:	e7c6      	b.n	8008542 <_printf_common+0x3e>
 80085b4:	18e1      	adds	r1, r4, r3
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	2030      	movs	r0, #48	@ 0x30
 80085ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085be:	4422      	add	r2, r4
 80085c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085c8:	3302      	adds	r3, #2
 80085ca:	e7c7      	b.n	800855c <_printf_common+0x58>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4622      	mov	r2, r4
 80085d0:	4641      	mov	r1, r8
 80085d2:	4638      	mov	r0, r7
 80085d4:	47c8      	blx	r9
 80085d6:	3001      	adds	r0, #1
 80085d8:	d0e6      	beq.n	80085a8 <_printf_common+0xa4>
 80085da:	3601      	adds	r6, #1
 80085dc:	e7d9      	b.n	8008592 <_printf_common+0x8e>
	...

080085e0 <_printf_i>:
 80085e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	7e0f      	ldrb	r7, [r1, #24]
 80085e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085e8:	2f78      	cmp	r7, #120	@ 0x78
 80085ea:	4691      	mov	r9, r2
 80085ec:	4680      	mov	r8, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	469a      	mov	sl, r3
 80085f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085f6:	d807      	bhi.n	8008608 <_printf_i+0x28>
 80085f8:	2f62      	cmp	r7, #98	@ 0x62
 80085fa:	d80a      	bhi.n	8008612 <_printf_i+0x32>
 80085fc:	2f00      	cmp	r7, #0
 80085fe:	f000 80d2 	beq.w	80087a6 <_printf_i+0x1c6>
 8008602:	2f58      	cmp	r7, #88	@ 0x58
 8008604:	f000 80b9 	beq.w	800877a <_printf_i+0x19a>
 8008608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800860c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008610:	e03a      	b.n	8008688 <_printf_i+0xa8>
 8008612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008616:	2b15      	cmp	r3, #21
 8008618:	d8f6      	bhi.n	8008608 <_printf_i+0x28>
 800861a:	a101      	add	r1, pc, #4	@ (adr r1, 8008620 <_printf_i+0x40>)
 800861c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008620:	08008679 	.word	0x08008679
 8008624:	0800868d 	.word	0x0800868d
 8008628:	08008609 	.word	0x08008609
 800862c:	08008609 	.word	0x08008609
 8008630:	08008609 	.word	0x08008609
 8008634:	08008609 	.word	0x08008609
 8008638:	0800868d 	.word	0x0800868d
 800863c:	08008609 	.word	0x08008609
 8008640:	08008609 	.word	0x08008609
 8008644:	08008609 	.word	0x08008609
 8008648:	08008609 	.word	0x08008609
 800864c:	0800878d 	.word	0x0800878d
 8008650:	080086b7 	.word	0x080086b7
 8008654:	08008747 	.word	0x08008747
 8008658:	08008609 	.word	0x08008609
 800865c:	08008609 	.word	0x08008609
 8008660:	080087af 	.word	0x080087af
 8008664:	08008609 	.word	0x08008609
 8008668:	080086b7 	.word	0x080086b7
 800866c:	08008609 	.word	0x08008609
 8008670:	08008609 	.word	0x08008609
 8008674:	0800874f 	.word	0x0800874f
 8008678:	6833      	ldr	r3, [r6, #0]
 800867a:	1d1a      	adds	r2, r3, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6032      	str	r2, [r6, #0]
 8008680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008688:	2301      	movs	r3, #1
 800868a:	e09d      	b.n	80087c8 <_printf_i+0x1e8>
 800868c:	6833      	ldr	r3, [r6, #0]
 800868e:	6820      	ldr	r0, [r4, #0]
 8008690:	1d19      	adds	r1, r3, #4
 8008692:	6031      	str	r1, [r6, #0]
 8008694:	0606      	lsls	r6, r0, #24
 8008696:	d501      	bpl.n	800869c <_printf_i+0xbc>
 8008698:	681d      	ldr	r5, [r3, #0]
 800869a:	e003      	b.n	80086a4 <_printf_i+0xc4>
 800869c:	0645      	lsls	r5, r0, #25
 800869e:	d5fb      	bpl.n	8008698 <_printf_i+0xb8>
 80086a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	da03      	bge.n	80086b0 <_printf_i+0xd0>
 80086a8:	232d      	movs	r3, #45	@ 0x2d
 80086aa:	426d      	negs	r5, r5
 80086ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086b0:	4859      	ldr	r0, [pc, #356]	@ (8008818 <_printf_i+0x238>)
 80086b2:	230a      	movs	r3, #10
 80086b4:	e011      	b.n	80086da <_printf_i+0xfa>
 80086b6:	6821      	ldr	r1, [r4, #0]
 80086b8:	6833      	ldr	r3, [r6, #0]
 80086ba:	0608      	lsls	r0, r1, #24
 80086bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80086c0:	d402      	bmi.n	80086c8 <_printf_i+0xe8>
 80086c2:	0649      	lsls	r1, r1, #25
 80086c4:	bf48      	it	mi
 80086c6:	b2ad      	uxthmi	r5, r5
 80086c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80086ca:	4853      	ldr	r0, [pc, #332]	@ (8008818 <_printf_i+0x238>)
 80086cc:	6033      	str	r3, [r6, #0]
 80086ce:	bf14      	ite	ne
 80086d0:	230a      	movne	r3, #10
 80086d2:	2308      	moveq	r3, #8
 80086d4:	2100      	movs	r1, #0
 80086d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086da:	6866      	ldr	r6, [r4, #4]
 80086dc:	60a6      	str	r6, [r4, #8]
 80086de:	2e00      	cmp	r6, #0
 80086e0:	bfa2      	ittt	ge
 80086e2:	6821      	ldrge	r1, [r4, #0]
 80086e4:	f021 0104 	bicge.w	r1, r1, #4
 80086e8:	6021      	strge	r1, [r4, #0]
 80086ea:	b90d      	cbnz	r5, 80086f0 <_printf_i+0x110>
 80086ec:	2e00      	cmp	r6, #0
 80086ee:	d04b      	beq.n	8008788 <_printf_i+0x1a8>
 80086f0:	4616      	mov	r6, r2
 80086f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80086f6:	fb03 5711 	mls	r7, r3, r1, r5
 80086fa:	5dc7      	ldrb	r7, [r0, r7]
 80086fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008700:	462f      	mov	r7, r5
 8008702:	42bb      	cmp	r3, r7
 8008704:	460d      	mov	r5, r1
 8008706:	d9f4      	bls.n	80086f2 <_printf_i+0x112>
 8008708:	2b08      	cmp	r3, #8
 800870a:	d10b      	bne.n	8008724 <_printf_i+0x144>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	07df      	lsls	r7, r3, #31
 8008710:	d508      	bpl.n	8008724 <_printf_i+0x144>
 8008712:	6923      	ldr	r3, [r4, #16]
 8008714:	6861      	ldr	r1, [r4, #4]
 8008716:	4299      	cmp	r1, r3
 8008718:	bfde      	ittt	le
 800871a:	2330      	movle	r3, #48	@ 0x30
 800871c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008720:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008724:	1b92      	subs	r2, r2, r6
 8008726:	6122      	str	r2, [r4, #16]
 8008728:	f8cd a000 	str.w	sl, [sp]
 800872c:	464b      	mov	r3, r9
 800872e:	aa03      	add	r2, sp, #12
 8008730:	4621      	mov	r1, r4
 8008732:	4640      	mov	r0, r8
 8008734:	f7ff fee6 	bl	8008504 <_printf_common>
 8008738:	3001      	adds	r0, #1
 800873a:	d14a      	bne.n	80087d2 <_printf_i+0x1f2>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	b004      	add	sp, #16
 8008742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	f043 0320 	orr.w	r3, r3, #32
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	4833      	ldr	r0, [pc, #204]	@ (800881c <_printf_i+0x23c>)
 8008750:	2778      	movs	r7, #120	@ 0x78
 8008752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	6831      	ldr	r1, [r6, #0]
 800875a:	061f      	lsls	r7, r3, #24
 800875c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008760:	d402      	bmi.n	8008768 <_printf_i+0x188>
 8008762:	065f      	lsls	r7, r3, #25
 8008764:	bf48      	it	mi
 8008766:	b2ad      	uxthmi	r5, r5
 8008768:	6031      	str	r1, [r6, #0]
 800876a:	07d9      	lsls	r1, r3, #31
 800876c:	bf44      	itt	mi
 800876e:	f043 0320 	orrmi.w	r3, r3, #32
 8008772:	6023      	strmi	r3, [r4, #0]
 8008774:	b11d      	cbz	r5, 800877e <_printf_i+0x19e>
 8008776:	2310      	movs	r3, #16
 8008778:	e7ac      	b.n	80086d4 <_printf_i+0xf4>
 800877a:	4827      	ldr	r0, [pc, #156]	@ (8008818 <_printf_i+0x238>)
 800877c:	e7e9      	b.n	8008752 <_printf_i+0x172>
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	f023 0320 	bic.w	r3, r3, #32
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	e7f6      	b.n	8008776 <_printf_i+0x196>
 8008788:	4616      	mov	r6, r2
 800878a:	e7bd      	b.n	8008708 <_printf_i+0x128>
 800878c:	6833      	ldr	r3, [r6, #0]
 800878e:	6825      	ldr	r5, [r4, #0]
 8008790:	6961      	ldr	r1, [r4, #20]
 8008792:	1d18      	adds	r0, r3, #4
 8008794:	6030      	str	r0, [r6, #0]
 8008796:	062e      	lsls	r6, r5, #24
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	d501      	bpl.n	80087a0 <_printf_i+0x1c0>
 800879c:	6019      	str	r1, [r3, #0]
 800879e:	e002      	b.n	80087a6 <_printf_i+0x1c6>
 80087a0:	0668      	lsls	r0, r5, #25
 80087a2:	d5fb      	bpl.n	800879c <_printf_i+0x1bc>
 80087a4:	8019      	strh	r1, [r3, #0]
 80087a6:	2300      	movs	r3, #0
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	4616      	mov	r6, r2
 80087ac:	e7bc      	b.n	8008728 <_printf_i+0x148>
 80087ae:	6833      	ldr	r3, [r6, #0]
 80087b0:	1d1a      	adds	r2, r3, #4
 80087b2:	6032      	str	r2, [r6, #0]
 80087b4:	681e      	ldr	r6, [r3, #0]
 80087b6:	6862      	ldr	r2, [r4, #4]
 80087b8:	2100      	movs	r1, #0
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7f7 fd08 	bl	80001d0 <memchr>
 80087c0:	b108      	cbz	r0, 80087c6 <_printf_i+0x1e6>
 80087c2:	1b80      	subs	r0, r0, r6
 80087c4:	6060      	str	r0, [r4, #4]
 80087c6:	6863      	ldr	r3, [r4, #4]
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	2300      	movs	r3, #0
 80087cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087d0:	e7aa      	b.n	8008728 <_printf_i+0x148>
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	4632      	mov	r2, r6
 80087d6:	4649      	mov	r1, r9
 80087d8:	4640      	mov	r0, r8
 80087da:	47d0      	blx	sl
 80087dc:	3001      	adds	r0, #1
 80087de:	d0ad      	beq.n	800873c <_printf_i+0x15c>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	079b      	lsls	r3, r3, #30
 80087e4:	d413      	bmi.n	800880e <_printf_i+0x22e>
 80087e6:	68e0      	ldr	r0, [r4, #12]
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	4298      	cmp	r0, r3
 80087ec:	bfb8      	it	lt
 80087ee:	4618      	movlt	r0, r3
 80087f0:	e7a6      	b.n	8008740 <_printf_i+0x160>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4632      	mov	r2, r6
 80087f6:	4649      	mov	r1, r9
 80087f8:	4640      	mov	r0, r8
 80087fa:	47d0      	blx	sl
 80087fc:	3001      	adds	r0, #1
 80087fe:	d09d      	beq.n	800873c <_printf_i+0x15c>
 8008800:	3501      	adds	r5, #1
 8008802:	68e3      	ldr	r3, [r4, #12]
 8008804:	9903      	ldr	r1, [sp, #12]
 8008806:	1a5b      	subs	r3, r3, r1
 8008808:	42ab      	cmp	r3, r5
 800880a:	dcf2      	bgt.n	80087f2 <_printf_i+0x212>
 800880c:	e7eb      	b.n	80087e6 <_printf_i+0x206>
 800880e:	2500      	movs	r5, #0
 8008810:	f104 0619 	add.w	r6, r4, #25
 8008814:	e7f5      	b.n	8008802 <_printf_i+0x222>
 8008816:	bf00      	nop
 8008818:	0800c765 	.word	0x0800c765
 800881c:	0800c776 	.word	0x0800c776

08008820 <_scanf_float>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	b087      	sub	sp, #28
 8008826:	4617      	mov	r7, r2
 8008828:	9303      	str	r3, [sp, #12]
 800882a:	688b      	ldr	r3, [r1, #8]
 800882c:	1e5a      	subs	r2, r3, #1
 800882e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008832:	bf81      	itttt	hi
 8008834:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008838:	eb03 0b05 	addhi.w	fp, r3, r5
 800883c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008840:	608b      	strhi	r3, [r1, #8]
 8008842:	680b      	ldr	r3, [r1, #0]
 8008844:	460a      	mov	r2, r1
 8008846:	f04f 0500 	mov.w	r5, #0
 800884a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800884e:	f842 3b1c 	str.w	r3, [r2], #28
 8008852:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008856:	4680      	mov	r8, r0
 8008858:	460c      	mov	r4, r1
 800885a:	bf98      	it	ls
 800885c:	f04f 0b00 	movls.w	fp, #0
 8008860:	9201      	str	r2, [sp, #4]
 8008862:	4616      	mov	r6, r2
 8008864:	46aa      	mov	sl, r5
 8008866:	46a9      	mov	r9, r5
 8008868:	9502      	str	r5, [sp, #8]
 800886a:	68a2      	ldr	r2, [r4, #8]
 800886c:	b152      	cbz	r2, 8008884 <_scanf_float+0x64>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b4e      	cmp	r3, #78	@ 0x4e
 8008874:	d864      	bhi.n	8008940 <_scanf_float+0x120>
 8008876:	2b40      	cmp	r3, #64	@ 0x40
 8008878:	d83c      	bhi.n	80088f4 <_scanf_float+0xd4>
 800887a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800887e:	b2c8      	uxtb	r0, r1
 8008880:	280e      	cmp	r0, #14
 8008882:	d93a      	bls.n	80088fa <_scanf_float+0xda>
 8008884:	f1b9 0f00 	cmp.w	r9, #0
 8008888:	d003      	beq.n	8008892 <_scanf_float+0x72>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008896:	f1ba 0f01 	cmp.w	sl, #1
 800889a:	f200 8117 	bhi.w	8008acc <_scanf_float+0x2ac>
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	429e      	cmp	r6, r3
 80088a2:	f200 8108 	bhi.w	8008ab6 <_scanf_float+0x296>
 80088a6:	2001      	movs	r0, #1
 80088a8:	b007      	add	sp, #28
 80088aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80088b2:	2a0d      	cmp	r2, #13
 80088b4:	d8e6      	bhi.n	8008884 <_scanf_float+0x64>
 80088b6:	a101      	add	r1, pc, #4	@ (adr r1, 80088bc <_scanf_float+0x9c>)
 80088b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80088bc:	08008a03 	.word	0x08008a03
 80088c0:	08008885 	.word	0x08008885
 80088c4:	08008885 	.word	0x08008885
 80088c8:	08008885 	.word	0x08008885
 80088cc:	08008a63 	.word	0x08008a63
 80088d0:	08008a3b 	.word	0x08008a3b
 80088d4:	08008885 	.word	0x08008885
 80088d8:	08008885 	.word	0x08008885
 80088dc:	08008a11 	.word	0x08008a11
 80088e0:	08008885 	.word	0x08008885
 80088e4:	08008885 	.word	0x08008885
 80088e8:	08008885 	.word	0x08008885
 80088ec:	08008885 	.word	0x08008885
 80088f0:	080089c9 	.word	0x080089c9
 80088f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80088f8:	e7db      	b.n	80088b2 <_scanf_float+0x92>
 80088fa:	290e      	cmp	r1, #14
 80088fc:	d8c2      	bhi.n	8008884 <_scanf_float+0x64>
 80088fe:	a001      	add	r0, pc, #4	@ (adr r0, 8008904 <_scanf_float+0xe4>)
 8008900:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008904:	080089b9 	.word	0x080089b9
 8008908:	08008885 	.word	0x08008885
 800890c:	080089b9 	.word	0x080089b9
 8008910:	08008a4f 	.word	0x08008a4f
 8008914:	08008885 	.word	0x08008885
 8008918:	08008961 	.word	0x08008961
 800891c:	0800899f 	.word	0x0800899f
 8008920:	0800899f 	.word	0x0800899f
 8008924:	0800899f 	.word	0x0800899f
 8008928:	0800899f 	.word	0x0800899f
 800892c:	0800899f 	.word	0x0800899f
 8008930:	0800899f 	.word	0x0800899f
 8008934:	0800899f 	.word	0x0800899f
 8008938:	0800899f 	.word	0x0800899f
 800893c:	0800899f 	.word	0x0800899f
 8008940:	2b6e      	cmp	r3, #110	@ 0x6e
 8008942:	d809      	bhi.n	8008958 <_scanf_float+0x138>
 8008944:	2b60      	cmp	r3, #96	@ 0x60
 8008946:	d8b2      	bhi.n	80088ae <_scanf_float+0x8e>
 8008948:	2b54      	cmp	r3, #84	@ 0x54
 800894a:	d07b      	beq.n	8008a44 <_scanf_float+0x224>
 800894c:	2b59      	cmp	r3, #89	@ 0x59
 800894e:	d199      	bne.n	8008884 <_scanf_float+0x64>
 8008950:	2d07      	cmp	r5, #7
 8008952:	d197      	bne.n	8008884 <_scanf_float+0x64>
 8008954:	2508      	movs	r5, #8
 8008956:	e02c      	b.n	80089b2 <_scanf_float+0x192>
 8008958:	2b74      	cmp	r3, #116	@ 0x74
 800895a:	d073      	beq.n	8008a44 <_scanf_float+0x224>
 800895c:	2b79      	cmp	r3, #121	@ 0x79
 800895e:	e7f6      	b.n	800894e <_scanf_float+0x12e>
 8008960:	6821      	ldr	r1, [r4, #0]
 8008962:	05c8      	lsls	r0, r1, #23
 8008964:	d51b      	bpl.n	800899e <_scanf_float+0x17e>
 8008966:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800896a:	6021      	str	r1, [r4, #0]
 800896c:	f109 0901 	add.w	r9, r9, #1
 8008970:	f1bb 0f00 	cmp.w	fp, #0
 8008974:	d003      	beq.n	800897e <_scanf_float+0x15e>
 8008976:	3201      	adds	r2, #1
 8008978:	f10b 3bff 	add.w	fp, fp, #4294967295
 800897c:	60a2      	str	r2, [r4, #8]
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	3b01      	subs	r3, #1
 8008982:	60a3      	str	r3, [r4, #8]
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	3301      	adds	r3, #1
 8008988:	6123      	str	r3, [r4, #16]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3b01      	subs	r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	607b      	str	r3, [r7, #4]
 8008992:	f340 8087 	ble.w	8008aa4 <_scanf_float+0x284>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	3301      	adds	r3, #1
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	e765      	b.n	800886a <_scanf_float+0x4a>
 800899e:	eb1a 0105 	adds.w	r1, sl, r5
 80089a2:	f47f af6f 	bne.w	8008884 <_scanf_float+0x64>
 80089a6:	6822      	ldr	r2, [r4, #0]
 80089a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80089ac:	6022      	str	r2, [r4, #0]
 80089ae:	460d      	mov	r5, r1
 80089b0:	468a      	mov	sl, r1
 80089b2:	f806 3b01 	strb.w	r3, [r6], #1
 80089b6:	e7e2      	b.n	800897e <_scanf_float+0x15e>
 80089b8:	6822      	ldr	r2, [r4, #0]
 80089ba:	0610      	lsls	r0, r2, #24
 80089bc:	f57f af62 	bpl.w	8008884 <_scanf_float+0x64>
 80089c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	e7f4      	b.n	80089b2 <_scanf_float+0x192>
 80089c8:	f1ba 0f00 	cmp.w	sl, #0
 80089cc:	d10e      	bne.n	80089ec <_scanf_float+0x1cc>
 80089ce:	f1b9 0f00 	cmp.w	r9, #0
 80089d2:	d10e      	bne.n	80089f2 <_scanf_float+0x1d2>
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80089da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80089de:	d108      	bne.n	80089f2 <_scanf_float+0x1d2>
 80089e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089e4:	6022      	str	r2, [r4, #0]
 80089e6:	f04f 0a01 	mov.w	sl, #1
 80089ea:	e7e2      	b.n	80089b2 <_scanf_float+0x192>
 80089ec:	f1ba 0f02 	cmp.w	sl, #2
 80089f0:	d055      	beq.n	8008a9e <_scanf_float+0x27e>
 80089f2:	2d01      	cmp	r5, #1
 80089f4:	d002      	beq.n	80089fc <_scanf_float+0x1dc>
 80089f6:	2d04      	cmp	r5, #4
 80089f8:	f47f af44 	bne.w	8008884 <_scanf_float+0x64>
 80089fc:	3501      	adds	r5, #1
 80089fe:	b2ed      	uxtb	r5, r5
 8008a00:	e7d7      	b.n	80089b2 <_scanf_float+0x192>
 8008a02:	f1ba 0f01 	cmp.w	sl, #1
 8008a06:	f47f af3d 	bne.w	8008884 <_scanf_float+0x64>
 8008a0a:	f04f 0a02 	mov.w	sl, #2
 8008a0e:	e7d0      	b.n	80089b2 <_scanf_float+0x192>
 8008a10:	b97d      	cbnz	r5, 8008a32 <_scanf_float+0x212>
 8008a12:	f1b9 0f00 	cmp.w	r9, #0
 8008a16:	f47f af38 	bne.w	800888a <_scanf_float+0x6a>
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008a20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008a24:	f040 8108 	bne.w	8008c38 <_scanf_float+0x418>
 8008a28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a2c:	6022      	str	r2, [r4, #0]
 8008a2e:	2501      	movs	r5, #1
 8008a30:	e7bf      	b.n	80089b2 <_scanf_float+0x192>
 8008a32:	2d03      	cmp	r5, #3
 8008a34:	d0e2      	beq.n	80089fc <_scanf_float+0x1dc>
 8008a36:	2d05      	cmp	r5, #5
 8008a38:	e7de      	b.n	80089f8 <_scanf_float+0x1d8>
 8008a3a:	2d02      	cmp	r5, #2
 8008a3c:	f47f af22 	bne.w	8008884 <_scanf_float+0x64>
 8008a40:	2503      	movs	r5, #3
 8008a42:	e7b6      	b.n	80089b2 <_scanf_float+0x192>
 8008a44:	2d06      	cmp	r5, #6
 8008a46:	f47f af1d 	bne.w	8008884 <_scanf_float+0x64>
 8008a4a:	2507      	movs	r5, #7
 8008a4c:	e7b1      	b.n	80089b2 <_scanf_float+0x192>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	0591      	lsls	r1, r2, #22
 8008a52:	f57f af17 	bpl.w	8008884 <_scanf_float+0x64>
 8008a56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a60:	e7a7      	b.n	80089b2 <_scanf_float+0x192>
 8008a62:	6822      	ldr	r2, [r4, #0]
 8008a64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008a68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008a6c:	d006      	beq.n	8008a7c <_scanf_float+0x25c>
 8008a6e:	0550      	lsls	r0, r2, #21
 8008a70:	f57f af08 	bpl.w	8008884 <_scanf_float+0x64>
 8008a74:	f1b9 0f00 	cmp.w	r9, #0
 8008a78:	f000 80de 	beq.w	8008c38 <_scanf_float+0x418>
 8008a7c:	0591      	lsls	r1, r2, #22
 8008a7e:	bf58      	it	pl
 8008a80:	9902      	ldrpl	r1, [sp, #8]
 8008a82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a86:	bf58      	it	pl
 8008a88:	eba9 0101 	subpl.w	r1, r9, r1
 8008a8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008a90:	bf58      	it	pl
 8008a92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a96:	6022      	str	r2, [r4, #0]
 8008a98:	f04f 0900 	mov.w	r9, #0
 8008a9c:	e789      	b.n	80089b2 <_scanf_float+0x192>
 8008a9e:	f04f 0a03 	mov.w	sl, #3
 8008aa2:	e786      	b.n	80089b2 <_scanf_float+0x192>
 8008aa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4798      	blx	r3
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f43f aedb 	beq.w	800886a <_scanf_float+0x4a>
 8008ab4:	e6e6      	b.n	8008884 <_scanf_float+0x64>
 8008ab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008aba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008abe:	463a      	mov	r2, r7
 8008ac0:	4640      	mov	r0, r8
 8008ac2:	4798      	blx	r3
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	e6e8      	b.n	800889e <_scanf_float+0x7e>
 8008acc:	1e6b      	subs	r3, r5, #1
 8008ace:	2b06      	cmp	r3, #6
 8008ad0:	d824      	bhi.n	8008b1c <_scanf_float+0x2fc>
 8008ad2:	2d02      	cmp	r5, #2
 8008ad4:	d836      	bhi.n	8008b44 <_scanf_float+0x324>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	429e      	cmp	r6, r3
 8008ada:	f67f aee4 	bls.w	80088a6 <_scanf_float+0x86>
 8008ade:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ae2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ae6:	463a      	mov	r2, r7
 8008ae8:	4640      	mov	r0, r8
 8008aea:	4798      	blx	r3
 8008aec:	6923      	ldr	r3, [r4, #16]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	e7f0      	b.n	8008ad6 <_scanf_float+0x2b6>
 8008af4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008af8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008afc:	463a      	mov	r2, r7
 8008afe:	4640      	mov	r0, r8
 8008b00:	4798      	blx	r3
 8008b02:	6923      	ldr	r3, [r4, #16]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b0c:	fa5f fa8a 	uxtb.w	sl, sl
 8008b10:	f1ba 0f02 	cmp.w	sl, #2
 8008b14:	d1ee      	bne.n	8008af4 <_scanf_float+0x2d4>
 8008b16:	3d03      	subs	r5, #3
 8008b18:	b2ed      	uxtb	r5, r5
 8008b1a:	1b76      	subs	r6, r6, r5
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	05da      	lsls	r2, r3, #23
 8008b20:	d530      	bpl.n	8008b84 <_scanf_float+0x364>
 8008b22:	055b      	lsls	r3, r3, #21
 8008b24:	d511      	bpl.n	8008b4a <_scanf_float+0x32a>
 8008b26:	9b01      	ldr	r3, [sp, #4]
 8008b28:	429e      	cmp	r6, r3
 8008b2a:	f67f aebc 	bls.w	80088a6 <_scanf_float+0x86>
 8008b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b36:	463a      	mov	r2, r7
 8008b38:	4640      	mov	r0, r8
 8008b3a:	4798      	blx	r3
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	e7f0      	b.n	8008b26 <_scanf_float+0x306>
 8008b44:	46aa      	mov	sl, r5
 8008b46:	46b3      	mov	fp, r6
 8008b48:	e7de      	b.n	8008b08 <_scanf_float+0x2e8>
 8008b4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	2965      	cmp	r1, #101	@ 0x65
 8008b52:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b56:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	d00c      	beq.n	8008b78 <_scanf_float+0x358>
 8008b5e:	2945      	cmp	r1, #69	@ 0x45
 8008b60:	d00a      	beq.n	8008b78 <_scanf_float+0x358>
 8008b62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b66:	463a      	mov	r2, r7
 8008b68:	4640      	mov	r0, r8
 8008b6a:	4798      	blx	r3
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	1eb5      	subs	r5, r6, #2
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b7c:	463a      	mov	r2, r7
 8008b7e:	4640      	mov	r0, r8
 8008b80:	4798      	blx	r3
 8008b82:	462e      	mov	r6, r5
 8008b84:	6822      	ldr	r2, [r4, #0]
 8008b86:	f012 0210 	ands.w	r2, r2, #16
 8008b8a:	d001      	beq.n	8008b90 <_scanf_float+0x370>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	e68b      	b.n	80088a8 <_scanf_float+0x88>
 8008b90:	7032      	strb	r2, [r6, #0]
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b9c:	d11c      	bne.n	8008bd8 <_scanf_float+0x3b8>
 8008b9e:	9b02      	ldr	r3, [sp, #8]
 8008ba0:	454b      	cmp	r3, r9
 8008ba2:	eba3 0209 	sub.w	r2, r3, r9
 8008ba6:	d123      	bne.n	8008bf0 <_scanf_float+0x3d0>
 8008ba8:	9901      	ldr	r1, [sp, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	4640      	mov	r0, r8
 8008bae:	f002 fc23 	bl	800b3f8 <_strtod_r>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	6821      	ldr	r1, [r4, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f011 0f02 	tst.w	r1, #2
 8008bbc:	ec57 6b10 	vmov	r6, r7, d0
 8008bc0:	f103 0204 	add.w	r2, r3, #4
 8008bc4:	d01f      	beq.n	8008c06 <_scanf_float+0x3e6>
 8008bc6:	9903      	ldr	r1, [sp, #12]
 8008bc8:	600a      	str	r2, [r1, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	e9c3 6700 	strd	r6, r7, [r3]
 8008bd0:	68e3      	ldr	r3, [r4, #12]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60e3      	str	r3, [r4, #12]
 8008bd6:	e7d9      	b.n	8008b8c <_scanf_float+0x36c>
 8008bd8:	9b04      	ldr	r3, [sp, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0e4      	beq.n	8008ba8 <_scanf_float+0x388>
 8008bde:	9905      	ldr	r1, [sp, #20]
 8008be0:	230a      	movs	r3, #10
 8008be2:	3101      	adds	r1, #1
 8008be4:	4640      	mov	r0, r8
 8008be6:	f002 fc87 	bl	800b4f8 <_strtol_r>
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	9e05      	ldr	r6, [sp, #20]
 8008bee:	1ac2      	subs	r2, r0, r3
 8008bf0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008bf4:	429e      	cmp	r6, r3
 8008bf6:	bf28      	it	cs
 8008bf8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008bfc:	4910      	ldr	r1, [pc, #64]	@ (8008c40 <_scanf_float+0x420>)
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f000 f8e4 	bl	8008dcc <siprintf>
 8008c04:	e7d0      	b.n	8008ba8 <_scanf_float+0x388>
 8008c06:	f011 0f04 	tst.w	r1, #4
 8008c0a:	9903      	ldr	r1, [sp, #12]
 8008c0c:	600a      	str	r2, [r1, #0]
 8008c0e:	d1dc      	bne.n	8008bca <_scanf_float+0x3aa>
 8008c10:	681d      	ldr	r5, [r3, #0]
 8008c12:	4632      	mov	r2, r6
 8008c14:	463b      	mov	r3, r7
 8008c16:	4630      	mov	r0, r6
 8008c18:	4639      	mov	r1, r7
 8008c1a:	f7f7 ff87 	bl	8000b2c <__aeabi_dcmpun>
 8008c1e:	b128      	cbz	r0, 8008c2c <_scanf_float+0x40c>
 8008c20:	4808      	ldr	r0, [pc, #32]	@ (8008c44 <_scanf_float+0x424>)
 8008c22:	f000 f9c5 	bl	8008fb0 <nanf>
 8008c26:	ed85 0a00 	vstr	s0, [r5]
 8008c2a:	e7d1      	b.n	8008bd0 <_scanf_float+0x3b0>
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	4639      	mov	r1, r7
 8008c30:	f7f7 ffda 	bl	8000be8 <__aeabi_d2f>
 8008c34:	6028      	str	r0, [r5, #0]
 8008c36:	e7cb      	b.n	8008bd0 <_scanf_float+0x3b0>
 8008c38:	f04f 0900 	mov.w	r9, #0
 8008c3c:	e629      	b.n	8008892 <_scanf_float+0x72>
 8008c3e:	bf00      	nop
 8008c40:	0800c787 	.word	0x0800c787
 8008c44:	0800c7c7 	.word	0x0800c7c7

08008c48 <std>:
 8008c48:	2300      	movs	r3, #0
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c56:	6083      	str	r3, [r0, #8]
 8008c58:	8181      	strh	r1, [r0, #12]
 8008c5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c5c:	81c2      	strh	r2, [r0, #14]
 8008c5e:	6183      	str	r3, [r0, #24]
 8008c60:	4619      	mov	r1, r3
 8008c62:	2208      	movs	r2, #8
 8008c64:	305c      	adds	r0, #92	@ 0x5c
 8008c66:	f000 f914 	bl	8008e92 <memset>
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca0 <std+0x58>)
 8008c6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca4 <std+0x5c>)
 8008c70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca8 <std+0x60>)
 8008c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c76:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <std+0x64>)
 8008c78:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <std+0x68>)
 8008c7c:	6224      	str	r4, [r4, #32]
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d006      	beq.n	8008c90 <std+0x48>
 8008c82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c86:	4294      	cmp	r4, r2
 8008c88:	d002      	beq.n	8008c90 <std+0x48>
 8008c8a:	33d0      	adds	r3, #208	@ 0xd0
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d105      	bne.n	8008c9c <std+0x54>
 8008c90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c98:	f000 b978 	b.w	8008f8c <__retarget_lock_init_recursive>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	bf00      	nop
 8008ca0:	08008e0d 	.word	0x08008e0d
 8008ca4:	08008e2f 	.word	0x08008e2f
 8008ca8:	08008e67 	.word	0x08008e67
 8008cac:	08008e8b 	.word	0x08008e8b
 8008cb0:	200007f0 	.word	0x200007f0

08008cb4 <stdio_exit_handler>:
 8008cb4:	4a02      	ldr	r2, [pc, #8]	@ (8008cc0 <stdio_exit_handler+0xc>)
 8008cb6:	4903      	ldr	r1, [pc, #12]	@ (8008cc4 <stdio_exit_handler+0x10>)
 8008cb8:	4803      	ldr	r0, [pc, #12]	@ (8008cc8 <stdio_exit_handler+0x14>)
 8008cba:	f000 b869 	b.w	8008d90 <_fwalk_sglue>
 8008cbe:	bf00      	nop
 8008cc0:	20000020 	.word	0x20000020
 8008cc4:	0800b8b5 	.word	0x0800b8b5
 8008cc8:	20000030 	.word	0x20000030

08008ccc <cleanup_stdio>:
 8008ccc:	6841      	ldr	r1, [r0, #4]
 8008cce:	4b0c      	ldr	r3, [pc, #48]	@ (8008d00 <cleanup_stdio+0x34>)
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	d001      	beq.n	8008cdc <cleanup_stdio+0x10>
 8008cd8:	f002 fdec 	bl	800b8b4 <_fflush_r>
 8008cdc:	68a1      	ldr	r1, [r4, #8]
 8008cde:	4b09      	ldr	r3, [pc, #36]	@ (8008d04 <cleanup_stdio+0x38>)
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	d002      	beq.n	8008cea <cleanup_stdio+0x1e>
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f002 fde5 	bl	800b8b4 <_fflush_r>
 8008cea:	68e1      	ldr	r1, [r4, #12]
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <cleanup_stdio+0x3c>)
 8008cee:	4299      	cmp	r1, r3
 8008cf0:	d004      	beq.n	8008cfc <cleanup_stdio+0x30>
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf8:	f002 bddc 	b.w	800b8b4 <_fflush_r>
 8008cfc:	bd10      	pop	{r4, pc}
 8008cfe:	bf00      	nop
 8008d00:	200007f0 	.word	0x200007f0
 8008d04:	20000858 	.word	0x20000858
 8008d08:	200008c0 	.word	0x200008c0

08008d0c <global_stdio_init.part.0>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d3c <global_stdio_init.part.0+0x30>)
 8008d10:	4c0b      	ldr	r4, [pc, #44]	@ (8008d40 <global_stdio_init.part.0+0x34>)
 8008d12:	4a0c      	ldr	r2, [pc, #48]	@ (8008d44 <global_stdio_init.part.0+0x38>)
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	4620      	mov	r0, r4
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2104      	movs	r1, #4
 8008d1c:	f7ff ff94 	bl	8008c48 <std>
 8008d20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d24:	2201      	movs	r2, #1
 8008d26:	2109      	movs	r1, #9
 8008d28:	f7ff ff8e 	bl	8008c48 <std>
 8008d2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d30:	2202      	movs	r2, #2
 8008d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d36:	2112      	movs	r1, #18
 8008d38:	f7ff bf86 	b.w	8008c48 <std>
 8008d3c:	20000928 	.word	0x20000928
 8008d40:	200007f0 	.word	0x200007f0
 8008d44:	08008cb5 	.word	0x08008cb5

08008d48 <__sfp_lock_acquire>:
 8008d48:	4801      	ldr	r0, [pc, #4]	@ (8008d50 <__sfp_lock_acquire+0x8>)
 8008d4a:	f000 b920 	b.w	8008f8e <__retarget_lock_acquire_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20000931 	.word	0x20000931

08008d54 <__sfp_lock_release>:
 8008d54:	4801      	ldr	r0, [pc, #4]	@ (8008d5c <__sfp_lock_release+0x8>)
 8008d56:	f000 b91b 	b.w	8008f90 <__retarget_lock_release_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	20000931 	.word	0x20000931

08008d60 <__sinit>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4604      	mov	r4, r0
 8008d64:	f7ff fff0 	bl	8008d48 <__sfp_lock_acquire>
 8008d68:	6a23      	ldr	r3, [r4, #32]
 8008d6a:	b11b      	cbz	r3, 8008d74 <__sinit+0x14>
 8008d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d70:	f7ff bff0 	b.w	8008d54 <__sfp_lock_release>
 8008d74:	4b04      	ldr	r3, [pc, #16]	@ (8008d88 <__sinit+0x28>)
 8008d76:	6223      	str	r3, [r4, #32]
 8008d78:	4b04      	ldr	r3, [pc, #16]	@ (8008d8c <__sinit+0x2c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1f5      	bne.n	8008d6c <__sinit+0xc>
 8008d80:	f7ff ffc4 	bl	8008d0c <global_stdio_init.part.0>
 8008d84:	e7f2      	b.n	8008d6c <__sinit+0xc>
 8008d86:	bf00      	nop
 8008d88:	08008ccd 	.word	0x08008ccd
 8008d8c:	20000928 	.word	0x20000928

08008d90 <_fwalk_sglue>:
 8008d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d94:	4607      	mov	r7, r0
 8008d96:	4688      	mov	r8, r1
 8008d98:	4614      	mov	r4, r2
 8008d9a:	2600      	movs	r6, #0
 8008d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008da0:	f1b9 0901 	subs.w	r9, r9, #1
 8008da4:	d505      	bpl.n	8008db2 <_fwalk_sglue+0x22>
 8008da6:	6824      	ldr	r4, [r4, #0]
 8008da8:	2c00      	cmp	r4, #0
 8008daa:	d1f7      	bne.n	8008d9c <_fwalk_sglue+0xc>
 8008dac:	4630      	mov	r0, r6
 8008dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d907      	bls.n	8008dc8 <_fwalk_sglue+0x38>
 8008db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	d003      	beq.n	8008dc8 <_fwalk_sglue+0x38>
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	47c0      	blx	r8
 8008dc6:	4306      	orrs	r6, r0
 8008dc8:	3568      	adds	r5, #104	@ 0x68
 8008dca:	e7e9      	b.n	8008da0 <_fwalk_sglue+0x10>

08008dcc <siprintf>:
 8008dcc:	b40e      	push	{r1, r2, r3}
 8008dce:	b500      	push	{lr}
 8008dd0:	b09c      	sub	sp, #112	@ 0x70
 8008dd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8008dd4:	9002      	str	r0, [sp, #8]
 8008dd6:	9006      	str	r0, [sp, #24]
 8008dd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ddc:	4809      	ldr	r0, [pc, #36]	@ (8008e04 <siprintf+0x38>)
 8008dde:	9107      	str	r1, [sp, #28]
 8008de0:	9104      	str	r1, [sp, #16]
 8008de2:	4909      	ldr	r1, [pc, #36]	@ (8008e08 <siprintf+0x3c>)
 8008de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008de8:	9105      	str	r1, [sp, #20]
 8008dea:	6800      	ldr	r0, [r0, #0]
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	a902      	add	r1, sp, #8
 8008df0:	f002 fbe0 	bl	800b5b4 <_svfiprintf_r>
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	2200      	movs	r2, #0
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	b01c      	add	sp, #112	@ 0x70
 8008dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e00:	b003      	add	sp, #12
 8008e02:	4770      	bx	lr
 8008e04:	2000002c 	.word	0x2000002c
 8008e08:	ffff0208 	.word	0xffff0208

08008e0c <__sread>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e14:	f000 f86c 	bl	8008ef0 <_read_r>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	bfab      	itete	ge
 8008e1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e1e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e20:	181b      	addge	r3, r3, r0
 8008e22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e26:	bfac      	ite	ge
 8008e28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e2a:	81a3      	strhlt	r3, [r4, #12]
 8008e2c:	bd10      	pop	{r4, pc}

08008e2e <__swrite>:
 8008e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e32:	461f      	mov	r7, r3
 8008e34:	898b      	ldrh	r3, [r1, #12]
 8008e36:	05db      	lsls	r3, r3, #23
 8008e38:	4605      	mov	r5, r0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	d505      	bpl.n	8008e4c <__swrite+0x1e>
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	2302      	movs	r3, #2
 8008e46:	2200      	movs	r2, #0
 8008e48:	f000 f840 	bl	8008ecc <_lseek_r>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	4632      	mov	r2, r6
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e62:	f000 b857 	b.w	8008f14 <_write_r>

08008e66 <__sseek>:
 8008e66:	b510      	push	{r4, lr}
 8008e68:	460c      	mov	r4, r1
 8008e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6e:	f000 f82d 	bl	8008ecc <_lseek_r>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	bf15      	itete	ne
 8008e78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e82:	81a3      	strheq	r3, [r4, #12]
 8008e84:	bf18      	it	ne
 8008e86:	81a3      	strhne	r3, [r4, #12]
 8008e88:	bd10      	pop	{r4, pc}

08008e8a <__sclose>:
 8008e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8e:	f000 b80d 	b.w	8008eac <_close_r>

08008e92 <memset>:
 8008e92:	4402      	add	r2, r0
 8008e94:	4603      	mov	r3, r0
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d100      	bne.n	8008e9c <memset+0xa>
 8008e9a:	4770      	bx	lr
 8008e9c:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea0:	e7f9      	b.n	8008e96 <memset+0x4>
	...

08008ea4 <_localeconv_r>:
 8008ea4:	4800      	ldr	r0, [pc, #0]	@ (8008ea8 <_localeconv_r+0x4>)
 8008ea6:	4770      	bx	lr
 8008ea8:	2000016c 	.word	0x2000016c

08008eac <_close_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4d06      	ldr	r5, [pc, #24]	@ (8008ec8 <_close_r+0x1c>)
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	4608      	mov	r0, r1
 8008eb6:	602b      	str	r3, [r5, #0]
 8008eb8:	f7fe ff86 	bl	8007dc8 <_close>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_close_r+0x1a>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_close_r+0x1a>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	2000092c 	.word	0x2000092c

08008ecc <_lseek_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4d07      	ldr	r5, [pc, #28]	@ (8008eec <_lseek_r+0x20>)
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	4608      	mov	r0, r1
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	602a      	str	r2, [r5, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	f7fe ff9b 	bl	8007e16 <_lseek>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_lseek_r+0x1e>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_lseek_r+0x1e>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	2000092c 	.word	0x2000092c

08008ef0 <_read_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d07      	ldr	r5, [pc, #28]	@ (8008f10 <_read_r+0x20>)
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4611      	mov	r1, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f7fe ff29 	bl	8007d56 <_read>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_read_r+0x1e>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_read_r+0x1e>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	2000092c 	.word	0x2000092c

08008f14 <_write_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d07      	ldr	r5, [pc, #28]	@ (8008f34 <_write_r+0x20>)
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	602a      	str	r2, [r5, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f7fe ff34 	bl	8007d90 <_write>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_write_r+0x1e>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_write_r+0x1e>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	2000092c 	.word	0x2000092c

08008f38 <__errno>:
 8008f38:	4b01      	ldr	r3, [pc, #4]	@ (8008f40 <__errno+0x8>)
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	2000002c 	.word	0x2000002c

08008f44 <__libc_init_array>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	4d0d      	ldr	r5, [pc, #52]	@ (8008f7c <__libc_init_array+0x38>)
 8008f48:	4c0d      	ldr	r4, [pc, #52]	@ (8008f80 <__libc_init_array+0x3c>)
 8008f4a:	1b64      	subs	r4, r4, r5
 8008f4c:	10a4      	asrs	r4, r4, #2
 8008f4e:	2600      	movs	r6, #0
 8008f50:	42a6      	cmp	r6, r4
 8008f52:	d109      	bne.n	8008f68 <__libc_init_array+0x24>
 8008f54:	4d0b      	ldr	r5, [pc, #44]	@ (8008f84 <__libc_init_array+0x40>)
 8008f56:	4c0c      	ldr	r4, [pc, #48]	@ (8008f88 <__libc_init_array+0x44>)
 8008f58:	f003 fb70 	bl	800c63c <_init>
 8008f5c:	1b64      	subs	r4, r4, r5
 8008f5e:	10a4      	asrs	r4, r4, #2
 8008f60:	2600      	movs	r6, #0
 8008f62:	42a6      	cmp	r6, r4
 8008f64:	d105      	bne.n	8008f72 <__libc_init_array+0x2e>
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6c:	4798      	blx	r3
 8008f6e:	3601      	adds	r6, #1
 8008f70:	e7ee      	b.n	8008f50 <__libc_init_array+0xc>
 8008f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f76:	4798      	blx	r3
 8008f78:	3601      	adds	r6, #1
 8008f7a:	e7f2      	b.n	8008f62 <__libc_init_array+0x1e>
 8008f7c:	0800cb74 	.word	0x0800cb74
 8008f80:	0800cb74 	.word	0x0800cb74
 8008f84:	0800cb74 	.word	0x0800cb74
 8008f88:	0800cb78 	.word	0x0800cb78

08008f8c <__retarget_lock_init_recursive>:
 8008f8c:	4770      	bx	lr

08008f8e <__retarget_lock_acquire_recursive>:
 8008f8e:	4770      	bx	lr

08008f90 <__retarget_lock_release_recursive>:
 8008f90:	4770      	bx	lr

08008f92 <memcpy>:
 8008f92:	440a      	add	r2, r1
 8008f94:	4291      	cmp	r1, r2
 8008f96:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f9a:	d100      	bne.n	8008f9e <memcpy+0xc>
 8008f9c:	4770      	bx	lr
 8008f9e:	b510      	push	{r4, lr}
 8008fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa8:	4291      	cmp	r1, r2
 8008faa:	d1f9      	bne.n	8008fa0 <memcpy+0xe>
 8008fac:	bd10      	pop	{r4, pc}
	...

08008fb0 <nanf>:
 8008fb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008fb8 <nanf+0x8>
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	7fc00000 	.word	0x7fc00000

08008fbc <__assert_func>:
 8008fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4b09      	ldr	r3, [pc, #36]	@ (8008fe8 <__assert_func+0x2c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4605      	mov	r5, r0
 8008fc8:	68d8      	ldr	r0, [r3, #12]
 8008fca:	b954      	cbnz	r4, 8008fe2 <__assert_func+0x26>
 8008fcc:	4b07      	ldr	r3, [pc, #28]	@ (8008fec <__assert_func+0x30>)
 8008fce:	461c      	mov	r4, r3
 8008fd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fd4:	9100      	str	r1, [sp, #0]
 8008fd6:	462b      	mov	r3, r5
 8008fd8:	4905      	ldr	r1, [pc, #20]	@ (8008ff0 <__assert_func+0x34>)
 8008fda:	f002 fc93 	bl	800b904 <fiprintf>
 8008fde:	f002 fce7 	bl	800b9b0 <abort>
 8008fe2:	4b04      	ldr	r3, [pc, #16]	@ (8008ff4 <__assert_func+0x38>)
 8008fe4:	e7f4      	b.n	8008fd0 <__assert_func+0x14>
 8008fe6:	bf00      	nop
 8008fe8:	2000002c 	.word	0x2000002c
 8008fec:	0800c7c7 	.word	0x0800c7c7
 8008ff0:	0800c799 	.word	0x0800c799
 8008ff4:	0800c78c 	.word	0x0800c78c

08008ff8 <quorem>:
 8008ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	6903      	ldr	r3, [r0, #16]
 8008ffe:	690c      	ldr	r4, [r1, #16]
 8009000:	42a3      	cmp	r3, r4
 8009002:	4607      	mov	r7, r0
 8009004:	db7e      	blt.n	8009104 <quorem+0x10c>
 8009006:	3c01      	subs	r4, #1
 8009008:	f101 0814 	add.w	r8, r1, #20
 800900c:	00a3      	lsls	r3, r4, #2
 800900e:	f100 0514 	add.w	r5, r0, #20
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800901e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009022:	3301      	adds	r3, #1
 8009024:	429a      	cmp	r2, r3
 8009026:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800902a:	fbb2 f6f3 	udiv	r6, r2, r3
 800902e:	d32e      	bcc.n	800908e <quorem+0x96>
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	46c4      	mov	ip, r8
 8009036:	46ae      	mov	lr, r5
 8009038:	46d3      	mov	fp, sl
 800903a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800903e:	b298      	uxth	r0, r3
 8009040:	fb06 a000 	mla	r0, r6, r0, sl
 8009044:	0c02      	lsrs	r2, r0, #16
 8009046:	0c1b      	lsrs	r3, r3, #16
 8009048:	fb06 2303 	mla	r3, r6, r3, r2
 800904c:	f8de 2000 	ldr.w	r2, [lr]
 8009050:	b280      	uxth	r0, r0
 8009052:	b292      	uxth	r2, r2
 8009054:	1a12      	subs	r2, r2, r0
 8009056:	445a      	add	r2, fp
 8009058:	f8de 0000 	ldr.w	r0, [lr]
 800905c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009060:	b29b      	uxth	r3, r3
 8009062:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009066:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800906a:	b292      	uxth	r2, r2
 800906c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009070:	45e1      	cmp	r9, ip
 8009072:	f84e 2b04 	str.w	r2, [lr], #4
 8009076:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800907a:	d2de      	bcs.n	800903a <quorem+0x42>
 800907c:	9b00      	ldr	r3, [sp, #0]
 800907e:	58eb      	ldr	r3, [r5, r3]
 8009080:	b92b      	cbnz	r3, 800908e <quorem+0x96>
 8009082:	9b01      	ldr	r3, [sp, #4]
 8009084:	3b04      	subs	r3, #4
 8009086:	429d      	cmp	r5, r3
 8009088:	461a      	mov	r2, r3
 800908a:	d32f      	bcc.n	80090ec <quorem+0xf4>
 800908c:	613c      	str	r4, [r7, #16]
 800908e:	4638      	mov	r0, r7
 8009090:	f001 f9c2 	bl	800a418 <__mcmp>
 8009094:	2800      	cmp	r0, #0
 8009096:	db25      	blt.n	80090e4 <quorem+0xec>
 8009098:	4629      	mov	r1, r5
 800909a:	2000      	movs	r0, #0
 800909c:	f858 2b04 	ldr.w	r2, [r8], #4
 80090a0:	f8d1 c000 	ldr.w	ip, [r1]
 80090a4:	fa1f fe82 	uxth.w	lr, r2
 80090a8:	fa1f f38c 	uxth.w	r3, ip
 80090ac:	eba3 030e 	sub.w	r3, r3, lr
 80090b0:	4403      	add	r3, r0
 80090b2:	0c12      	lsrs	r2, r2, #16
 80090b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80090b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80090bc:	b29b      	uxth	r3, r3
 80090be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090c2:	45c1      	cmp	r9, r8
 80090c4:	f841 3b04 	str.w	r3, [r1], #4
 80090c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80090cc:	d2e6      	bcs.n	800909c <quorem+0xa4>
 80090ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090d6:	b922      	cbnz	r2, 80090e2 <quorem+0xea>
 80090d8:	3b04      	subs	r3, #4
 80090da:	429d      	cmp	r5, r3
 80090dc:	461a      	mov	r2, r3
 80090de:	d30b      	bcc.n	80090f8 <quorem+0x100>
 80090e0:	613c      	str	r4, [r7, #16]
 80090e2:	3601      	adds	r6, #1
 80090e4:	4630      	mov	r0, r6
 80090e6:	b003      	add	sp, #12
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	6812      	ldr	r2, [r2, #0]
 80090ee:	3b04      	subs	r3, #4
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	d1cb      	bne.n	800908c <quorem+0x94>
 80090f4:	3c01      	subs	r4, #1
 80090f6:	e7c6      	b.n	8009086 <quorem+0x8e>
 80090f8:	6812      	ldr	r2, [r2, #0]
 80090fa:	3b04      	subs	r3, #4
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	d1ef      	bne.n	80090e0 <quorem+0xe8>
 8009100:	3c01      	subs	r4, #1
 8009102:	e7ea      	b.n	80090da <quorem+0xe2>
 8009104:	2000      	movs	r0, #0
 8009106:	e7ee      	b.n	80090e6 <quorem+0xee>

08009108 <_dtoa_r>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	69c7      	ldr	r7, [r0, #28]
 800910e:	b099      	sub	sp, #100	@ 0x64
 8009110:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009114:	ec55 4b10 	vmov	r4, r5, d0
 8009118:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800911a:	9109      	str	r1, [sp, #36]	@ 0x24
 800911c:	4683      	mov	fp, r0
 800911e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009120:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009122:	b97f      	cbnz	r7, 8009144 <_dtoa_r+0x3c>
 8009124:	2010      	movs	r0, #16
 8009126:	f000 fdfd 	bl	8009d24 <malloc>
 800912a:	4602      	mov	r2, r0
 800912c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009130:	b920      	cbnz	r0, 800913c <_dtoa_r+0x34>
 8009132:	4ba7      	ldr	r3, [pc, #668]	@ (80093d0 <_dtoa_r+0x2c8>)
 8009134:	21ef      	movs	r1, #239	@ 0xef
 8009136:	48a7      	ldr	r0, [pc, #668]	@ (80093d4 <_dtoa_r+0x2cc>)
 8009138:	f7ff ff40 	bl	8008fbc <__assert_func>
 800913c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009140:	6007      	str	r7, [r0, #0]
 8009142:	60c7      	str	r7, [r0, #12]
 8009144:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009148:	6819      	ldr	r1, [r3, #0]
 800914a:	b159      	cbz	r1, 8009164 <_dtoa_r+0x5c>
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	604a      	str	r2, [r1, #4]
 8009150:	2301      	movs	r3, #1
 8009152:	4093      	lsls	r3, r2
 8009154:	608b      	str	r3, [r1, #8]
 8009156:	4658      	mov	r0, fp
 8009158:	f000 feda 	bl	8009f10 <_Bfree>
 800915c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	1e2b      	subs	r3, r5, #0
 8009166:	bfb9      	ittee	lt
 8009168:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800916c:	9303      	strlt	r3, [sp, #12]
 800916e:	2300      	movge	r3, #0
 8009170:	6033      	strge	r3, [r6, #0]
 8009172:	9f03      	ldr	r7, [sp, #12]
 8009174:	4b98      	ldr	r3, [pc, #608]	@ (80093d8 <_dtoa_r+0x2d0>)
 8009176:	bfbc      	itt	lt
 8009178:	2201      	movlt	r2, #1
 800917a:	6032      	strlt	r2, [r6, #0]
 800917c:	43bb      	bics	r3, r7
 800917e:	d112      	bne.n	80091a6 <_dtoa_r+0x9e>
 8009180:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009182:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800918c:	4323      	orrs	r3, r4
 800918e:	f000 854d 	beq.w	8009c2c <_dtoa_r+0xb24>
 8009192:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009194:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80093ec <_dtoa_r+0x2e4>
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 854f 	beq.w	8009c3c <_dtoa_r+0xb34>
 800919e:	f10a 0303 	add.w	r3, sl, #3
 80091a2:	f000 bd49 	b.w	8009c38 <_dtoa_r+0xb30>
 80091a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091aa:	2200      	movs	r2, #0
 80091ac:	ec51 0b17 	vmov	r0, r1, d7
 80091b0:	2300      	movs	r3, #0
 80091b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80091b6:	f7f7 fc87 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ba:	4680      	mov	r8, r0
 80091bc:	b158      	cbz	r0, 80091d6 <_dtoa_r+0xce>
 80091be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091c0:	2301      	movs	r3, #1
 80091c2:	6013      	str	r3, [r2, #0]
 80091c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091c6:	b113      	cbz	r3, 80091ce <_dtoa_r+0xc6>
 80091c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091ca:	4b84      	ldr	r3, [pc, #528]	@ (80093dc <_dtoa_r+0x2d4>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80093f0 <_dtoa_r+0x2e8>
 80091d2:	f000 bd33 	b.w	8009c3c <_dtoa_r+0xb34>
 80091d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80091da:	aa16      	add	r2, sp, #88	@ 0x58
 80091dc:	a917      	add	r1, sp, #92	@ 0x5c
 80091de:	4658      	mov	r0, fp
 80091e0:	f001 fa3a 	bl	800a658 <__d2b>
 80091e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80091e8:	4681      	mov	r9, r0
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	d077      	beq.n	80092de <_dtoa_r+0x1d6>
 80091ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80091f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009200:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009204:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009208:	4619      	mov	r1, r3
 800920a:	2200      	movs	r2, #0
 800920c:	4b74      	ldr	r3, [pc, #464]	@ (80093e0 <_dtoa_r+0x2d8>)
 800920e:	f7f7 f83b 	bl	8000288 <__aeabi_dsub>
 8009212:	a369      	add	r3, pc, #420	@ (adr r3, 80093b8 <_dtoa_r+0x2b0>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f7 f9ee 	bl	80005f8 <__aeabi_dmul>
 800921c:	a368      	add	r3, pc, #416	@ (adr r3, 80093c0 <_dtoa_r+0x2b8>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 f833 	bl	800028c <__adddf3>
 8009226:	4604      	mov	r4, r0
 8009228:	4630      	mov	r0, r6
 800922a:	460d      	mov	r5, r1
 800922c:	f7f7 f97a 	bl	8000524 <__aeabi_i2d>
 8009230:	a365      	add	r3, pc, #404	@ (adr r3, 80093c8 <_dtoa_r+0x2c0>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f9df 	bl	80005f8 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4620      	mov	r0, r4
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 f823 	bl	800028c <__adddf3>
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	f7f7 fc85 	bl	8000b58 <__aeabi_d2iz>
 800924e:	2200      	movs	r2, #0
 8009250:	4607      	mov	r7, r0
 8009252:	2300      	movs	r3, #0
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	f7f7 fc40 	bl	8000adc <__aeabi_dcmplt>
 800925c:	b140      	cbz	r0, 8009270 <_dtoa_r+0x168>
 800925e:	4638      	mov	r0, r7
 8009260:	f7f7 f960 	bl	8000524 <__aeabi_i2d>
 8009264:	4622      	mov	r2, r4
 8009266:	462b      	mov	r3, r5
 8009268:	f7f7 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800926c:	b900      	cbnz	r0, 8009270 <_dtoa_r+0x168>
 800926e:	3f01      	subs	r7, #1
 8009270:	2f16      	cmp	r7, #22
 8009272:	d851      	bhi.n	8009318 <_dtoa_r+0x210>
 8009274:	4b5b      	ldr	r3, [pc, #364]	@ (80093e4 <_dtoa_r+0x2dc>)
 8009276:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009282:	f7f7 fc2b 	bl	8000adc <__aeabi_dcmplt>
 8009286:	2800      	cmp	r0, #0
 8009288:	d048      	beq.n	800931c <_dtoa_r+0x214>
 800928a:	3f01      	subs	r7, #1
 800928c:	2300      	movs	r3, #0
 800928e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009290:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009292:	1b9b      	subs	r3, r3, r6
 8009294:	1e5a      	subs	r2, r3, #1
 8009296:	bf44      	itt	mi
 8009298:	f1c3 0801 	rsbmi	r8, r3, #1
 800929c:	2300      	movmi	r3, #0
 800929e:	9208      	str	r2, [sp, #32]
 80092a0:	bf54      	ite	pl
 80092a2:	f04f 0800 	movpl.w	r8, #0
 80092a6:	9308      	strmi	r3, [sp, #32]
 80092a8:	2f00      	cmp	r7, #0
 80092aa:	db39      	blt.n	8009320 <_dtoa_r+0x218>
 80092ac:	9b08      	ldr	r3, [sp, #32]
 80092ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80092b0:	443b      	add	r3, r7
 80092b2:	9308      	str	r3, [sp, #32]
 80092b4:	2300      	movs	r3, #0
 80092b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80092b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ba:	2b09      	cmp	r3, #9
 80092bc:	d864      	bhi.n	8009388 <_dtoa_r+0x280>
 80092be:	2b05      	cmp	r3, #5
 80092c0:	bfc4      	itt	gt
 80092c2:	3b04      	subgt	r3, #4
 80092c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80092c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c8:	f1a3 0302 	sub.w	r3, r3, #2
 80092cc:	bfcc      	ite	gt
 80092ce:	2400      	movgt	r4, #0
 80092d0:	2401      	movle	r4, #1
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d863      	bhi.n	800939e <_dtoa_r+0x296>
 80092d6:	e8df f003 	tbb	[pc, r3]
 80092da:	372a      	.short	0x372a
 80092dc:	5535      	.short	0x5535
 80092de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80092e2:	441e      	add	r6, r3
 80092e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80092e8:	2b20      	cmp	r3, #32
 80092ea:	bfc1      	itttt	gt
 80092ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80092f0:	409f      	lslgt	r7, r3
 80092f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80092f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80092fa:	bfd6      	itet	le
 80092fc:	f1c3 0320 	rsble	r3, r3, #32
 8009300:	ea47 0003 	orrgt.w	r0, r7, r3
 8009304:	fa04 f003 	lslle.w	r0, r4, r3
 8009308:	f7f7 f8fc 	bl	8000504 <__aeabi_ui2d>
 800930c:	2201      	movs	r2, #1
 800930e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009312:	3e01      	subs	r6, #1
 8009314:	9214      	str	r2, [sp, #80]	@ 0x50
 8009316:	e777      	b.n	8009208 <_dtoa_r+0x100>
 8009318:	2301      	movs	r3, #1
 800931a:	e7b8      	b.n	800928e <_dtoa_r+0x186>
 800931c:	9012      	str	r0, [sp, #72]	@ 0x48
 800931e:	e7b7      	b.n	8009290 <_dtoa_r+0x188>
 8009320:	427b      	negs	r3, r7
 8009322:	930a      	str	r3, [sp, #40]	@ 0x28
 8009324:	2300      	movs	r3, #0
 8009326:	eba8 0807 	sub.w	r8, r8, r7
 800932a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800932c:	e7c4      	b.n	80092b8 <_dtoa_r+0x1b0>
 800932e:	2300      	movs	r3, #0
 8009330:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009334:	2b00      	cmp	r3, #0
 8009336:	dc35      	bgt.n	80093a4 <_dtoa_r+0x29c>
 8009338:	2301      	movs	r3, #1
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	9307      	str	r3, [sp, #28]
 800933e:	461a      	mov	r2, r3
 8009340:	920e      	str	r2, [sp, #56]	@ 0x38
 8009342:	e00b      	b.n	800935c <_dtoa_r+0x254>
 8009344:	2301      	movs	r3, #1
 8009346:	e7f3      	b.n	8009330 <_dtoa_r+0x228>
 8009348:	2300      	movs	r3, #0
 800934a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800934c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800934e:	18fb      	adds	r3, r7, r3
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	3301      	adds	r3, #1
 8009354:	2b01      	cmp	r3, #1
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	bfb8      	it	lt
 800935a:	2301      	movlt	r3, #1
 800935c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009360:	2100      	movs	r1, #0
 8009362:	2204      	movs	r2, #4
 8009364:	f102 0514 	add.w	r5, r2, #20
 8009368:	429d      	cmp	r5, r3
 800936a:	d91f      	bls.n	80093ac <_dtoa_r+0x2a4>
 800936c:	6041      	str	r1, [r0, #4]
 800936e:	4658      	mov	r0, fp
 8009370:	f000 fd8e 	bl	8009e90 <_Balloc>
 8009374:	4682      	mov	sl, r0
 8009376:	2800      	cmp	r0, #0
 8009378:	d13c      	bne.n	80093f4 <_dtoa_r+0x2ec>
 800937a:	4b1b      	ldr	r3, [pc, #108]	@ (80093e8 <_dtoa_r+0x2e0>)
 800937c:	4602      	mov	r2, r0
 800937e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009382:	e6d8      	b.n	8009136 <_dtoa_r+0x2e>
 8009384:	2301      	movs	r3, #1
 8009386:	e7e0      	b.n	800934a <_dtoa_r+0x242>
 8009388:	2401      	movs	r4, #1
 800938a:	2300      	movs	r3, #0
 800938c:	9309      	str	r3, [sp, #36]	@ 0x24
 800938e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009390:	f04f 33ff 	mov.w	r3, #4294967295
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	2200      	movs	r2, #0
 800939a:	2312      	movs	r3, #18
 800939c:	e7d0      	b.n	8009340 <_dtoa_r+0x238>
 800939e:	2301      	movs	r3, #1
 80093a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093a2:	e7f5      	b.n	8009390 <_dtoa_r+0x288>
 80093a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	9307      	str	r3, [sp, #28]
 80093aa:	e7d7      	b.n	800935c <_dtoa_r+0x254>
 80093ac:	3101      	adds	r1, #1
 80093ae:	0052      	lsls	r2, r2, #1
 80093b0:	e7d8      	b.n	8009364 <_dtoa_r+0x25c>
 80093b2:	bf00      	nop
 80093b4:	f3af 8000 	nop.w
 80093b8:	636f4361 	.word	0x636f4361
 80093bc:	3fd287a7 	.word	0x3fd287a7
 80093c0:	8b60c8b3 	.word	0x8b60c8b3
 80093c4:	3fc68a28 	.word	0x3fc68a28
 80093c8:	509f79fb 	.word	0x509f79fb
 80093cc:	3fd34413 	.word	0x3fd34413
 80093d0:	0800c6e4 	.word	0x0800c6e4
 80093d4:	0800c7d5 	.word	0x0800c7d5
 80093d8:	7ff00000 	.word	0x7ff00000
 80093dc:	0800c764 	.word	0x0800c764
 80093e0:	3ff80000 	.word	0x3ff80000
 80093e4:	0800c8d0 	.word	0x0800c8d0
 80093e8:	0800c82d 	.word	0x0800c82d
 80093ec:	0800c7d1 	.word	0x0800c7d1
 80093f0:	0800c763 	.word	0x0800c763
 80093f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093f8:	6018      	str	r0, [r3, #0]
 80093fa:	9b07      	ldr	r3, [sp, #28]
 80093fc:	2b0e      	cmp	r3, #14
 80093fe:	f200 80a4 	bhi.w	800954a <_dtoa_r+0x442>
 8009402:	2c00      	cmp	r4, #0
 8009404:	f000 80a1 	beq.w	800954a <_dtoa_r+0x442>
 8009408:	2f00      	cmp	r7, #0
 800940a:	dd33      	ble.n	8009474 <_dtoa_r+0x36c>
 800940c:	4bad      	ldr	r3, [pc, #692]	@ (80096c4 <_dtoa_r+0x5bc>)
 800940e:	f007 020f 	and.w	r2, r7, #15
 8009412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009416:	ed93 7b00 	vldr	d7, [r3]
 800941a:	05f8      	lsls	r0, r7, #23
 800941c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009420:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009424:	d516      	bpl.n	8009454 <_dtoa_r+0x34c>
 8009426:	4ba8      	ldr	r3, [pc, #672]	@ (80096c8 <_dtoa_r+0x5c0>)
 8009428:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800942c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009430:	f7f7 fa0c 	bl	800084c <__aeabi_ddiv>
 8009434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009438:	f004 040f 	and.w	r4, r4, #15
 800943c:	2603      	movs	r6, #3
 800943e:	4da2      	ldr	r5, [pc, #648]	@ (80096c8 <_dtoa_r+0x5c0>)
 8009440:	b954      	cbnz	r4, 8009458 <_dtoa_r+0x350>
 8009442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800944a:	f7f7 f9ff 	bl	800084c <__aeabi_ddiv>
 800944e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009452:	e028      	b.n	80094a6 <_dtoa_r+0x39e>
 8009454:	2602      	movs	r6, #2
 8009456:	e7f2      	b.n	800943e <_dtoa_r+0x336>
 8009458:	07e1      	lsls	r1, r4, #31
 800945a:	d508      	bpl.n	800946e <_dtoa_r+0x366>
 800945c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009460:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009464:	f7f7 f8c8 	bl	80005f8 <__aeabi_dmul>
 8009468:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800946c:	3601      	adds	r6, #1
 800946e:	1064      	asrs	r4, r4, #1
 8009470:	3508      	adds	r5, #8
 8009472:	e7e5      	b.n	8009440 <_dtoa_r+0x338>
 8009474:	f000 80d2 	beq.w	800961c <_dtoa_r+0x514>
 8009478:	427c      	negs	r4, r7
 800947a:	4b92      	ldr	r3, [pc, #584]	@ (80096c4 <_dtoa_r+0x5bc>)
 800947c:	4d92      	ldr	r5, [pc, #584]	@ (80096c8 <_dtoa_r+0x5c0>)
 800947e:	f004 020f 	and.w	r2, r4, #15
 8009482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800948e:	f7f7 f8b3 	bl	80005f8 <__aeabi_dmul>
 8009492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009496:	1124      	asrs	r4, r4, #4
 8009498:	2300      	movs	r3, #0
 800949a:	2602      	movs	r6, #2
 800949c:	2c00      	cmp	r4, #0
 800949e:	f040 80b2 	bne.w	8009606 <_dtoa_r+0x4fe>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1d3      	bne.n	800944e <_dtoa_r+0x346>
 80094a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 80b7 	beq.w	8009620 <_dtoa_r+0x518>
 80094b2:	4b86      	ldr	r3, [pc, #536]	@ (80096cc <_dtoa_r+0x5c4>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	4620      	mov	r0, r4
 80094b8:	4629      	mov	r1, r5
 80094ba:	f7f7 fb0f 	bl	8000adc <__aeabi_dcmplt>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f000 80ae 	beq.w	8009620 <_dtoa_r+0x518>
 80094c4:	9b07      	ldr	r3, [sp, #28]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 80aa 	beq.w	8009620 <_dtoa_r+0x518>
 80094cc:	9b00      	ldr	r3, [sp, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	dd37      	ble.n	8009542 <_dtoa_r+0x43a>
 80094d2:	1e7b      	subs	r3, r7, #1
 80094d4:	9304      	str	r3, [sp, #16]
 80094d6:	4620      	mov	r0, r4
 80094d8:	4b7d      	ldr	r3, [pc, #500]	@ (80096d0 <_dtoa_r+0x5c8>)
 80094da:	2200      	movs	r2, #0
 80094dc:	4629      	mov	r1, r5
 80094de:	f7f7 f88b 	bl	80005f8 <__aeabi_dmul>
 80094e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094e6:	9c00      	ldr	r4, [sp, #0]
 80094e8:	3601      	adds	r6, #1
 80094ea:	4630      	mov	r0, r6
 80094ec:	f7f7 f81a 	bl	8000524 <__aeabi_i2d>
 80094f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094f4:	f7f7 f880 	bl	80005f8 <__aeabi_dmul>
 80094f8:	4b76      	ldr	r3, [pc, #472]	@ (80096d4 <_dtoa_r+0x5cc>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	f7f6 fec6 	bl	800028c <__adddf3>
 8009500:	4605      	mov	r5, r0
 8009502:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009506:	2c00      	cmp	r4, #0
 8009508:	f040 808d 	bne.w	8009626 <_dtoa_r+0x51e>
 800950c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009510:	4b71      	ldr	r3, [pc, #452]	@ (80096d8 <_dtoa_r+0x5d0>)
 8009512:	2200      	movs	r2, #0
 8009514:	f7f6 feb8 	bl	8000288 <__aeabi_dsub>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009520:	462a      	mov	r2, r5
 8009522:	4633      	mov	r3, r6
 8009524:	f7f7 faf8 	bl	8000b18 <__aeabi_dcmpgt>
 8009528:	2800      	cmp	r0, #0
 800952a:	f040 828b 	bne.w	8009a44 <_dtoa_r+0x93c>
 800952e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009532:	462a      	mov	r2, r5
 8009534:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009538:	f7f7 fad0 	bl	8000adc <__aeabi_dcmplt>
 800953c:	2800      	cmp	r0, #0
 800953e:	f040 8128 	bne.w	8009792 <_dtoa_r+0x68a>
 8009542:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009546:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800954a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800954c:	2b00      	cmp	r3, #0
 800954e:	f2c0 815a 	blt.w	8009806 <_dtoa_r+0x6fe>
 8009552:	2f0e      	cmp	r7, #14
 8009554:	f300 8157 	bgt.w	8009806 <_dtoa_r+0x6fe>
 8009558:	4b5a      	ldr	r3, [pc, #360]	@ (80096c4 <_dtoa_r+0x5bc>)
 800955a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800955e:	ed93 7b00 	vldr	d7, [r3]
 8009562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	ed8d 7b00 	vstr	d7, [sp]
 800956a:	da03      	bge.n	8009574 <_dtoa_r+0x46c>
 800956c:	9b07      	ldr	r3, [sp, #28]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f340 8101 	ble.w	8009776 <_dtoa_r+0x66e>
 8009574:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009578:	4656      	mov	r6, sl
 800957a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800957e:	4620      	mov	r0, r4
 8009580:	4629      	mov	r1, r5
 8009582:	f7f7 f963 	bl	800084c <__aeabi_ddiv>
 8009586:	f7f7 fae7 	bl	8000b58 <__aeabi_d2iz>
 800958a:	4680      	mov	r8, r0
 800958c:	f7f6 ffca 	bl	8000524 <__aeabi_i2d>
 8009590:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009594:	f7f7 f830 	bl	80005f8 <__aeabi_dmul>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4620      	mov	r0, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095a4:	f7f6 fe70 	bl	8000288 <__aeabi_dsub>
 80095a8:	f806 4b01 	strb.w	r4, [r6], #1
 80095ac:	9d07      	ldr	r5, [sp, #28]
 80095ae:	eba6 040a 	sub.w	r4, r6, sl
 80095b2:	42a5      	cmp	r5, r4
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	f040 8117 	bne.w	80097ea <_dtoa_r+0x6e2>
 80095bc:	f7f6 fe66 	bl	800028c <__adddf3>
 80095c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095c4:	4604      	mov	r4, r0
 80095c6:	460d      	mov	r5, r1
 80095c8:	f7f7 faa6 	bl	8000b18 <__aeabi_dcmpgt>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f040 80f9 	bne.w	80097c4 <_dtoa_r+0x6bc>
 80095d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 80095de:	b118      	cbz	r0, 80095e8 <_dtoa_r+0x4e0>
 80095e0:	f018 0f01 	tst.w	r8, #1
 80095e4:	f040 80ee 	bne.w	80097c4 <_dtoa_r+0x6bc>
 80095e8:	4649      	mov	r1, r9
 80095ea:	4658      	mov	r0, fp
 80095ec:	f000 fc90 	bl	8009f10 <_Bfree>
 80095f0:	2300      	movs	r3, #0
 80095f2:	7033      	strb	r3, [r6, #0]
 80095f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095f6:	3701      	adds	r7, #1
 80095f8:	601f      	str	r7, [r3, #0]
 80095fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 831d 	beq.w	8009c3c <_dtoa_r+0xb34>
 8009602:	601e      	str	r6, [r3, #0]
 8009604:	e31a      	b.n	8009c3c <_dtoa_r+0xb34>
 8009606:	07e2      	lsls	r2, r4, #31
 8009608:	d505      	bpl.n	8009616 <_dtoa_r+0x50e>
 800960a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	3601      	adds	r6, #1
 8009614:	2301      	movs	r3, #1
 8009616:	1064      	asrs	r4, r4, #1
 8009618:	3508      	adds	r5, #8
 800961a:	e73f      	b.n	800949c <_dtoa_r+0x394>
 800961c:	2602      	movs	r6, #2
 800961e:	e742      	b.n	80094a6 <_dtoa_r+0x39e>
 8009620:	9c07      	ldr	r4, [sp, #28]
 8009622:	9704      	str	r7, [sp, #16]
 8009624:	e761      	b.n	80094ea <_dtoa_r+0x3e2>
 8009626:	4b27      	ldr	r3, [pc, #156]	@ (80096c4 <_dtoa_r+0x5bc>)
 8009628:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800962a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800962e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009632:	4454      	add	r4, sl
 8009634:	2900      	cmp	r1, #0
 8009636:	d053      	beq.n	80096e0 <_dtoa_r+0x5d8>
 8009638:	4928      	ldr	r1, [pc, #160]	@ (80096dc <_dtoa_r+0x5d4>)
 800963a:	2000      	movs	r0, #0
 800963c:	f7f7 f906 	bl	800084c <__aeabi_ddiv>
 8009640:	4633      	mov	r3, r6
 8009642:	462a      	mov	r2, r5
 8009644:	f7f6 fe20 	bl	8000288 <__aeabi_dsub>
 8009648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800964c:	4656      	mov	r6, sl
 800964e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009652:	f7f7 fa81 	bl	8000b58 <__aeabi_d2iz>
 8009656:	4605      	mov	r5, r0
 8009658:	f7f6 ff64 	bl	8000524 <__aeabi_i2d>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009664:	f7f6 fe10 	bl	8000288 <__aeabi_dsub>
 8009668:	3530      	adds	r5, #48	@ 0x30
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009672:	f806 5b01 	strb.w	r5, [r6], #1
 8009676:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800967a:	f7f7 fa2f 	bl	8000adc <__aeabi_dcmplt>
 800967e:	2800      	cmp	r0, #0
 8009680:	d171      	bne.n	8009766 <_dtoa_r+0x65e>
 8009682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009686:	4911      	ldr	r1, [pc, #68]	@ (80096cc <_dtoa_r+0x5c4>)
 8009688:	2000      	movs	r0, #0
 800968a:	f7f6 fdfd 	bl	8000288 <__aeabi_dsub>
 800968e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009692:	f7f7 fa23 	bl	8000adc <__aeabi_dcmplt>
 8009696:	2800      	cmp	r0, #0
 8009698:	f040 8095 	bne.w	80097c6 <_dtoa_r+0x6be>
 800969c:	42a6      	cmp	r6, r4
 800969e:	f43f af50 	beq.w	8009542 <_dtoa_r+0x43a>
 80096a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096a6:	4b0a      	ldr	r3, [pc, #40]	@ (80096d0 <_dtoa_r+0x5c8>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	f7f6 ffa5 	bl	80005f8 <__aeabi_dmul>
 80096ae:	4b08      	ldr	r3, [pc, #32]	@ (80096d0 <_dtoa_r+0x5c8>)
 80096b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096b4:	2200      	movs	r2, #0
 80096b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ba:	f7f6 ff9d 	bl	80005f8 <__aeabi_dmul>
 80096be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096c2:	e7c4      	b.n	800964e <_dtoa_r+0x546>
 80096c4:	0800c8d0 	.word	0x0800c8d0
 80096c8:	0800c8a8 	.word	0x0800c8a8
 80096cc:	3ff00000 	.word	0x3ff00000
 80096d0:	40240000 	.word	0x40240000
 80096d4:	401c0000 	.word	0x401c0000
 80096d8:	40140000 	.word	0x40140000
 80096dc:	3fe00000 	.word	0x3fe00000
 80096e0:	4631      	mov	r1, r6
 80096e2:	4628      	mov	r0, r5
 80096e4:	f7f6 ff88 	bl	80005f8 <__aeabi_dmul>
 80096e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80096ee:	4656      	mov	r6, sl
 80096f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f4:	f7f7 fa30 	bl	8000b58 <__aeabi_d2iz>
 80096f8:	4605      	mov	r5, r0
 80096fa:	f7f6 ff13 	bl	8000524 <__aeabi_i2d>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009706:	f7f6 fdbf 	bl	8000288 <__aeabi_dsub>
 800970a:	3530      	adds	r5, #48	@ 0x30
 800970c:	f806 5b01 	strb.w	r5, [r6], #1
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	42a6      	cmp	r6, r4
 8009716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800971a:	f04f 0200 	mov.w	r2, #0
 800971e:	d124      	bne.n	800976a <_dtoa_r+0x662>
 8009720:	4bac      	ldr	r3, [pc, #688]	@ (80099d4 <_dtoa_r+0x8cc>)
 8009722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009726:	f7f6 fdb1 	bl	800028c <__adddf3>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009732:	f7f7 f9f1 	bl	8000b18 <__aeabi_dcmpgt>
 8009736:	2800      	cmp	r0, #0
 8009738:	d145      	bne.n	80097c6 <_dtoa_r+0x6be>
 800973a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800973e:	49a5      	ldr	r1, [pc, #660]	@ (80099d4 <_dtoa_r+0x8cc>)
 8009740:	2000      	movs	r0, #0
 8009742:	f7f6 fda1 	bl	8000288 <__aeabi_dsub>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800974e:	f7f7 f9c5 	bl	8000adc <__aeabi_dcmplt>
 8009752:	2800      	cmp	r0, #0
 8009754:	f43f aef5 	beq.w	8009542 <_dtoa_r+0x43a>
 8009758:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800975a:	1e73      	subs	r3, r6, #1
 800975c:	9315      	str	r3, [sp, #84]	@ 0x54
 800975e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009762:	2b30      	cmp	r3, #48	@ 0x30
 8009764:	d0f8      	beq.n	8009758 <_dtoa_r+0x650>
 8009766:	9f04      	ldr	r7, [sp, #16]
 8009768:	e73e      	b.n	80095e8 <_dtoa_r+0x4e0>
 800976a:	4b9b      	ldr	r3, [pc, #620]	@ (80099d8 <_dtoa_r+0x8d0>)
 800976c:	f7f6 ff44 	bl	80005f8 <__aeabi_dmul>
 8009770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009774:	e7bc      	b.n	80096f0 <_dtoa_r+0x5e8>
 8009776:	d10c      	bne.n	8009792 <_dtoa_r+0x68a>
 8009778:	4b98      	ldr	r3, [pc, #608]	@ (80099dc <_dtoa_r+0x8d4>)
 800977a:	2200      	movs	r2, #0
 800977c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009780:	f7f6 ff3a 	bl	80005f8 <__aeabi_dmul>
 8009784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009788:	f7f7 f9bc 	bl	8000b04 <__aeabi_dcmpge>
 800978c:	2800      	cmp	r0, #0
 800978e:	f000 8157 	beq.w	8009a40 <_dtoa_r+0x938>
 8009792:	2400      	movs	r4, #0
 8009794:	4625      	mov	r5, r4
 8009796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009798:	43db      	mvns	r3, r3
 800979a:	9304      	str	r3, [sp, #16]
 800979c:	4656      	mov	r6, sl
 800979e:	2700      	movs	r7, #0
 80097a0:	4621      	mov	r1, r4
 80097a2:	4658      	mov	r0, fp
 80097a4:	f000 fbb4 	bl	8009f10 <_Bfree>
 80097a8:	2d00      	cmp	r5, #0
 80097aa:	d0dc      	beq.n	8009766 <_dtoa_r+0x65e>
 80097ac:	b12f      	cbz	r7, 80097ba <_dtoa_r+0x6b2>
 80097ae:	42af      	cmp	r7, r5
 80097b0:	d003      	beq.n	80097ba <_dtoa_r+0x6b2>
 80097b2:	4639      	mov	r1, r7
 80097b4:	4658      	mov	r0, fp
 80097b6:	f000 fbab 	bl	8009f10 <_Bfree>
 80097ba:	4629      	mov	r1, r5
 80097bc:	4658      	mov	r0, fp
 80097be:	f000 fba7 	bl	8009f10 <_Bfree>
 80097c2:	e7d0      	b.n	8009766 <_dtoa_r+0x65e>
 80097c4:	9704      	str	r7, [sp, #16]
 80097c6:	4633      	mov	r3, r6
 80097c8:	461e      	mov	r6, r3
 80097ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097ce:	2a39      	cmp	r2, #57	@ 0x39
 80097d0:	d107      	bne.n	80097e2 <_dtoa_r+0x6da>
 80097d2:	459a      	cmp	sl, r3
 80097d4:	d1f8      	bne.n	80097c8 <_dtoa_r+0x6c0>
 80097d6:	9a04      	ldr	r2, [sp, #16]
 80097d8:	3201      	adds	r2, #1
 80097da:	9204      	str	r2, [sp, #16]
 80097dc:	2230      	movs	r2, #48	@ 0x30
 80097de:	f88a 2000 	strb.w	r2, [sl]
 80097e2:	781a      	ldrb	r2, [r3, #0]
 80097e4:	3201      	adds	r2, #1
 80097e6:	701a      	strb	r2, [r3, #0]
 80097e8:	e7bd      	b.n	8009766 <_dtoa_r+0x65e>
 80097ea:	4b7b      	ldr	r3, [pc, #492]	@ (80099d8 <_dtoa_r+0x8d0>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	f7f6 ff03 	bl	80005f8 <__aeabi_dmul>
 80097f2:	2200      	movs	r2, #0
 80097f4:	2300      	movs	r3, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	460d      	mov	r5, r1
 80097fa:	f7f7 f965 	bl	8000ac8 <__aeabi_dcmpeq>
 80097fe:	2800      	cmp	r0, #0
 8009800:	f43f aebb 	beq.w	800957a <_dtoa_r+0x472>
 8009804:	e6f0      	b.n	80095e8 <_dtoa_r+0x4e0>
 8009806:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009808:	2a00      	cmp	r2, #0
 800980a:	f000 80db 	beq.w	80099c4 <_dtoa_r+0x8bc>
 800980e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009810:	2a01      	cmp	r2, #1
 8009812:	f300 80bf 	bgt.w	8009994 <_dtoa_r+0x88c>
 8009816:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009818:	2a00      	cmp	r2, #0
 800981a:	f000 80b7 	beq.w	800998c <_dtoa_r+0x884>
 800981e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009822:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009824:	4646      	mov	r6, r8
 8009826:	9a08      	ldr	r2, [sp, #32]
 8009828:	2101      	movs	r1, #1
 800982a:	441a      	add	r2, r3
 800982c:	4658      	mov	r0, fp
 800982e:	4498      	add	r8, r3
 8009830:	9208      	str	r2, [sp, #32]
 8009832:	f000 fc6b 	bl	800a10c <__i2b>
 8009836:	4605      	mov	r5, r0
 8009838:	b15e      	cbz	r6, 8009852 <_dtoa_r+0x74a>
 800983a:	9b08      	ldr	r3, [sp, #32]
 800983c:	2b00      	cmp	r3, #0
 800983e:	dd08      	ble.n	8009852 <_dtoa_r+0x74a>
 8009840:	42b3      	cmp	r3, r6
 8009842:	9a08      	ldr	r2, [sp, #32]
 8009844:	bfa8      	it	ge
 8009846:	4633      	movge	r3, r6
 8009848:	eba8 0803 	sub.w	r8, r8, r3
 800984c:	1af6      	subs	r6, r6, r3
 800984e:	1ad3      	subs	r3, r2, r3
 8009850:	9308      	str	r3, [sp, #32]
 8009852:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009854:	b1f3      	cbz	r3, 8009894 <_dtoa_r+0x78c>
 8009856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 80b7 	beq.w	80099cc <_dtoa_r+0x8c4>
 800985e:	b18c      	cbz	r4, 8009884 <_dtoa_r+0x77c>
 8009860:	4629      	mov	r1, r5
 8009862:	4622      	mov	r2, r4
 8009864:	4658      	mov	r0, fp
 8009866:	f000 fd11 	bl	800a28c <__pow5mult>
 800986a:	464a      	mov	r2, r9
 800986c:	4601      	mov	r1, r0
 800986e:	4605      	mov	r5, r0
 8009870:	4658      	mov	r0, fp
 8009872:	f000 fc61 	bl	800a138 <__multiply>
 8009876:	4649      	mov	r1, r9
 8009878:	9004      	str	r0, [sp, #16]
 800987a:	4658      	mov	r0, fp
 800987c:	f000 fb48 	bl	8009f10 <_Bfree>
 8009880:	9b04      	ldr	r3, [sp, #16]
 8009882:	4699      	mov	r9, r3
 8009884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009886:	1b1a      	subs	r2, r3, r4
 8009888:	d004      	beq.n	8009894 <_dtoa_r+0x78c>
 800988a:	4649      	mov	r1, r9
 800988c:	4658      	mov	r0, fp
 800988e:	f000 fcfd 	bl	800a28c <__pow5mult>
 8009892:	4681      	mov	r9, r0
 8009894:	2101      	movs	r1, #1
 8009896:	4658      	mov	r0, fp
 8009898:	f000 fc38 	bl	800a10c <__i2b>
 800989c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800989e:	4604      	mov	r4, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 81cf 	beq.w	8009c44 <_dtoa_r+0xb3c>
 80098a6:	461a      	mov	r2, r3
 80098a8:	4601      	mov	r1, r0
 80098aa:	4658      	mov	r0, fp
 80098ac:	f000 fcee 	bl	800a28c <__pow5mult>
 80098b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	4604      	mov	r4, r0
 80098b6:	f300 8095 	bgt.w	80099e4 <_dtoa_r+0x8dc>
 80098ba:	9b02      	ldr	r3, [sp, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f040 8087 	bne.w	80099d0 <_dtoa_r+0x8c8>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f040 8089 	bne.w	80099e0 <_dtoa_r+0x8d8>
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098d4:	0d1b      	lsrs	r3, r3, #20
 80098d6:	051b      	lsls	r3, r3, #20
 80098d8:	b12b      	cbz	r3, 80098e6 <_dtoa_r+0x7de>
 80098da:	9b08      	ldr	r3, [sp, #32]
 80098dc:	3301      	adds	r3, #1
 80098de:	9308      	str	r3, [sp, #32]
 80098e0:	f108 0801 	add.w	r8, r8, #1
 80098e4:	2301      	movs	r3, #1
 80098e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 81b0 	beq.w	8009c50 <_dtoa_r+0xb48>
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098f6:	6918      	ldr	r0, [r3, #16]
 80098f8:	f000 fbbc 	bl	800a074 <__hi0bits>
 80098fc:	f1c0 0020 	rsb	r0, r0, #32
 8009900:	9b08      	ldr	r3, [sp, #32]
 8009902:	4418      	add	r0, r3
 8009904:	f010 001f 	ands.w	r0, r0, #31
 8009908:	d077      	beq.n	80099fa <_dtoa_r+0x8f2>
 800990a:	f1c0 0320 	rsb	r3, r0, #32
 800990e:	2b04      	cmp	r3, #4
 8009910:	dd6b      	ble.n	80099ea <_dtoa_r+0x8e2>
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	f1c0 001c 	rsb	r0, r0, #28
 8009918:	4403      	add	r3, r0
 800991a:	4480      	add	r8, r0
 800991c:	4406      	add	r6, r0
 800991e:	9308      	str	r3, [sp, #32]
 8009920:	f1b8 0f00 	cmp.w	r8, #0
 8009924:	dd05      	ble.n	8009932 <_dtoa_r+0x82a>
 8009926:	4649      	mov	r1, r9
 8009928:	4642      	mov	r2, r8
 800992a:	4658      	mov	r0, fp
 800992c:	f000 fd08 	bl	800a340 <__lshift>
 8009930:	4681      	mov	r9, r0
 8009932:	9b08      	ldr	r3, [sp, #32]
 8009934:	2b00      	cmp	r3, #0
 8009936:	dd05      	ble.n	8009944 <_dtoa_r+0x83c>
 8009938:	4621      	mov	r1, r4
 800993a:	461a      	mov	r2, r3
 800993c:	4658      	mov	r0, fp
 800993e:	f000 fcff 	bl	800a340 <__lshift>
 8009942:	4604      	mov	r4, r0
 8009944:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009946:	2b00      	cmp	r3, #0
 8009948:	d059      	beq.n	80099fe <_dtoa_r+0x8f6>
 800994a:	4621      	mov	r1, r4
 800994c:	4648      	mov	r0, r9
 800994e:	f000 fd63 	bl	800a418 <__mcmp>
 8009952:	2800      	cmp	r0, #0
 8009954:	da53      	bge.n	80099fe <_dtoa_r+0x8f6>
 8009956:	1e7b      	subs	r3, r7, #1
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	4649      	mov	r1, r9
 800995c:	2300      	movs	r3, #0
 800995e:	220a      	movs	r2, #10
 8009960:	4658      	mov	r0, fp
 8009962:	f000 faf7 	bl	8009f54 <__multadd>
 8009966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009968:	4681      	mov	r9, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 8172 	beq.w	8009c54 <_dtoa_r+0xb4c>
 8009970:	2300      	movs	r3, #0
 8009972:	4629      	mov	r1, r5
 8009974:	220a      	movs	r2, #10
 8009976:	4658      	mov	r0, fp
 8009978:	f000 faec 	bl	8009f54 <__multadd>
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	4605      	mov	r5, r0
 8009982:	dc67      	bgt.n	8009a54 <_dtoa_r+0x94c>
 8009984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009986:	2b02      	cmp	r3, #2
 8009988:	dc41      	bgt.n	8009a0e <_dtoa_r+0x906>
 800998a:	e063      	b.n	8009a54 <_dtoa_r+0x94c>
 800998c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800998e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009992:	e746      	b.n	8009822 <_dtoa_r+0x71a>
 8009994:	9b07      	ldr	r3, [sp, #28]
 8009996:	1e5c      	subs	r4, r3, #1
 8009998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800999a:	42a3      	cmp	r3, r4
 800999c:	bfbf      	itttt	lt
 800999e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80099a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80099a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80099a4:	1ae3      	sublt	r3, r4, r3
 80099a6:	bfb4      	ite	lt
 80099a8:	18d2      	addlt	r2, r2, r3
 80099aa:	1b1c      	subge	r4, r3, r4
 80099ac:	9b07      	ldr	r3, [sp, #28]
 80099ae:	bfbc      	itt	lt
 80099b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80099b2:	2400      	movlt	r4, #0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	bfb5      	itete	lt
 80099b8:	eba8 0603 	sublt.w	r6, r8, r3
 80099bc:	9b07      	ldrge	r3, [sp, #28]
 80099be:	2300      	movlt	r3, #0
 80099c0:	4646      	movge	r6, r8
 80099c2:	e730      	b.n	8009826 <_dtoa_r+0x71e>
 80099c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80099c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80099c8:	4646      	mov	r6, r8
 80099ca:	e735      	b.n	8009838 <_dtoa_r+0x730>
 80099cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099ce:	e75c      	b.n	800988a <_dtoa_r+0x782>
 80099d0:	2300      	movs	r3, #0
 80099d2:	e788      	b.n	80098e6 <_dtoa_r+0x7de>
 80099d4:	3fe00000 	.word	0x3fe00000
 80099d8:	40240000 	.word	0x40240000
 80099dc:	40140000 	.word	0x40140000
 80099e0:	9b02      	ldr	r3, [sp, #8]
 80099e2:	e780      	b.n	80098e6 <_dtoa_r+0x7de>
 80099e4:	2300      	movs	r3, #0
 80099e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099e8:	e782      	b.n	80098f0 <_dtoa_r+0x7e8>
 80099ea:	d099      	beq.n	8009920 <_dtoa_r+0x818>
 80099ec:	9a08      	ldr	r2, [sp, #32]
 80099ee:	331c      	adds	r3, #28
 80099f0:	441a      	add	r2, r3
 80099f2:	4498      	add	r8, r3
 80099f4:	441e      	add	r6, r3
 80099f6:	9208      	str	r2, [sp, #32]
 80099f8:	e792      	b.n	8009920 <_dtoa_r+0x818>
 80099fa:	4603      	mov	r3, r0
 80099fc:	e7f6      	b.n	80099ec <_dtoa_r+0x8e4>
 80099fe:	9b07      	ldr	r3, [sp, #28]
 8009a00:	9704      	str	r7, [sp, #16]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dc20      	bgt.n	8009a48 <_dtoa_r+0x940>
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	dd1e      	ble.n	8009a4c <_dtoa_r+0x944>
 8009a0e:	9b00      	ldr	r3, [sp, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f47f aec0 	bne.w	8009796 <_dtoa_r+0x68e>
 8009a16:	4621      	mov	r1, r4
 8009a18:	2205      	movs	r2, #5
 8009a1a:	4658      	mov	r0, fp
 8009a1c:	f000 fa9a 	bl	8009f54 <__multadd>
 8009a20:	4601      	mov	r1, r0
 8009a22:	4604      	mov	r4, r0
 8009a24:	4648      	mov	r0, r9
 8009a26:	f000 fcf7 	bl	800a418 <__mcmp>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	f77f aeb3 	ble.w	8009796 <_dtoa_r+0x68e>
 8009a30:	4656      	mov	r6, sl
 8009a32:	2331      	movs	r3, #49	@ 0x31
 8009a34:	f806 3b01 	strb.w	r3, [r6], #1
 8009a38:	9b04      	ldr	r3, [sp, #16]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	9304      	str	r3, [sp, #16]
 8009a3e:	e6ae      	b.n	800979e <_dtoa_r+0x696>
 8009a40:	9c07      	ldr	r4, [sp, #28]
 8009a42:	9704      	str	r7, [sp, #16]
 8009a44:	4625      	mov	r5, r4
 8009a46:	e7f3      	b.n	8009a30 <_dtoa_r+0x928>
 8009a48:	9b07      	ldr	r3, [sp, #28]
 8009a4a:	9300      	str	r3, [sp, #0]
 8009a4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 8104 	beq.w	8009c5c <_dtoa_r+0xb54>
 8009a54:	2e00      	cmp	r6, #0
 8009a56:	dd05      	ble.n	8009a64 <_dtoa_r+0x95c>
 8009a58:	4629      	mov	r1, r5
 8009a5a:	4632      	mov	r2, r6
 8009a5c:	4658      	mov	r0, fp
 8009a5e:	f000 fc6f 	bl	800a340 <__lshift>
 8009a62:	4605      	mov	r5, r0
 8009a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d05a      	beq.n	8009b20 <_dtoa_r+0xa18>
 8009a6a:	6869      	ldr	r1, [r5, #4]
 8009a6c:	4658      	mov	r0, fp
 8009a6e:	f000 fa0f 	bl	8009e90 <_Balloc>
 8009a72:	4606      	mov	r6, r0
 8009a74:	b928      	cbnz	r0, 8009a82 <_dtoa_r+0x97a>
 8009a76:	4b84      	ldr	r3, [pc, #528]	@ (8009c88 <_dtoa_r+0xb80>)
 8009a78:	4602      	mov	r2, r0
 8009a7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a7e:	f7ff bb5a 	b.w	8009136 <_dtoa_r+0x2e>
 8009a82:	692a      	ldr	r2, [r5, #16]
 8009a84:	3202      	adds	r2, #2
 8009a86:	0092      	lsls	r2, r2, #2
 8009a88:	f105 010c 	add.w	r1, r5, #12
 8009a8c:	300c      	adds	r0, #12
 8009a8e:	f7ff fa80 	bl	8008f92 <memcpy>
 8009a92:	2201      	movs	r2, #1
 8009a94:	4631      	mov	r1, r6
 8009a96:	4658      	mov	r0, fp
 8009a98:	f000 fc52 	bl	800a340 <__lshift>
 8009a9c:	f10a 0301 	add.w	r3, sl, #1
 8009aa0:	9307      	str	r3, [sp, #28]
 8009aa2:	9b00      	ldr	r3, [sp, #0]
 8009aa4:	4453      	add	r3, sl
 8009aa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aa8:	9b02      	ldr	r3, [sp, #8]
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	462f      	mov	r7, r5
 8009ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	9b07      	ldr	r3, [sp, #28]
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	4648      	mov	r0, r9
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	f7ff fa9b 	bl	8008ff8 <quorem>
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	9002      	str	r0, [sp, #8]
 8009ac6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009aca:	4648      	mov	r0, r9
 8009acc:	f000 fca4 	bl	800a418 <__mcmp>
 8009ad0:	462a      	mov	r2, r5
 8009ad2:	9008      	str	r0, [sp, #32]
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4658      	mov	r0, fp
 8009ad8:	f000 fcba 	bl	800a450 <__mdiff>
 8009adc:	68c2      	ldr	r2, [r0, #12]
 8009ade:	4606      	mov	r6, r0
 8009ae0:	bb02      	cbnz	r2, 8009b24 <_dtoa_r+0xa1c>
 8009ae2:	4601      	mov	r1, r0
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	f000 fc97 	bl	800a418 <__mcmp>
 8009aea:	4602      	mov	r2, r0
 8009aec:	4631      	mov	r1, r6
 8009aee:	4658      	mov	r0, fp
 8009af0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009af2:	f000 fa0d 	bl	8009f10 <_Bfree>
 8009af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009afa:	9e07      	ldr	r6, [sp, #28]
 8009afc:	ea43 0102 	orr.w	r1, r3, r2
 8009b00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b02:	4319      	orrs	r1, r3
 8009b04:	d110      	bne.n	8009b28 <_dtoa_r+0xa20>
 8009b06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b0a:	d029      	beq.n	8009b60 <_dtoa_r+0xa58>
 8009b0c:	9b08      	ldr	r3, [sp, #32]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dd02      	ble.n	8009b18 <_dtoa_r+0xa10>
 8009b12:	9b02      	ldr	r3, [sp, #8]
 8009b14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b18:	9b00      	ldr	r3, [sp, #0]
 8009b1a:	f883 8000 	strb.w	r8, [r3]
 8009b1e:	e63f      	b.n	80097a0 <_dtoa_r+0x698>
 8009b20:	4628      	mov	r0, r5
 8009b22:	e7bb      	b.n	8009a9c <_dtoa_r+0x994>
 8009b24:	2201      	movs	r2, #1
 8009b26:	e7e1      	b.n	8009aec <_dtoa_r+0x9e4>
 8009b28:	9b08      	ldr	r3, [sp, #32]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	db04      	blt.n	8009b38 <_dtoa_r+0xa30>
 8009b2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b30:	430b      	orrs	r3, r1
 8009b32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b34:	430b      	orrs	r3, r1
 8009b36:	d120      	bne.n	8009b7a <_dtoa_r+0xa72>
 8009b38:	2a00      	cmp	r2, #0
 8009b3a:	dded      	ble.n	8009b18 <_dtoa_r+0xa10>
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4658      	mov	r0, fp
 8009b42:	f000 fbfd 	bl	800a340 <__lshift>
 8009b46:	4621      	mov	r1, r4
 8009b48:	4681      	mov	r9, r0
 8009b4a:	f000 fc65 	bl	800a418 <__mcmp>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	dc03      	bgt.n	8009b5a <_dtoa_r+0xa52>
 8009b52:	d1e1      	bne.n	8009b18 <_dtoa_r+0xa10>
 8009b54:	f018 0f01 	tst.w	r8, #1
 8009b58:	d0de      	beq.n	8009b18 <_dtoa_r+0xa10>
 8009b5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b5e:	d1d8      	bne.n	8009b12 <_dtoa_r+0xa0a>
 8009b60:	9a00      	ldr	r2, [sp, #0]
 8009b62:	2339      	movs	r3, #57	@ 0x39
 8009b64:	7013      	strb	r3, [r2, #0]
 8009b66:	4633      	mov	r3, r6
 8009b68:	461e      	mov	r6, r3
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b70:	2a39      	cmp	r2, #57	@ 0x39
 8009b72:	d052      	beq.n	8009c1a <_dtoa_r+0xb12>
 8009b74:	3201      	adds	r2, #1
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	e612      	b.n	80097a0 <_dtoa_r+0x698>
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	dd07      	ble.n	8009b8e <_dtoa_r+0xa86>
 8009b7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b82:	d0ed      	beq.n	8009b60 <_dtoa_r+0xa58>
 8009b84:	9a00      	ldr	r2, [sp, #0]
 8009b86:	f108 0301 	add.w	r3, r8, #1
 8009b8a:	7013      	strb	r3, [r2, #0]
 8009b8c:	e608      	b.n	80097a0 <_dtoa_r+0x698>
 8009b8e:	9b07      	ldr	r3, [sp, #28]
 8009b90:	9a07      	ldr	r2, [sp, #28]
 8009b92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d028      	beq.n	8009bee <_dtoa_r+0xae6>
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	220a      	movs	r2, #10
 8009ba2:	4658      	mov	r0, fp
 8009ba4:	f000 f9d6 	bl	8009f54 <__multadd>
 8009ba8:	42af      	cmp	r7, r5
 8009baa:	4681      	mov	r9, r0
 8009bac:	f04f 0300 	mov.w	r3, #0
 8009bb0:	f04f 020a 	mov.w	r2, #10
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	4658      	mov	r0, fp
 8009bb8:	d107      	bne.n	8009bca <_dtoa_r+0xac2>
 8009bba:	f000 f9cb 	bl	8009f54 <__multadd>
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	9b07      	ldr	r3, [sp, #28]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	9307      	str	r3, [sp, #28]
 8009bc8:	e774      	b.n	8009ab4 <_dtoa_r+0x9ac>
 8009bca:	f000 f9c3 	bl	8009f54 <__multadd>
 8009bce:	4629      	mov	r1, r5
 8009bd0:	4607      	mov	r7, r0
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	220a      	movs	r2, #10
 8009bd6:	4658      	mov	r0, fp
 8009bd8:	f000 f9bc 	bl	8009f54 <__multadd>
 8009bdc:	4605      	mov	r5, r0
 8009bde:	e7f0      	b.n	8009bc2 <_dtoa_r+0xaba>
 8009be0:	9b00      	ldr	r3, [sp, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bfcc      	ite	gt
 8009be6:	461e      	movgt	r6, r3
 8009be8:	2601      	movle	r6, #1
 8009bea:	4456      	add	r6, sl
 8009bec:	2700      	movs	r7, #0
 8009bee:	4649      	mov	r1, r9
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f000 fba4 	bl	800a340 <__lshift>
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	4681      	mov	r9, r0
 8009bfc:	f000 fc0c 	bl	800a418 <__mcmp>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	dcb0      	bgt.n	8009b66 <_dtoa_r+0xa5e>
 8009c04:	d102      	bne.n	8009c0c <_dtoa_r+0xb04>
 8009c06:	f018 0f01 	tst.w	r8, #1
 8009c0a:	d1ac      	bne.n	8009b66 <_dtoa_r+0xa5e>
 8009c0c:	4633      	mov	r3, r6
 8009c0e:	461e      	mov	r6, r3
 8009c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c14:	2a30      	cmp	r2, #48	@ 0x30
 8009c16:	d0fa      	beq.n	8009c0e <_dtoa_r+0xb06>
 8009c18:	e5c2      	b.n	80097a0 <_dtoa_r+0x698>
 8009c1a:	459a      	cmp	sl, r3
 8009c1c:	d1a4      	bne.n	8009b68 <_dtoa_r+0xa60>
 8009c1e:	9b04      	ldr	r3, [sp, #16]
 8009c20:	3301      	adds	r3, #1
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	2331      	movs	r3, #49	@ 0x31
 8009c26:	f88a 3000 	strb.w	r3, [sl]
 8009c2a:	e5b9      	b.n	80097a0 <_dtoa_r+0x698>
 8009c2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c8c <_dtoa_r+0xb84>
 8009c32:	b11b      	cbz	r3, 8009c3c <_dtoa_r+0xb34>
 8009c34:	f10a 0308 	add.w	r3, sl, #8
 8009c38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c3a:	6013      	str	r3, [r2, #0]
 8009c3c:	4650      	mov	r0, sl
 8009c3e:	b019      	add	sp, #100	@ 0x64
 8009c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	f77f ae37 	ble.w	80098ba <_dtoa_r+0x7b2>
 8009c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c50:	2001      	movs	r0, #1
 8009c52:	e655      	b.n	8009900 <_dtoa_r+0x7f8>
 8009c54:	9b00      	ldr	r3, [sp, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f77f aed6 	ble.w	8009a08 <_dtoa_r+0x900>
 8009c5c:	4656      	mov	r6, sl
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4648      	mov	r0, r9
 8009c62:	f7ff f9c9 	bl	8008ff8 <quorem>
 8009c66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c6a:	f806 8b01 	strb.w	r8, [r6], #1
 8009c6e:	9b00      	ldr	r3, [sp, #0]
 8009c70:	eba6 020a 	sub.w	r2, r6, sl
 8009c74:	4293      	cmp	r3, r2
 8009c76:	ddb3      	ble.n	8009be0 <_dtoa_r+0xad8>
 8009c78:	4649      	mov	r1, r9
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f000 f968 	bl	8009f54 <__multadd>
 8009c84:	4681      	mov	r9, r0
 8009c86:	e7ea      	b.n	8009c5e <_dtoa_r+0xb56>
 8009c88:	0800c82d 	.word	0x0800c82d
 8009c8c:	0800c7c8 	.word	0x0800c7c8

08009c90 <_free_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4605      	mov	r5, r0
 8009c94:	2900      	cmp	r1, #0
 8009c96:	d041      	beq.n	8009d1c <_free_r+0x8c>
 8009c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c9c:	1f0c      	subs	r4, r1, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	bfb8      	it	lt
 8009ca2:	18e4      	addlt	r4, r4, r3
 8009ca4:	f000 f8e8 	bl	8009e78 <__malloc_lock>
 8009ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d20 <_free_r+0x90>)
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	b933      	cbnz	r3, 8009cbc <_free_r+0x2c>
 8009cae:	6063      	str	r3, [r4, #4]
 8009cb0:	6014      	str	r4, [r2, #0]
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb8:	f000 b8e4 	b.w	8009e84 <__malloc_unlock>
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	d908      	bls.n	8009cd2 <_free_r+0x42>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	1821      	adds	r1, r4, r0
 8009cc4:	428b      	cmp	r3, r1
 8009cc6:	bf01      	itttt	eq
 8009cc8:	6819      	ldreq	r1, [r3, #0]
 8009cca:	685b      	ldreq	r3, [r3, #4]
 8009ccc:	1809      	addeq	r1, r1, r0
 8009cce:	6021      	streq	r1, [r4, #0]
 8009cd0:	e7ed      	b.n	8009cae <_free_r+0x1e>
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	b10b      	cbz	r3, 8009cdc <_free_r+0x4c>
 8009cd8:	42a3      	cmp	r3, r4
 8009cda:	d9fa      	bls.n	8009cd2 <_free_r+0x42>
 8009cdc:	6811      	ldr	r1, [r2, #0]
 8009cde:	1850      	adds	r0, r2, r1
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	d10b      	bne.n	8009cfc <_free_r+0x6c>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	4401      	add	r1, r0
 8009ce8:	1850      	adds	r0, r2, r1
 8009cea:	4283      	cmp	r3, r0
 8009cec:	6011      	str	r1, [r2, #0]
 8009cee:	d1e0      	bne.n	8009cb2 <_free_r+0x22>
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	6053      	str	r3, [r2, #4]
 8009cf6:	4408      	add	r0, r1
 8009cf8:	6010      	str	r0, [r2, #0]
 8009cfa:	e7da      	b.n	8009cb2 <_free_r+0x22>
 8009cfc:	d902      	bls.n	8009d04 <_free_r+0x74>
 8009cfe:	230c      	movs	r3, #12
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	e7d6      	b.n	8009cb2 <_free_r+0x22>
 8009d04:	6820      	ldr	r0, [r4, #0]
 8009d06:	1821      	adds	r1, r4, r0
 8009d08:	428b      	cmp	r3, r1
 8009d0a:	bf04      	itt	eq
 8009d0c:	6819      	ldreq	r1, [r3, #0]
 8009d0e:	685b      	ldreq	r3, [r3, #4]
 8009d10:	6063      	str	r3, [r4, #4]
 8009d12:	bf04      	itt	eq
 8009d14:	1809      	addeq	r1, r1, r0
 8009d16:	6021      	streq	r1, [r4, #0]
 8009d18:	6054      	str	r4, [r2, #4]
 8009d1a:	e7ca      	b.n	8009cb2 <_free_r+0x22>
 8009d1c:	bd38      	pop	{r3, r4, r5, pc}
 8009d1e:	bf00      	nop
 8009d20:	20000938 	.word	0x20000938

08009d24 <malloc>:
 8009d24:	4b02      	ldr	r3, [pc, #8]	@ (8009d30 <malloc+0xc>)
 8009d26:	4601      	mov	r1, r0
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	f000 b825 	b.w	8009d78 <_malloc_r>
 8009d2e:	bf00      	nop
 8009d30:	2000002c 	.word	0x2000002c

08009d34 <sbrk_aligned>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	4e0f      	ldr	r6, [pc, #60]	@ (8009d74 <sbrk_aligned+0x40>)
 8009d38:	460c      	mov	r4, r1
 8009d3a:	6831      	ldr	r1, [r6, #0]
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	b911      	cbnz	r1, 8009d46 <sbrk_aligned+0x12>
 8009d40:	f001 fe1e 	bl	800b980 <_sbrk_r>
 8009d44:	6030      	str	r0, [r6, #0]
 8009d46:	4621      	mov	r1, r4
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f001 fe19 	bl	800b980 <_sbrk_r>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d103      	bne.n	8009d5a <sbrk_aligned+0x26>
 8009d52:	f04f 34ff 	mov.w	r4, #4294967295
 8009d56:	4620      	mov	r0, r4
 8009d58:	bd70      	pop	{r4, r5, r6, pc}
 8009d5a:	1cc4      	adds	r4, r0, #3
 8009d5c:	f024 0403 	bic.w	r4, r4, #3
 8009d60:	42a0      	cmp	r0, r4
 8009d62:	d0f8      	beq.n	8009d56 <sbrk_aligned+0x22>
 8009d64:	1a21      	subs	r1, r4, r0
 8009d66:	4628      	mov	r0, r5
 8009d68:	f001 fe0a 	bl	800b980 <_sbrk_r>
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d1f2      	bne.n	8009d56 <sbrk_aligned+0x22>
 8009d70:	e7ef      	b.n	8009d52 <sbrk_aligned+0x1e>
 8009d72:	bf00      	nop
 8009d74:	20000934 	.word	0x20000934

08009d78 <_malloc_r>:
 8009d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	1ccd      	adds	r5, r1, #3
 8009d7e:	f025 0503 	bic.w	r5, r5, #3
 8009d82:	3508      	adds	r5, #8
 8009d84:	2d0c      	cmp	r5, #12
 8009d86:	bf38      	it	cc
 8009d88:	250c      	movcc	r5, #12
 8009d8a:	2d00      	cmp	r5, #0
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	db01      	blt.n	8009d94 <_malloc_r+0x1c>
 8009d90:	42a9      	cmp	r1, r5
 8009d92:	d904      	bls.n	8009d9e <_malloc_r+0x26>
 8009d94:	230c      	movs	r3, #12
 8009d96:	6033      	str	r3, [r6, #0]
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e74 <_malloc_r+0xfc>
 8009da2:	f000 f869 	bl	8009e78 <__malloc_lock>
 8009da6:	f8d8 3000 	ldr.w	r3, [r8]
 8009daa:	461c      	mov	r4, r3
 8009dac:	bb44      	cbnz	r4, 8009e00 <_malloc_r+0x88>
 8009dae:	4629      	mov	r1, r5
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff ffbf 	bl	8009d34 <sbrk_aligned>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	4604      	mov	r4, r0
 8009dba:	d158      	bne.n	8009e6e <_malloc_r+0xf6>
 8009dbc:	f8d8 4000 	ldr.w	r4, [r8]
 8009dc0:	4627      	mov	r7, r4
 8009dc2:	2f00      	cmp	r7, #0
 8009dc4:	d143      	bne.n	8009e4e <_malloc_r+0xd6>
 8009dc6:	2c00      	cmp	r4, #0
 8009dc8:	d04b      	beq.n	8009e62 <_malloc_r+0xea>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	4639      	mov	r1, r7
 8009dce:	4630      	mov	r0, r6
 8009dd0:	eb04 0903 	add.w	r9, r4, r3
 8009dd4:	f001 fdd4 	bl	800b980 <_sbrk_r>
 8009dd8:	4581      	cmp	r9, r0
 8009dda:	d142      	bne.n	8009e62 <_malloc_r+0xea>
 8009ddc:	6821      	ldr	r1, [r4, #0]
 8009dde:	1a6d      	subs	r5, r5, r1
 8009de0:	4629      	mov	r1, r5
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ffa6 	bl	8009d34 <sbrk_aligned>
 8009de8:	3001      	adds	r0, #1
 8009dea:	d03a      	beq.n	8009e62 <_malloc_r+0xea>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	442b      	add	r3, r5
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	f8d8 3000 	ldr.w	r3, [r8]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	bb62      	cbnz	r2, 8009e54 <_malloc_r+0xdc>
 8009dfa:	f8c8 7000 	str.w	r7, [r8]
 8009dfe:	e00f      	b.n	8009e20 <_malloc_r+0xa8>
 8009e00:	6822      	ldr	r2, [r4, #0]
 8009e02:	1b52      	subs	r2, r2, r5
 8009e04:	d420      	bmi.n	8009e48 <_malloc_r+0xd0>
 8009e06:	2a0b      	cmp	r2, #11
 8009e08:	d917      	bls.n	8009e3a <_malloc_r+0xc2>
 8009e0a:	1961      	adds	r1, r4, r5
 8009e0c:	42a3      	cmp	r3, r4
 8009e0e:	6025      	str	r5, [r4, #0]
 8009e10:	bf18      	it	ne
 8009e12:	6059      	strne	r1, [r3, #4]
 8009e14:	6863      	ldr	r3, [r4, #4]
 8009e16:	bf08      	it	eq
 8009e18:	f8c8 1000 	streq.w	r1, [r8]
 8009e1c:	5162      	str	r2, [r4, r5]
 8009e1e:	604b      	str	r3, [r1, #4]
 8009e20:	4630      	mov	r0, r6
 8009e22:	f000 f82f 	bl	8009e84 <__malloc_unlock>
 8009e26:	f104 000b 	add.w	r0, r4, #11
 8009e2a:	1d23      	adds	r3, r4, #4
 8009e2c:	f020 0007 	bic.w	r0, r0, #7
 8009e30:	1ac2      	subs	r2, r0, r3
 8009e32:	bf1c      	itt	ne
 8009e34:	1a1b      	subne	r3, r3, r0
 8009e36:	50a3      	strne	r3, [r4, r2]
 8009e38:	e7af      	b.n	8009d9a <_malloc_r+0x22>
 8009e3a:	6862      	ldr	r2, [r4, #4]
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	bf0c      	ite	eq
 8009e40:	f8c8 2000 	streq.w	r2, [r8]
 8009e44:	605a      	strne	r2, [r3, #4]
 8009e46:	e7eb      	b.n	8009e20 <_malloc_r+0xa8>
 8009e48:	4623      	mov	r3, r4
 8009e4a:	6864      	ldr	r4, [r4, #4]
 8009e4c:	e7ae      	b.n	8009dac <_malloc_r+0x34>
 8009e4e:	463c      	mov	r4, r7
 8009e50:	687f      	ldr	r7, [r7, #4]
 8009e52:	e7b6      	b.n	8009dc2 <_malloc_r+0x4a>
 8009e54:	461a      	mov	r2, r3
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	42a3      	cmp	r3, r4
 8009e5a:	d1fb      	bne.n	8009e54 <_malloc_r+0xdc>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6053      	str	r3, [r2, #4]
 8009e60:	e7de      	b.n	8009e20 <_malloc_r+0xa8>
 8009e62:	230c      	movs	r3, #12
 8009e64:	6033      	str	r3, [r6, #0]
 8009e66:	4630      	mov	r0, r6
 8009e68:	f000 f80c 	bl	8009e84 <__malloc_unlock>
 8009e6c:	e794      	b.n	8009d98 <_malloc_r+0x20>
 8009e6e:	6005      	str	r5, [r0, #0]
 8009e70:	e7d6      	b.n	8009e20 <_malloc_r+0xa8>
 8009e72:	bf00      	nop
 8009e74:	20000938 	.word	0x20000938

08009e78 <__malloc_lock>:
 8009e78:	4801      	ldr	r0, [pc, #4]	@ (8009e80 <__malloc_lock+0x8>)
 8009e7a:	f7ff b888 	b.w	8008f8e <__retarget_lock_acquire_recursive>
 8009e7e:	bf00      	nop
 8009e80:	20000930 	.word	0x20000930

08009e84 <__malloc_unlock>:
 8009e84:	4801      	ldr	r0, [pc, #4]	@ (8009e8c <__malloc_unlock+0x8>)
 8009e86:	f7ff b883 	b.w	8008f90 <__retarget_lock_release_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	20000930 	.word	0x20000930

08009e90 <_Balloc>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	69c6      	ldr	r6, [r0, #28]
 8009e94:	4604      	mov	r4, r0
 8009e96:	460d      	mov	r5, r1
 8009e98:	b976      	cbnz	r6, 8009eb8 <_Balloc+0x28>
 8009e9a:	2010      	movs	r0, #16
 8009e9c:	f7ff ff42 	bl	8009d24 <malloc>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	61e0      	str	r0, [r4, #28]
 8009ea4:	b920      	cbnz	r0, 8009eb0 <_Balloc+0x20>
 8009ea6:	4b18      	ldr	r3, [pc, #96]	@ (8009f08 <_Balloc+0x78>)
 8009ea8:	4818      	ldr	r0, [pc, #96]	@ (8009f0c <_Balloc+0x7c>)
 8009eaa:	216b      	movs	r1, #107	@ 0x6b
 8009eac:	f7ff f886 	bl	8008fbc <__assert_func>
 8009eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009eb4:	6006      	str	r6, [r0, #0]
 8009eb6:	60c6      	str	r6, [r0, #12]
 8009eb8:	69e6      	ldr	r6, [r4, #28]
 8009eba:	68f3      	ldr	r3, [r6, #12]
 8009ebc:	b183      	cbz	r3, 8009ee0 <_Balloc+0x50>
 8009ebe:	69e3      	ldr	r3, [r4, #28]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ec6:	b9b8      	cbnz	r0, 8009ef8 <_Balloc+0x68>
 8009ec8:	2101      	movs	r1, #1
 8009eca:	fa01 f605 	lsl.w	r6, r1, r5
 8009ece:	1d72      	adds	r2, r6, #5
 8009ed0:	0092      	lsls	r2, r2, #2
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f001 fd73 	bl	800b9be <_calloc_r>
 8009ed8:	b160      	cbz	r0, 8009ef4 <_Balloc+0x64>
 8009eda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ede:	e00e      	b.n	8009efe <_Balloc+0x6e>
 8009ee0:	2221      	movs	r2, #33	@ 0x21
 8009ee2:	2104      	movs	r1, #4
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f001 fd6a 	bl	800b9be <_calloc_r>
 8009eea:	69e3      	ldr	r3, [r4, #28]
 8009eec:	60f0      	str	r0, [r6, #12]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1e4      	bne.n	8009ebe <_Balloc+0x2e>
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}
 8009ef8:	6802      	ldr	r2, [r0, #0]
 8009efa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009efe:	2300      	movs	r3, #0
 8009f00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f04:	e7f7      	b.n	8009ef6 <_Balloc+0x66>
 8009f06:	bf00      	nop
 8009f08:	0800c6e4 	.word	0x0800c6e4
 8009f0c:	0800c83e 	.word	0x0800c83e

08009f10 <_Bfree>:
 8009f10:	b570      	push	{r4, r5, r6, lr}
 8009f12:	69c6      	ldr	r6, [r0, #28]
 8009f14:	4605      	mov	r5, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	b976      	cbnz	r6, 8009f38 <_Bfree+0x28>
 8009f1a:	2010      	movs	r0, #16
 8009f1c:	f7ff ff02 	bl	8009d24 <malloc>
 8009f20:	4602      	mov	r2, r0
 8009f22:	61e8      	str	r0, [r5, #28]
 8009f24:	b920      	cbnz	r0, 8009f30 <_Bfree+0x20>
 8009f26:	4b09      	ldr	r3, [pc, #36]	@ (8009f4c <_Bfree+0x3c>)
 8009f28:	4809      	ldr	r0, [pc, #36]	@ (8009f50 <_Bfree+0x40>)
 8009f2a:	218f      	movs	r1, #143	@ 0x8f
 8009f2c:	f7ff f846 	bl	8008fbc <__assert_func>
 8009f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f34:	6006      	str	r6, [r0, #0]
 8009f36:	60c6      	str	r6, [r0, #12]
 8009f38:	b13c      	cbz	r4, 8009f4a <_Bfree+0x3a>
 8009f3a:	69eb      	ldr	r3, [r5, #28]
 8009f3c:	6862      	ldr	r2, [r4, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f44:	6021      	str	r1, [r4, #0]
 8009f46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f4a:	bd70      	pop	{r4, r5, r6, pc}
 8009f4c:	0800c6e4 	.word	0x0800c6e4
 8009f50:	0800c83e 	.word	0x0800c83e

08009f54 <__multadd>:
 8009f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f58:	690d      	ldr	r5, [r1, #16]
 8009f5a:	4607      	mov	r7, r0
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	461e      	mov	r6, r3
 8009f60:	f101 0c14 	add.w	ip, r1, #20
 8009f64:	2000      	movs	r0, #0
 8009f66:	f8dc 3000 	ldr.w	r3, [ip]
 8009f6a:	b299      	uxth	r1, r3
 8009f6c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f70:	0c1e      	lsrs	r6, r3, #16
 8009f72:	0c0b      	lsrs	r3, r1, #16
 8009f74:	fb02 3306 	mla	r3, r2, r6, r3
 8009f78:	b289      	uxth	r1, r1
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f80:	4285      	cmp	r5, r0
 8009f82:	f84c 1b04 	str.w	r1, [ip], #4
 8009f86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f8a:	dcec      	bgt.n	8009f66 <__multadd+0x12>
 8009f8c:	b30e      	cbz	r6, 8009fd2 <__multadd+0x7e>
 8009f8e:	68a3      	ldr	r3, [r4, #8]
 8009f90:	42ab      	cmp	r3, r5
 8009f92:	dc19      	bgt.n	8009fc8 <__multadd+0x74>
 8009f94:	6861      	ldr	r1, [r4, #4]
 8009f96:	4638      	mov	r0, r7
 8009f98:	3101      	adds	r1, #1
 8009f9a:	f7ff ff79 	bl	8009e90 <_Balloc>
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	b928      	cbnz	r0, 8009fae <__multadd+0x5a>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd8 <__multadd+0x84>)
 8009fa6:	480d      	ldr	r0, [pc, #52]	@ (8009fdc <__multadd+0x88>)
 8009fa8:	21ba      	movs	r1, #186	@ 0xba
 8009faa:	f7ff f807 	bl	8008fbc <__assert_func>
 8009fae:	6922      	ldr	r2, [r4, #16]
 8009fb0:	3202      	adds	r2, #2
 8009fb2:	f104 010c 	add.w	r1, r4, #12
 8009fb6:	0092      	lsls	r2, r2, #2
 8009fb8:	300c      	adds	r0, #12
 8009fba:	f7fe ffea 	bl	8008f92 <memcpy>
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7ff ffa5 	bl	8009f10 <_Bfree>
 8009fc6:	4644      	mov	r4, r8
 8009fc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fcc:	3501      	adds	r5, #1
 8009fce:	615e      	str	r6, [r3, #20]
 8009fd0:	6125      	str	r5, [r4, #16]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd8:	0800c82d 	.word	0x0800c82d
 8009fdc:	0800c83e 	.word	0x0800c83e

08009fe0 <__s2b>:
 8009fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	4615      	mov	r5, r2
 8009fe8:	461f      	mov	r7, r3
 8009fea:	2209      	movs	r2, #9
 8009fec:	3308      	adds	r3, #8
 8009fee:	4606      	mov	r6, r0
 8009ff0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	db09      	blt.n	800a010 <__s2b+0x30>
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff ff47 	bl	8009e90 <_Balloc>
 800a002:	b940      	cbnz	r0, 800a016 <__s2b+0x36>
 800a004:	4602      	mov	r2, r0
 800a006:	4b19      	ldr	r3, [pc, #100]	@ (800a06c <__s2b+0x8c>)
 800a008:	4819      	ldr	r0, [pc, #100]	@ (800a070 <__s2b+0x90>)
 800a00a:	21d3      	movs	r1, #211	@ 0xd3
 800a00c:	f7fe ffd6 	bl	8008fbc <__assert_func>
 800a010:	0052      	lsls	r2, r2, #1
 800a012:	3101      	adds	r1, #1
 800a014:	e7f0      	b.n	8009ff8 <__s2b+0x18>
 800a016:	9b08      	ldr	r3, [sp, #32]
 800a018:	6143      	str	r3, [r0, #20]
 800a01a:	2d09      	cmp	r5, #9
 800a01c:	f04f 0301 	mov.w	r3, #1
 800a020:	6103      	str	r3, [r0, #16]
 800a022:	dd16      	ble.n	800a052 <__s2b+0x72>
 800a024:	f104 0909 	add.w	r9, r4, #9
 800a028:	46c8      	mov	r8, r9
 800a02a:	442c      	add	r4, r5
 800a02c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a030:	4601      	mov	r1, r0
 800a032:	3b30      	subs	r3, #48	@ 0x30
 800a034:	220a      	movs	r2, #10
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff ff8c 	bl	8009f54 <__multadd>
 800a03c:	45a0      	cmp	r8, r4
 800a03e:	d1f5      	bne.n	800a02c <__s2b+0x4c>
 800a040:	f1a5 0408 	sub.w	r4, r5, #8
 800a044:	444c      	add	r4, r9
 800a046:	1b2d      	subs	r5, r5, r4
 800a048:	1963      	adds	r3, r4, r5
 800a04a:	42bb      	cmp	r3, r7
 800a04c:	db04      	blt.n	800a058 <__s2b+0x78>
 800a04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a052:	340a      	adds	r4, #10
 800a054:	2509      	movs	r5, #9
 800a056:	e7f6      	b.n	800a046 <__s2b+0x66>
 800a058:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a05c:	4601      	mov	r1, r0
 800a05e:	3b30      	subs	r3, #48	@ 0x30
 800a060:	220a      	movs	r2, #10
 800a062:	4630      	mov	r0, r6
 800a064:	f7ff ff76 	bl	8009f54 <__multadd>
 800a068:	e7ee      	b.n	800a048 <__s2b+0x68>
 800a06a:	bf00      	nop
 800a06c:	0800c82d 	.word	0x0800c82d
 800a070:	0800c83e 	.word	0x0800c83e

0800a074 <__hi0bits>:
 800a074:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a078:	4603      	mov	r3, r0
 800a07a:	bf36      	itet	cc
 800a07c:	0403      	lslcc	r3, r0, #16
 800a07e:	2000      	movcs	r0, #0
 800a080:	2010      	movcc	r0, #16
 800a082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a086:	bf3c      	itt	cc
 800a088:	021b      	lslcc	r3, r3, #8
 800a08a:	3008      	addcc	r0, #8
 800a08c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a090:	bf3c      	itt	cc
 800a092:	011b      	lslcc	r3, r3, #4
 800a094:	3004      	addcc	r0, #4
 800a096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a09a:	bf3c      	itt	cc
 800a09c:	009b      	lslcc	r3, r3, #2
 800a09e:	3002      	addcc	r0, #2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	db05      	blt.n	800a0b0 <__hi0bits+0x3c>
 800a0a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a0a8:	f100 0001 	add.w	r0, r0, #1
 800a0ac:	bf08      	it	eq
 800a0ae:	2020      	moveq	r0, #32
 800a0b0:	4770      	bx	lr

0800a0b2 <__lo0bits>:
 800a0b2:	6803      	ldr	r3, [r0, #0]
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	f013 0007 	ands.w	r0, r3, #7
 800a0ba:	d00b      	beq.n	800a0d4 <__lo0bits+0x22>
 800a0bc:	07d9      	lsls	r1, r3, #31
 800a0be:	d421      	bmi.n	800a104 <__lo0bits+0x52>
 800a0c0:	0798      	lsls	r0, r3, #30
 800a0c2:	bf49      	itett	mi
 800a0c4:	085b      	lsrmi	r3, r3, #1
 800a0c6:	089b      	lsrpl	r3, r3, #2
 800a0c8:	2001      	movmi	r0, #1
 800a0ca:	6013      	strmi	r3, [r2, #0]
 800a0cc:	bf5c      	itt	pl
 800a0ce:	6013      	strpl	r3, [r2, #0]
 800a0d0:	2002      	movpl	r0, #2
 800a0d2:	4770      	bx	lr
 800a0d4:	b299      	uxth	r1, r3
 800a0d6:	b909      	cbnz	r1, 800a0dc <__lo0bits+0x2a>
 800a0d8:	0c1b      	lsrs	r3, r3, #16
 800a0da:	2010      	movs	r0, #16
 800a0dc:	b2d9      	uxtb	r1, r3
 800a0de:	b909      	cbnz	r1, 800a0e4 <__lo0bits+0x32>
 800a0e0:	3008      	adds	r0, #8
 800a0e2:	0a1b      	lsrs	r3, r3, #8
 800a0e4:	0719      	lsls	r1, r3, #28
 800a0e6:	bf04      	itt	eq
 800a0e8:	091b      	lsreq	r3, r3, #4
 800a0ea:	3004      	addeq	r0, #4
 800a0ec:	0799      	lsls	r1, r3, #30
 800a0ee:	bf04      	itt	eq
 800a0f0:	089b      	lsreq	r3, r3, #2
 800a0f2:	3002      	addeq	r0, #2
 800a0f4:	07d9      	lsls	r1, r3, #31
 800a0f6:	d403      	bmi.n	800a100 <__lo0bits+0x4e>
 800a0f8:	085b      	lsrs	r3, r3, #1
 800a0fa:	f100 0001 	add.w	r0, r0, #1
 800a0fe:	d003      	beq.n	800a108 <__lo0bits+0x56>
 800a100:	6013      	str	r3, [r2, #0]
 800a102:	4770      	bx	lr
 800a104:	2000      	movs	r0, #0
 800a106:	4770      	bx	lr
 800a108:	2020      	movs	r0, #32
 800a10a:	4770      	bx	lr

0800a10c <__i2b>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	460c      	mov	r4, r1
 800a110:	2101      	movs	r1, #1
 800a112:	f7ff febd 	bl	8009e90 <_Balloc>
 800a116:	4602      	mov	r2, r0
 800a118:	b928      	cbnz	r0, 800a126 <__i2b+0x1a>
 800a11a:	4b05      	ldr	r3, [pc, #20]	@ (800a130 <__i2b+0x24>)
 800a11c:	4805      	ldr	r0, [pc, #20]	@ (800a134 <__i2b+0x28>)
 800a11e:	f240 1145 	movw	r1, #325	@ 0x145
 800a122:	f7fe ff4b 	bl	8008fbc <__assert_func>
 800a126:	2301      	movs	r3, #1
 800a128:	6144      	str	r4, [r0, #20]
 800a12a:	6103      	str	r3, [r0, #16]
 800a12c:	bd10      	pop	{r4, pc}
 800a12e:	bf00      	nop
 800a130:	0800c82d 	.word	0x0800c82d
 800a134:	0800c83e 	.word	0x0800c83e

0800a138 <__multiply>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	4614      	mov	r4, r2
 800a13e:	690a      	ldr	r2, [r1, #16]
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	429a      	cmp	r2, r3
 800a144:	bfa8      	it	ge
 800a146:	4623      	movge	r3, r4
 800a148:	460f      	mov	r7, r1
 800a14a:	bfa4      	itt	ge
 800a14c:	460c      	movge	r4, r1
 800a14e:	461f      	movge	r7, r3
 800a150:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a154:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a158:	68a3      	ldr	r3, [r4, #8]
 800a15a:	6861      	ldr	r1, [r4, #4]
 800a15c:	eb0a 0609 	add.w	r6, sl, r9
 800a160:	42b3      	cmp	r3, r6
 800a162:	b085      	sub	sp, #20
 800a164:	bfb8      	it	lt
 800a166:	3101      	addlt	r1, #1
 800a168:	f7ff fe92 	bl	8009e90 <_Balloc>
 800a16c:	b930      	cbnz	r0, 800a17c <__multiply+0x44>
 800a16e:	4602      	mov	r2, r0
 800a170:	4b44      	ldr	r3, [pc, #272]	@ (800a284 <__multiply+0x14c>)
 800a172:	4845      	ldr	r0, [pc, #276]	@ (800a288 <__multiply+0x150>)
 800a174:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a178:	f7fe ff20 	bl	8008fbc <__assert_func>
 800a17c:	f100 0514 	add.w	r5, r0, #20
 800a180:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a184:	462b      	mov	r3, r5
 800a186:	2200      	movs	r2, #0
 800a188:	4543      	cmp	r3, r8
 800a18a:	d321      	bcc.n	800a1d0 <__multiply+0x98>
 800a18c:	f107 0114 	add.w	r1, r7, #20
 800a190:	f104 0214 	add.w	r2, r4, #20
 800a194:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a198:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a19c:	9302      	str	r3, [sp, #8]
 800a19e:	1b13      	subs	r3, r2, r4
 800a1a0:	3b15      	subs	r3, #21
 800a1a2:	f023 0303 	bic.w	r3, r3, #3
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	f104 0715 	add.w	r7, r4, #21
 800a1ac:	42ba      	cmp	r2, r7
 800a1ae:	bf38      	it	cc
 800a1b0:	2304      	movcc	r3, #4
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	9b02      	ldr	r3, [sp, #8]
 800a1b6:	9103      	str	r1, [sp, #12]
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	d80c      	bhi.n	800a1d6 <__multiply+0x9e>
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	dd03      	ble.n	800a1c8 <__multiply+0x90>
 800a1c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d05b      	beq.n	800a280 <__multiply+0x148>
 800a1c8:	6106      	str	r6, [r0, #16]
 800a1ca:	b005      	add	sp, #20
 800a1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d0:	f843 2b04 	str.w	r2, [r3], #4
 800a1d4:	e7d8      	b.n	800a188 <__multiply+0x50>
 800a1d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a1da:	f1ba 0f00 	cmp.w	sl, #0
 800a1de:	d024      	beq.n	800a22a <__multiply+0xf2>
 800a1e0:	f104 0e14 	add.w	lr, r4, #20
 800a1e4:	46a9      	mov	r9, r5
 800a1e6:	f04f 0c00 	mov.w	ip, #0
 800a1ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1ee:	f8d9 3000 	ldr.w	r3, [r9]
 800a1f2:	fa1f fb87 	uxth.w	fp, r7
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a200:	f8d9 7000 	ldr.w	r7, [r9]
 800a204:	4463      	add	r3, ip
 800a206:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a20a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a20e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a212:	b29b      	uxth	r3, r3
 800a214:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a218:	4572      	cmp	r2, lr
 800a21a:	f849 3b04 	str.w	r3, [r9], #4
 800a21e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a222:	d8e2      	bhi.n	800a1ea <__multiply+0xb2>
 800a224:	9b01      	ldr	r3, [sp, #4]
 800a226:	f845 c003 	str.w	ip, [r5, r3]
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a230:	3104      	adds	r1, #4
 800a232:	f1b9 0f00 	cmp.w	r9, #0
 800a236:	d021      	beq.n	800a27c <__multiply+0x144>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	f104 0c14 	add.w	ip, r4, #20
 800a23e:	46ae      	mov	lr, r5
 800a240:	f04f 0a00 	mov.w	sl, #0
 800a244:	f8bc b000 	ldrh.w	fp, [ip]
 800a248:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a24c:	fb09 770b 	mla	r7, r9, fp, r7
 800a250:	4457      	add	r7, sl
 800a252:	b29b      	uxth	r3, r3
 800a254:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a258:	f84e 3b04 	str.w	r3, [lr], #4
 800a25c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a260:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a264:	f8be 3000 	ldrh.w	r3, [lr]
 800a268:	fb09 330a 	mla	r3, r9, sl, r3
 800a26c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a270:	4562      	cmp	r2, ip
 800a272:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a276:	d8e5      	bhi.n	800a244 <__multiply+0x10c>
 800a278:	9f01      	ldr	r7, [sp, #4]
 800a27a:	51eb      	str	r3, [r5, r7]
 800a27c:	3504      	adds	r5, #4
 800a27e:	e799      	b.n	800a1b4 <__multiply+0x7c>
 800a280:	3e01      	subs	r6, #1
 800a282:	e79b      	b.n	800a1bc <__multiply+0x84>
 800a284:	0800c82d 	.word	0x0800c82d
 800a288:	0800c83e 	.word	0x0800c83e

0800a28c <__pow5mult>:
 800a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a290:	4615      	mov	r5, r2
 800a292:	f012 0203 	ands.w	r2, r2, #3
 800a296:	4607      	mov	r7, r0
 800a298:	460e      	mov	r6, r1
 800a29a:	d007      	beq.n	800a2ac <__pow5mult+0x20>
 800a29c:	4c25      	ldr	r4, [pc, #148]	@ (800a334 <__pow5mult+0xa8>)
 800a29e:	3a01      	subs	r2, #1
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2a6:	f7ff fe55 	bl	8009f54 <__multadd>
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	10ad      	asrs	r5, r5, #2
 800a2ae:	d03d      	beq.n	800a32c <__pow5mult+0xa0>
 800a2b0:	69fc      	ldr	r4, [r7, #28]
 800a2b2:	b97c      	cbnz	r4, 800a2d4 <__pow5mult+0x48>
 800a2b4:	2010      	movs	r0, #16
 800a2b6:	f7ff fd35 	bl	8009d24 <malloc>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	61f8      	str	r0, [r7, #28]
 800a2be:	b928      	cbnz	r0, 800a2cc <__pow5mult+0x40>
 800a2c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a338 <__pow5mult+0xac>)
 800a2c2:	481e      	ldr	r0, [pc, #120]	@ (800a33c <__pow5mult+0xb0>)
 800a2c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2c8:	f7fe fe78 	bl	8008fbc <__assert_func>
 800a2cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2d0:	6004      	str	r4, [r0, #0]
 800a2d2:	60c4      	str	r4, [r0, #12]
 800a2d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a2d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2dc:	b94c      	cbnz	r4, 800a2f2 <__pow5mult+0x66>
 800a2de:	f240 2171 	movw	r1, #625	@ 0x271
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	f7ff ff12 	bl	800a10c <__i2b>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	6003      	str	r3, [r0, #0]
 800a2f2:	f04f 0900 	mov.w	r9, #0
 800a2f6:	07eb      	lsls	r3, r5, #31
 800a2f8:	d50a      	bpl.n	800a310 <__pow5mult+0x84>
 800a2fa:	4631      	mov	r1, r6
 800a2fc:	4622      	mov	r2, r4
 800a2fe:	4638      	mov	r0, r7
 800a300:	f7ff ff1a 	bl	800a138 <__multiply>
 800a304:	4631      	mov	r1, r6
 800a306:	4680      	mov	r8, r0
 800a308:	4638      	mov	r0, r7
 800a30a:	f7ff fe01 	bl	8009f10 <_Bfree>
 800a30e:	4646      	mov	r6, r8
 800a310:	106d      	asrs	r5, r5, #1
 800a312:	d00b      	beq.n	800a32c <__pow5mult+0xa0>
 800a314:	6820      	ldr	r0, [r4, #0]
 800a316:	b938      	cbnz	r0, 800a328 <__pow5mult+0x9c>
 800a318:	4622      	mov	r2, r4
 800a31a:	4621      	mov	r1, r4
 800a31c:	4638      	mov	r0, r7
 800a31e:	f7ff ff0b 	bl	800a138 <__multiply>
 800a322:	6020      	str	r0, [r4, #0]
 800a324:	f8c0 9000 	str.w	r9, [r0]
 800a328:	4604      	mov	r4, r0
 800a32a:	e7e4      	b.n	800a2f6 <__pow5mult+0x6a>
 800a32c:	4630      	mov	r0, r6
 800a32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a332:	bf00      	nop
 800a334:	0800c898 	.word	0x0800c898
 800a338:	0800c6e4 	.word	0x0800c6e4
 800a33c:	0800c83e 	.word	0x0800c83e

0800a340 <__lshift>:
 800a340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a344:	460c      	mov	r4, r1
 800a346:	6849      	ldr	r1, [r1, #4]
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a34e:	68a3      	ldr	r3, [r4, #8]
 800a350:	4607      	mov	r7, r0
 800a352:	4691      	mov	r9, r2
 800a354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a358:	f108 0601 	add.w	r6, r8, #1
 800a35c:	42b3      	cmp	r3, r6
 800a35e:	db0b      	blt.n	800a378 <__lshift+0x38>
 800a360:	4638      	mov	r0, r7
 800a362:	f7ff fd95 	bl	8009e90 <_Balloc>
 800a366:	4605      	mov	r5, r0
 800a368:	b948      	cbnz	r0, 800a37e <__lshift+0x3e>
 800a36a:	4602      	mov	r2, r0
 800a36c:	4b28      	ldr	r3, [pc, #160]	@ (800a410 <__lshift+0xd0>)
 800a36e:	4829      	ldr	r0, [pc, #164]	@ (800a414 <__lshift+0xd4>)
 800a370:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a374:	f7fe fe22 	bl	8008fbc <__assert_func>
 800a378:	3101      	adds	r1, #1
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	e7ee      	b.n	800a35c <__lshift+0x1c>
 800a37e:	2300      	movs	r3, #0
 800a380:	f100 0114 	add.w	r1, r0, #20
 800a384:	f100 0210 	add.w	r2, r0, #16
 800a388:	4618      	mov	r0, r3
 800a38a:	4553      	cmp	r3, sl
 800a38c:	db33      	blt.n	800a3f6 <__lshift+0xb6>
 800a38e:	6920      	ldr	r0, [r4, #16]
 800a390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a394:	f104 0314 	add.w	r3, r4, #20
 800a398:	f019 091f 	ands.w	r9, r9, #31
 800a39c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3a4:	d02b      	beq.n	800a3fe <__lshift+0xbe>
 800a3a6:	f1c9 0e20 	rsb	lr, r9, #32
 800a3aa:	468a      	mov	sl, r1
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	6818      	ldr	r0, [r3, #0]
 800a3b0:	fa00 f009 	lsl.w	r0, r0, r9
 800a3b4:	4310      	orrs	r0, r2
 800a3b6:	f84a 0b04 	str.w	r0, [sl], #4
 800a3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3be:	459c      	cmp	ip, r3
 800a3c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3c4:	d8f3      	bhi.n	800a3ae <__lshift+0x6e>
 800a3c6:	ebac 0304 	sub.w	r3, ip, r4
 800a3ca:	3b15      	subs	r3, #21
 800a3cc:	f023 0303 	bic.w	r3, r3, #3
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	f104 0015 	add.w	r0, r4, #21
 800a3d6:	4584      	cmp	ip, r0
 800a3d8:	bf38      	it	cc
 800a3da:	2304      	movcc	r3, #4
 800a3dc:	50ca      	str	r2, [r1, r3]
 800a3de:	b10a      	cbz	r2, 800a3e4 <__lshift+0xa4>
 800a3e0:	f108 0602 	add.w	r6, r8, #2
 800a3e4:	3e01      	subs	r6, #1
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	612e      	str	r6, [r5, #16]
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	f7ff fd90 	bl	8009f10 <_Bfree>
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	e7c5      	b.n	800a38a <__lshift+0x4a>
 800a3fe:	3904      	subs	r1, #4
 800a400:	f853 2b04 	ldr.w	r2, [r3], #4
 800a404:	f841 2f04 	str.w	r2, [r1, #4]!
 800a408:	459c      	cmp	ip, r3
 800a40a:	d8f9      	bhi.n	800a400 <__lshift+0xc0>
 800a40c:	e7ea      	b.n	800a3e4 <__lshift+0xa4>
 800a40e:	bf00      	nop
 800a410:	0800c82d 	.word	0x0800c82d
 800a414:	0800c83e 	.word	0x0800c83e

0800a418 <__mcmp>:
 800a418:	690a      	ldr	r2, [r1, #16]
 800a41a:	4603      	mov	r3, r0
 800a41c:	6900      	ldr	r0, [r0, #16]
 800a41e:	1a80      	subs	r0, r0, r2
 800a420:	b530      	push	{r4, r5, lr}
 800a422:	d10e      	bne.n	800a442 <__mcmp+0x2a>
 800a424:	3314      	adds	r3, #20
 800a426:	3114      	adds	r1, #20
 800a428:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a42c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a430:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a434:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a438:	4295      	cmp	r5, r2
 800a43a:	d003      	beq.n	800a444 <__mcmp+0x2c>
 800a43c:	d205      	bcs.n	800a44a <__mcmp+0x32>
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	bd30      	pop	{r4, r5, pc}
 800a444:	42a3      	cmp	r3, r4
 800a446:	d3f3      	bcc.n	800a430 <__mcmp+0x18>
 800a448:	e7fb      	b.n	800a442 <__mcmp+0x2a>
 800a44a:	2001      	movs	r0, #1
 800a44c:	e7f9      	b.n	800a442 <__mcmp+0x2a>
	...

0800a450 <__mdiff>:
 800a450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	4689      	mov	r9, r1
 800a456:	4606      	mov	r6, r0
 800a458:	4611      	mov	r1, r2
 800a45a:	4648      	mov	r0, r9
 800a45c:	4614      	mov	r4, r2
 800a45e:	f7ff ffdb 	bl	800a418 <__mcmp>
 800a462:	1e05      	subs	r5, r0, #0
 800a464:	d112      	bne.n	800a48c <__mdiff+0x3c>
 800a466:	4629      	mov	r1, r5
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff fd11 	bl	8009e90 <_Balloc>
 800a46e:	4602      	mov	r2, r0
 800a470:	b928      	cbnz	r0, 800a47e <__mdiff+0x2e>
 800a472:	4b3f      	ldr	r3, [pc, #252]	@ (800a570 <__mdiff+0x120>)
 800a474:	f240 2137 	movw	r1, #567	@ 0x237
 800a478:	483e      	ldr	r0, [pc, #248]	@ (800a574 <__mdiff+0x124>)
 800a47a:	f7fe fd9f 	bl	8008fbc <__assert_func>
 800a47e:	2301      	movs	r3, #1
 800a480:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a484:	4610      	mov	r0, r2
 800a486:	b003      	add	sp, #12
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	bfbc      	itt	lt
 800a48e:	464b      	movlt	r3, r9
 800a490:	46a1      	movlt	r9, r4
 800a492:	4630      	mov	r0, r6
 800a494:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a498:	bfba      	itte	lt
 800a49a:	461c      	movlt	r4, r3
 800a49c:	2501      	movlt	r5, #1
 800a49e:	2500      	movge	r5, #0
 800a4a0:	f7ff fcf6 	bl	8009e90 <_Balloc>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	b918      	cbnz	r0, 800a4b0 <__mdiff+0x60>
 800a4a8:	4b31      	ldr	r3, [pc, #196]	@ (800a570 <__mdiff+0x120>)
 800a4aa:	f240 2145 	movw	r1, #581	@ 0x245
 800a4ae:	e7e3      	b.n	800a478 <__mdiff+0x28>
 800a4b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a4b4:	6926      	ldr	r6, [r4, #16]
 800a4b6:	60c5      	str	r5, [r0, #12]
 800a4b8:	f109 0310 	add.w	r3, r9, #16
 800a4bc:	f109 0514 	add.w	r5, r9, #20
 800a4c0:	f104 0e14 	add.w	lr, r4, #20
 800a4c4:	f100 0b14 	add.w	fp, r0, #20
 800a4c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	46d9      	mov	r9, fp
 800a4d4:	f04f 0c00 	mov.w	ip, #0
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4e2:	9301      	str	r3, [sp, #4]
 800a4e4:	fa1f f38a 	uxth.w	r3, sl
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	b283      	uxth	r3, r0
 800a4ec:	1acb      	subs	r3, r1, r3
 800a4ee:	0c00      	lsrs	r0, r0, #16
 800a4f0:	4463      	add	r3, ip
 800a4f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a500:	4576      	cmp	r6, lr
 800a502:	f849 3b04 	str.w	r3, [r9], #4
 800a506:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a50a:	d8e5      	bhi.n	800a4d8 <__mdiff+0x88>
 800a50c:	1b33      	subs	r3, r6, r4
 800a50e:	3b15      	subs	r3, #21
 800a510:	f023 0303 	bic.w	r3, r3, #3
 800a514:	3415      	adds	r4, #21
 800a516:	3304      	adds	r3, #4
 800a518:	42a6      	cmp	r6, r4
 800a51a:	bf38      	it	cc
 800a51c:	2304      	movcc	r3, #4
 800a51e:	441d      	add	r5, r3
 800a520:	445b      	add	r3, fp
 800a522:	461e      	mov	r6, r3
 800a524:	462c      	mov	r4, r5
 800a526:	4544      	cmp	r4, r8
 800a528:	d30e      	bcc.n	800a548 <__mdiff+0xf8>
 800a52a:	f108 0103 	add.w	r1, r8, #3
 800a52e:	1b49      	subs	r1, r1, r5
 800a530:	f021 0103 	bic.w	r1, r1, #3
 800a534:	3d03      	subs	r5, #3
 800a536:	45a8      	cmp	r8, r5
 800a538:	bf38      	it	cc
 800a53a:	2100      	movcc	r1, #0
 800a53c:	440b      	add	r3, r1
 800a53e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a542:	b191      	cbz	r1, 800a56a <__mdiff+0x11a>
 800a544:	6117      	str	r7, [r2, #16]
 800a546:	e79d      	b.n	800a484 <__mdiff+0x34>
 800a548:	f854 1b04 	ldr.w	r1, [r4], #4
 800a54c:	46e6      	mov	lr, ip
 800a54e:	0c08      	lsrs	r0, r1, #16
 800a550:	fa1c fc81 	uxtah	ip, ip, r1
 800a554:	4471      	add	r1, lr
 800a556:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a55a:	b289      	uxth	r1, r1
 800a55c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a560:	f846 1b04 	str.w	r1, [r6], #4
 800a564:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a568:	e7dd      	b.n	800a526 <__mdiff+0xd6>
 800a56a:	3f01      	subs	r7, #1
 800a56c:	e7e7      	b.n	800a53e <__mdiff+0xee>
 800a56e:	bf00      	nop
 800a570:	0800c82d 	.word	0x0800c82d
 800a574:	0800c83e 	.word	0x0800c83e

0800a578 <__ulp>:
 800a578:	b082      	sub	sp, #8
 800a57a:	ed8d 0b00 	vstr	d0, [sp]
 800a57e:	9a01      	ldr	r2, [sp, #4]
 800a580:	4b0f      	ldr	r3, [pc, #60]	@ (800a5c0 <__ulp+0x48>)
 800a582:	4013      	ands	r3, r2
 800a584:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dc08      	bgt.n	800a59e <__ulp+0x26>
 800a58c:	425b      	negs	r3, r3
 800a58e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a592:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a596:	da04      	bge.n	800a5a2 <__ulp+0x2a>
 800a598:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a59c:	4113      	asrs	r3, r2
 800a59e:	2200      	movs	r2, #0
 800a5a0:	e008      	b.n	800a5b4 <__ulp+0x3c>
 800a5a2:	f1a2 0314 	sub.w	r3, r2, #20
 800a5a6:	2b1e      	cmp	r3, #30
 800a5a8:	bfda      	itte	le
 800a5aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a5ae:	40da      	lsrle	r2, r3
 800a5b0:	2201      	movgt	r2, #1
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	ec41 0b10 	vmov	d0, r0, r1
 800a5bc:	b002      	add	sp, #8
 800a5be:	4770      	bx	lr
 800a5c0:	7ff00000 	.word	0x7ff00000

0800a5c4 <__b2d>:
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	6906      	ldr	r6, [r0, #16]
 800a5ca:	f100 0814 	add.w	r8, r0, #20
 800a5ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5d2:	1f37      	subs	r7, r6, #4
 800a5d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5d8:	4610      	mov	r0, r2
 800a5da:	f7ff fd4b 	bl	800a074 <__hi0bits>
 800a5de:	f1c0 0320 	rsb	r3, r0, #32
 800a5e2:	280a      	cmp	r0, #10
 800a5e4:	600b      	str	r3, [r1, #0]
 800a5e6:	491b      	ldr	r1, [pc, #108]	@ (800a654 <__b2d+0x90>)
 800a5e8:	dc15      	bgt.n	800a616 <__b2d+0x52>
 800a5ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5f2:	45b8      	cmp	r8, r7
 800a5f4:	ea43 0501 	orr.w	r5, r3, r1
 800a5f8:	bf34      	ite	cc
 800a5fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5fe:	2300      	movcs	r3, #0
 800a600:	3015      	adds	r0, #21
 800a602:	fa02 f000 	lsl.w	r0, r2, r0
 800a606:	fa23 f30c 	lsr.w	r3, r3, ip
 800a60a:	4303      	orrs	r3, r0
 800a60c:	461c      	mov	r4, r3
 800a60e:	ec45 4b10 	vmov	d0, r4, r5
 800a612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a616:	45b8      	cmp	r8, r7
 800a618:	bf3a      	itte	cc
 800a61a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a61e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a622:	2300      	movcs	r3, #0
 800a624:	380b      	subs	r0, #11
 800a626:	d012      	beq.n	800a64e <__b2d+0x8a>
 800a628:	f1c0 0120 	rsb	r1, r0, #32
 800a62c:	fa23 f401 	lsr.w	r4, r3, r1
 800a630:	4082      	lsls	r2, r0
 800a632:	4322      	orrs	r2, r4
 800a634:	4547      	cmp	r7, r8
 800a636:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a63a:	bf8c      	ite	hi
 800a63c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a640:	2200      	movls	r2, #0
 800a642:	4083      	lsls	r3, r0
 800a644:	40ca      	lsrs	r2, r1
 800a646:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a64a:	4313      	orrs	r3, r2
 800a64c:	e7de      	b.n	800a60c <__b2d+0x48>
 800a64e:	ea42 0501 	orr.w	r5, r2, r1
 800a652:	e7db      	b.n	800a60c <__b2d+0x48>
 800a654:	3ff00000 	.word	0x3ff00000

0800a658 <__d2b>:
 800a658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a65c:	460f      	mov	r7, r1
 800a65e:	2101      	movs	r1, #1
 800a660:	ec59 8b10 	vmov	r8, r9, d0
 800a664:	4616      	mov	r6, r2
 800a666:	f7ff fc13 	bl	8009e90 <_Balloc>
 800a66a:	4604      	mov	r4, r0
 800a66c:	b930      	cbnz	r0, 800a67c <__d2b+0x24>
 800a66e:	4602      	mov	r2, r0
 800a670:	4b23      	ldr	r3, [pc, #140]	@ (800a700 <__d2b+0xa8>)
 800a672:	4824      	ldr	r0, [pc, #144]	@ (800a704 <__d2b+0xac>)
 800a674:	f240 310f 	movw	r1, #783	@ 0x30f
 800a678:	f7fe fca0 	bl	8008fbc <__assert_func>
 800a67c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a680:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a684:	b10d      	cbz	r5, 800a68a <__d2b+0x32>
 800a686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a68a:	9301      	str	r3, [sp, #4]
 800a68c:	f1b8 0300 	subs.w	r3, r8, #0
 800a690:	d023      	beq.n	800a6da <__d2b+0x82>
 800a692:	4668      	mov	r0, sp
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	f7ff fd0c 	bl	800a0b2 <__lo0bits>
 800a69a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a69e:	b1d0      	cbz	r0, 800a6d6 <__d2b+0x7e>
 800a6a0:	f1c0 0320 	rsb	r3, r0, #32
 800a6a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	40c2      	lsrs	r2, r0
 800a6ac:	6163      	str	r3, [r4, #20]
 800a6ae:	9201      	str	r2, [sp, #4]
 800a6b0:	9b01      	ldr	r3, [sp, #4]
 800a6b2:	61a3      	str	r3, [r4, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	bf0c      	ite	eq
 800a6b8:	2201      	moveq	r2, #1
 800a6ba:	2202      	movne	r2, #2
 800a6bc:	6122      	str	r2, [r4, #16]
 800a6be:	b1a5      	cbz	r5, 800a6ea <__d2b+0x92>
 800a6c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a6c4:	4405      	add	r5, r0
 800a6c6:	603d      	str	r5, [r7, #0]
 800a6c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a6cc:	6030      	str	r0, [r6, #0]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	b003      	add	sp, #12
 800a6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6d6:	6161      	str	r1, [r4, #20]
 800a6d8:	e7ea      	b.n	800a6b0 <__d2b+0x58>
 800a6da:	a801      	add	r0, sp, #4
 800a6dc:	f7ff fce9 	bl	800a0b2 <__lo0bits>
 800a6e0:	9b01      	ldr	r3, [sp, #4]
 800a6e2:	6163      	str	r3, [r4, #20]
 800a6e4:	3020      	adds	r0, #32
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	e7e8      	b.n	800a6bc <__d2b+0x64>
 800a6ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a6f2:	6038      	str	r0, [r7, #0]
 800a6f4:	6918      	ldr	r0, [r3, #16]
 800a6f6:	f7ff fcbd 	bl	800a074 <__hi0bits>
 800a6fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6fe:	e7e5      	b.n	800a6cc <__d2b+0x74>
 800a700:	0800c82d 	.word	0x0800c82d
 800a704:	0800c83e 	.word	0x0800c83e

0800a708 <__ratio>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	b085      	sub	sp, #20
 800a70e:	e9cd 1000 	strd	r1, r0, [sp]
 800a712:	a902      	add	r1, sp, #8
 800a714:	f7ff ff56 	bl	800a5c4 <__b2d>
 800a718:	9800      	ldr	r0, [sp, #0]
 800a71a:	a903      	add	r1, sp, #12
 800a71c:	ec55 4b10 	vmov	r4, r5, d0
 800a720:	f7ff ff50 	bl	800a5c4 <__b2d>
 800a724:	9b01      	ldr	r3, [sp, #4]
 800a726:	6919      	ldr	r1, [r3, #16]
 800a728:	9b00      	ldr	r3, [sp, #0]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	1ac9      	subs	r1, r1, r3
 800a72e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a732:	1a9b      	subs	r3, r3, r2
 800a734:	ec5b ab10 	vmov	sl, fp, d0
 800a738:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	bfce      	itee	gt
 800a740:	462a      	movgt	r2, r5
 800a742:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a746:	465a      	movle	r2, fp
 800a748:	462f      	mov	r7, r5
 800a74a:	46d9      	mov	r9, fp
 800a74c:	bfcc      	ite	gt
 800a74e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a752:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a756:	464b      	mov	r3, r9
 800a758:	4652      	mov	r2, sl
 800a75a:	4620      	mov	r0, r4
 800a75c:	4639      	mov	r1, r7
 800a75e:	f7f6 f875 	bl	800084c <__aeabi_ddiv>
 800a762:	ec41 0b10 	vmov	d0, r0, r1
 800a766:	b005      	add	sp, #20
 800a768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a76c <__copybits>:
 800a76c:	3901      	subs	r1, #1
 800a76e:	b570      	push	{r4, r5, r6, lr}
 800a770:	1149      	asrs	r1, r1, #5
 800a772:	6914      	ldr	r4, [r2, #16]
 800a774:	3101      	adds	r1, #1
 800a776:	f102 0314 	add.w	r3, r2, #20
 800a77a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a77e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a782:	1f05      	subs	r5, r0, #4
 800a784:	42a3      	cmp	r3, r4
 800a786:	d30c      	bcc.n	800a7a2 <__copybits+0x36>
 800a788:	1aa3      	subs	r3, r4, r2
 800a78a:	3b11      	subs	r3, #17
 800a78c:	f023 0303 	bic.w	r3, r3, #3
 800a790:	3211      	adds	r2, #17
 800a792:	42a2      	cmp	r2, r4
 800a794:	bf88      	it	hi
 800a796:	2300      	movhi	r3, #0
 800a798:	4418      	add	r0, r3
 800a79a:	2300      	movs	r3, #0
 800a79c:	4288      	cmp	r0, r1
 800a79e:	d305      	bcc.n	800a7ac <__copybits+0x40>
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
 800a7a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a7a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a7aa:	e7eb      	b.n	800a784 <__copybits+0x18>
 800a7ac:	f840 3b04 	str.w	r3, [r0], #4
 800a7b0:	e7f4      	b.n	800a79c <__copybits+0x30>

0800a7b2 <__any_on>:
 800a7b2:	f100 0214 	add.w	r2, r0, #20
 800a7b6:	6900      	ldr	r0, [r0, #16]
 800a7b8:	114b      	asrs	r3, r1, #5
 800a7ba:	4298      	cmp	r0, r3
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	db11      	blt.n	800a7e4 <__any_on+0x32>
 800a7c0:	dd0a      	ble.n	800a7d8 <__any_on+0x26>
 800a7c2:	f011 011f 	ands.w	r1, r1, #31
 800a7c6:	d007      	beq.n	800a7d8 <__any_on+0x26>
 800a7c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7cc:	fa24 f001 	lsr.w	r0, r4, r1
 800a7d0:	fa00 f101 	lsl.w	r1, r0, r1
 800a7d4:	428c      	cmp	r4, r1
 800a7d6:	d10b      	bne.n	800a7f0 <__any_on+0x3e>
 800a7d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d803      	bhi.n	800a7e8 <__any_on+0x36>
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	bd10      	pop	{r4, pc}
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	e7f7      	b.n	800a7d8 <__any_on+0x26>
 800a7e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7ec:	2900      	cmp	r1, #0
 800a7ee:	d0f5      	beq.n	800a7dc <__any_on+0x2a>
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	e7f6      	b.n	800a7e2 <__any_on+0x30>

0800a7f4 <sulp>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	ec45 4b10 	vmov	d0, r4, r5
 800a7fe:	4616      	mov	r6, r2
 800a800:	f7ff feba 	bl	800a578 <__ulp>
 800a804:	ec51 0b10 	vmov	r0, r1, d0
 800a808:	b17e      	cbz	r6, 800a82a <sulp+0x36>
 800a80a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a80e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a812:	2b00      	cmp	r3, #0
 800a814:	dd09      	ble.n	800a82a <sulp+0x36>
 800a816:	051b      	lsls	r3, r3, #20
 800a818:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a81c:	2400      	movs	r4, #0
 800a81e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a822:	4622      	mov	r2, r4
 800a824:	462b      	mov	r3, r5
 800a826:	f7f5 fee7 	bl	80005f8 <__aeabi_dmul>
 800a82a:	ec41 0b10 	vmov	d0, r0, r1
 800a82e:	bd70      	pop	{r4, r5, r6, pc}

0800a830 <_strtod_l>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	b09f      	sub	sp, #124	@ 0x7c
 800a836:	460c      	mov	r4, r1
 800a838:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a83a:	2200      	movs	r2, #0
 800a83c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a83e:	9005      	str	r0, [sp, #20]
 800a840:	f04f 0a00 	mov.w	sl, #0
 800a844:	f04f 0b00 	mov.w	fp, #0
 800a848:	460a      	mov	r2, r1
 800a84a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a84c:	7811      	ldrb	r1, [r2, #0]
 800a84e:	292b      	cmp	r1, #43	@ 0x2b
 800a850:	d04a      	beq.n	800a8e8 <_strtod_l+0xb8>
 800a852:	d838      	bhi.n	800a8c6 <_strtod_l+0x96>
 800a854:	290d      	cmp	r1, #13
 800a856:	d832      	bhi.n	800a8be <_strtod_l+0x8e>
 800a858:	2908      	cmp	r1, #8
 800a85a:	d832      	bhi.n	800a8c2 <_strtod_l+0x92>
 800a85c:	2900      	cmp	r1, #0
 800a85e:	d03b      	beq.n	800a8d8 <_strtod_l+0xa8>
 800a860:	2200      	movs	r2, #0
 800a862:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a864:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a866:	782a      	ldrb	r2, [r5, #0]
 800a868:	2a30      	cmp	r2, #48	@ 0x30
 800a86a:	f040 80b3 	bne.w	800a9d4 <_strtod_l+0x1a4>
 800a86e:	786a      	ldrb	r2, [r5, #1]
 800a870:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a874:	2a58      	cmp	r2, #88	@ 0x58
 800a876:	d16e      	bne.n	800a956 <_strtod_l+0x126>
 800a878:	9302      	str	r3, [sp, #8]
 800a87a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a87c:	9301      	str	r3, [sp, #4]
 800a87e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	4a8e      	ldr	r2, [pc, #568]	@ (800aabc <_strtod_l+0x28c>)
 800a884:	9805      	ldr	r0, [sp, #20]
 800a886:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a888:	a919      	add	r1, sp, #100	@ 0x64
 800a88a:	f001 f913 	bl	800bab4 <__gethex>
 800a88e:	f010 060f 	ands.w	r6, r0, #15
 800a892:	4604      	mov	r4, r0
 800a894:	d005      	beq.n	800a8a2 <_strtod_l+0x72>
 800a896:	2e06      	cmp	r6, #6
 800a898:	d128      	bne.n	800a8ec <_strtod_l+0xbc>
 800a89a:	3501      	adds	r5, #1
 800a89c:	2300      	movs	r3, #0
 800a89e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a8a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f040 858e 	bne.w	800b3c6 <_strtod_l+0xb96>
 800a8aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8ac:	b1cb      	cbz	r3, 800a8e2 <_strtod_l+0xb2>
 800a8ae:	4652      	mov	r2, sl
 800a8b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a8b4:	ec43 2b10 	vmov	d0, r2, r3
 800a8b8:	b01f      	add	sp, #124	@ 0x7c
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	2920      	cmp	r1, #32
 800a8c0:	d1ce      	bne.n	800a860 <_strtod_l+0x30>
 800a8c2:	3201      	adds	r2, #1
 800a8c4:	e7c1      	b.n	800a84a <_strtod_l+0x1a>
 800a8c6:	292d      	cmp	r1, #45	@ 0x2d
 800a8c8:	d1ca      	bne.n	800a860 <_strtod_l+0x30>
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a8ce:	1c51      	adds	r1, r2, #1
 800a8d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a8d2:	7852      	ldrb	r2, [r2, #1]
 800a8d4:	2a00      	cmp	r2, #0
 800a8d6:	d1c5      	bne.n	800a864 <_strtod_l+0x34>
 800a8d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8da:	9419      	str	r4, [sp, #100]	@ 0x64
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f040 8570 	bne.w	800b3c2 <_strtod_l+0xb92>
 800a8e2:	4652      	mov	r2, sl
 800a8e4:	465b      	mov	r3, fp
 800a8e6:	e7e5      	b.n	800a8b4 <_strtod_l+0x84>
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	e7ef      	b.n	800a8cc <_strtod_l+0x9c>
 800a8ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8ee:	b13a      	cbz	r2, 800a900 <_strtod_l+0xd0>
 800a8f0:	2135      	movs	r1, #53	@ 0x35
 800a8f2:	a81c      	add	r0, sp, #112	@ 0x70
 800a8f4:	f7ff ff3a 	bl	800a76c <__copybits>
 800a8f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8fa:	9805      	ldr	r0, [sp, #20]
 800a8fc:	f7ff fb08 	bl	8009f10 <_Bfree>
 800a900:	3e01      	subs	r6, #1
 800a902:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a904:	2e04      	cmp	r6, #4
 800a906:	d806      	bhi.n	800a916 <_strtod_l+0xe6>
 800a908:	e8df f006 	tbb	[pc, r6]
 800a90c:	201d0314 	.word	0x201d0314
 800a910:	14          	.byte	0x14
 800a911:	00          	.byte	0x00
 800a912:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a916:	05e1      	lsls	r1, r4, #23
 800a918:	bf48      	it	mi
 800a91a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a91e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a922:	0d1b      	lsrs	r3, r3, #20
 800a924:	051b      	lsls	r3, r3, #20
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1bb      	bne.n	800a8a2 <_strtod_l+0x72>
 800a92a:	f7fe fb05 	bl	8008f38 <__errno>
 800a92e:	2322      	movs	r3, #34	@ 0x22
 800a930:	6003      	str	r3, [r0, #0]
 800a932:	e7b6      	b.n	800a8a2 <_strtod_l+0x72>
 800a934:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a938:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a93c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a940:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a944:	e7e7      	b.n	800a916 <_strtod_l+0xe6>
 800a946:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800aac4 <_strtod_l+0x294>
 800a94a:	e7e4      	b.n	800a916 <_strtod_l+0xe6>
 800a94c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a950:	f04f 3aff 	mov.w	sl, #4294967295
 800a954:	e7df      	b.n	800a916 <_strtod_l+0xe6>
 800a956:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a958:	1c5a      	adds	r2, r3, #1
 800a95a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a95c:	785b      	ldrb	r3, [r3, #1]
 800a95e:	2b30      	cmp	r3, #48	@ 0x30
 800a960:	d0f9      	beq.n	800a956 <_strtod_l+0x126>
 800a962:	2b00      	cmp	r3, #0
 800a964:	d09d      	beq.n	800a8a2 <_strtod_l+0x72>
 800a966:	2301      	movs	r3, #1
 800a968:	9309      	str	r3, [sp, #36]	@ 0x24
 800a96a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a96c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a96e:	2300      	movs	r3, #0
 800a970:	9308      	str	r3, [sp, #32]
 800a972:	930a      	str	r3, [sp, #40]	@ 0x28
 800a974:	461f      	mov	r7, r3
 800a976:	220a      	movs	r2, #10
 800a978:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a97a:	7805      	ldrb	r5, [r0, #0]
 800a97c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a980:	b2d9      	uxtb	r1, r3
 800a982:	2909      	cmp	r1, #9
 800a984:	d928      	bls.n	800a9d8 <_strtod_l+0x1a8>
 800a986:	494e      	ldr	r1, [pc, #312]	@ (800aac0 <_strtod_l+0x290>)
 800a988:	2201      	movs	r2, #1
 800a98a:	f000 ffe7 	bl	800b95c <strncmp>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d032      	beq.n	800a9f8 <_strtod_l+0x1c8>
 800a992:	2000      	movs	r0, #0
 800a994:	462a      	mov	r2, r5
 800a996:	4681      	mov	r9, r0
 800a998:	463d      	mov	r5, r7
 800a99a:	4603      	mov	r3, r0
 800a99c:	2a65      	cmp	r2, #101	@ 0x65
 800a99e:	d001      	beq.n	800a9a4 <_strtod_l+0x174>
 800a9a0:	2a45      	cmp	r2, #69	@ 0x45
 800a9a2:	d114      	bne.n	800a9ce <_strtod_l+0x19e>
 800a9a4:	b91d      	cbnz	r5, 800a9ae <_strtod_l+0x17e>
 800a9a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9a8:	4302      	orrs	r2, r0
 800a9aa:	d095      	beq.n	800a8d8 <_strtod_l+0xa8>
 800a9ac:	2500      	movs	r5, #0
 800a9ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a9b0:	1c62      	adds	r2, r4, #1
 800a9b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9b4:	7862      	ldrb	r2, [r4, #1]
 800a9b6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a9b8:	d077      	beq.n	800aaaa <_strtod_l+0x27a>
 800a9ba:	2a2d      	cmp	r2, #45	@ 0x2d
 800a9bc:	d07b      	beq.n	800aab6 <_strtod_l+0x286>
 800a9be:	f04f 0c00 	mov.w	ip, #0
 800a9c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a9c6:	2909      	cmp	r1, #9
 800a9c8:	f240 8082 	bls.w	800aad0 <_strtod_l+0x2a0>
 800a9cc:	9419      	str	r4, [sp, #100]	@ 0x64
 800a9ce:	f04f 0800 	mov.w	r8, #0
 800a9d2:	e0a2      	b.n	800ab1a <_strtod_l+0x2ea>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	e7c7      	b.n	800a968 <_strtod_l+0x138>
 800a9d8:	2f08      	cmp	r7, #8
 800a9da:	bfd5      	itete	le
 800a9dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a9de:	9908      	ldrgt	r1, [sp, #32]
 800a9e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a9e8:	f100 0001 	add.w	r0, r0, #1
 800a9ec:	bfd4      	ite	le
 800a9ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a9f0:	9308      	strgt	r3, [sp, #32]
 800a9f2:	3701      	adds	r7, #1
 800a9f4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a9f6:	e7bf      	b.n	800a978 <_strtod_l+0x148>
 800a9f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9fe:	785a      	ldrb	r2, [r3, #1]
 800aa00:	b37f      	cbz	r7, 800aa62 <_strtod_l+0x232>
 800aa02:	4681      	mov	r9, r0
 800aa04:	463d      	mov	r5, r7
 800aa06:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aa0a:	2b09      	cmp	r3, #9
 800aa0c:	d912      	bls.n	800aa34 <_strtod_l+0x204>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e7c4      	b.n	800a99c <_strtod_l+0x16c>
 800aa12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa18:	785a      	ldrb	r2, [r3, #1]
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	2a30      	cmp	r2, #48	@ 0x30
 800aa1e:	d0f8      	beq.n	800aa12 <_strtod_l+0x1e2>
 800aa20:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	f200 84d3 	bhi.w	800b3d0 <_strtod_l+0xba0>
 800aa2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa2e:	4681      	mov	r9, r0
 800aa30:	2000      	movs	r0, #0
 800aa32:	4605      	mov	r5, r0
 800aa34:	3a30      	subs	r2, #48	@ 0x30
 800aa36:	f100 0301 	add.w	r3, r0, #1
 800aa3a:	d02a      	beq.n	800aa92 <_strtod_l+0x262>
 800aa3c:	4499      	add	r9, r3
 800aa3e:	eb00 0c05 	add.w	ip, r0, r5
 800aa42:	462b      	mov	r3, r5
 800aa44:	210a      	movs	r1, #10
 800aa46:	4563      	cmp	r3, ip
 800aa48:	d10d      	bne.n	800aa66 <_strtod_l+0x236>
 800aa4a:	1c69      	adds	r1, r5, #1
 800aa4c:	4401      	add	r1, r0
 800aa4e:	4428      	add	r0, r5
 800aa50:	2808      	cmp	r0, #8
 800aa52:	dc16      	bgt.n	800aa82 <_strtod_l+0x252>
 800aa54:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa56:	230a      	movs	r3, #10
 800aa58:	fb03 2300 	mla	r3, r3, r0, r2
 800aa5c:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e018      	b.n	800aa94 <_strtod_l+0x264>
 800aa62:	4638      	mov	r0, r7
 800aa64:	e7da      	b.n	800aa1c <_strtod_l+0x1ec>
 800aa66:	2b08      	cmp	r3, #8
 800aa68:	f103 0301 	add.w	r3, r3, #1
 800aa6c:	dc03      	bgt.n	800aa76 <_strtod_l+0x246>
 800aa6e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aa70:	434e      	muls	r6, r1
 800aa72:	960a      	str	r6, [sp, #40]	@ 0x28
 800aa74:	e7e7      	b.n	800aa46 <_strtod_l+0x216>
 800aa76:	2b10      	cmp	r3, #16
 800aa78:	bfde      	ittt	le
 800aa7a:	9e08      	ldrle	r6, [sp, #32]
 800aa7c:	434e      	mulle	r6, r1
 800aa7e:	9608      	strle	r6, [sp, #32]
 800aa80:	e7e1      	b.n	800aa46 <_strtod_l+0x216>
 800aa82:	280f      	cmp	r0, #15
 800aa84:	dceb      	bgt.n	800aa5e <_strtod_l+0x22e>
 800aa86:	9808      	ldr	r0, [sp, #32]
 800aa88:	230a      	movs	r3, #10
 800aa8a:	fb03 2300 	mla	r3, r3, r0, r2
 800aa8e:	9308      	str	r3, [sp, #32]
 800aa90:	e7e5      	b.n	800aa5e <_strtod_l+0x22e>
 800aa92:	4629      	mov	r1, r5
 800aa94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa96:	1c50      	adds	r0, r2, #1
 800aa98:	9019      	str	r0, [sp, #100]	@ 0x64
 800aa9a:	7852      	ldrb	r2, [r2, #1]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	e7b1      	b.n	800aa06 <_strtod_l+0x1d6>
 800aaa2:	f04f 0900 	mov.w	r9, #0
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e77d      	b.n	800a9a6 <_strtod_l+0x176>
 800aaaa:	f04f 0c00 	mov.w	ip, #0
 800aaae:	1ca2      	adds	r2, r4, #2
 800aab0:	9219      	str	r2, [sp, #100]	@ 0x64
 800aab2:	78a2      	ldrb	r2, [r4, #2]
 800aab4:	e785      	b.n	800a9c2 <_strtod_l+0x192>
 800aab6:	f04f 0c01 	mov.w	ip, #1
 800aaba:	e7f8      	b.n	800aaae <_strtod_l+0x27e>
 800aabc:	0800c9b0 	.word	0x0800c9b0
 800aac0:	0800c998 	.word	0x0800c998
 800aac4:	7ff00000 	.word	0x7ff00000
 800aac8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aaca:	1c51      	adds	r1, r2, #1
 800aacc:	9119      	str	r1, [sp, #100]	@ 0x64
 800aace:	7852      	ldrb	r2, [r2, #1]
 800aad0:	2a30      	cmp	r2, #48	@ 0x30
 800aad2:	d0f9      	beq.n	800aac8 <_strtod_l+0x298>
 800aad4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aad8:	2908      	cmp	r1, #8
 800aada:	f63f af78 	bhi.w	800a9ce <_strtod_l+0x19e>
 800aade:	3a30      	subs	r2, #48	@ 0x30
 800aae0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aae2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aae4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aae6:	f04f 080a 	mov.w	r8, #10
 800aaea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aaec:	1c56      	adds	r6, r2, #1
 800aaee:	9619      	str	r6, [sp, #100]	@ 0x64
 800aaf0:	7852      	ldrb	r2, [r2, #1]
 800aaf2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800aaf6:	f1be 0f09 	cmp.w	lr, #9
 800aafa:	d939      	bls.n	800ab70 <_strtod_l+0x340>
 800aafc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aafe:	1a76      	subs	r6, r6, r1
 800ab00:	2e08      	cmp	r6, #8
 800ab02:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ab06:	dc03      	bgt.n	800ab10 <_strtod_l+0x2e0>
 800ab08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab0a:	4588      	cmp	r8, r1
 800ab0c:	bfa8      	it	ge
 800ab0e:	4688      	movge	r8, r1
 800ab10:	f1bc 0f00 	cmp.w	ip, #0
 800ab14:	d001      	beq.n	800ab1a <_strtod_l+0x2ea>
 800ab16:	f1c8 0800 	rsb	r8, r8, #0
 800ab1a:	2d00      	cmp	r5, #0
 800ab1c:	d14e      	bne.n	800abbc <_strtod_l+0x38c>
 800ab1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab20:	4308      	orrs	r0, r1
 800ab22:	f47f aebe 	bne.w	800a8a2 <_strtod_l+0x72>
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f47f aed6 	bne.w	800a8d8 <_strtod_l+0xa8>
 800ab2c:	2a69      	cmp	r2, #105	@ 0x69
 800ab2e:	d028      	beq.n	800ab82 <_strtod_l+0x352>
 800ab30:	dc25      	bgt.n	800ab7e <_strtod_l+0x34e>
 800ab32:	2a49      	cmp	r2, #73	@ 0x49
 800ab34:	d025      	beq.n	800ab82 <_strtod_l+0x352>
 800ab36:	2a4e      	cmp	r2, #78	@ 0x4e
 800ab38:	f47f aece 	bne.w	800a8d8 <_strtod_l+0xa8>
 800ab3c:	499b      	ldr	r1, [pc, #620]	@ (800adac <_strtod_l+0x57c>)
 800ab3e:	a819      	add	r0, sp, #100	@ 0x64
 800ab40:	f001 f9da 	bl	800bef8 <__match>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	f43f aec7 	beq.w	800a8d8 <_strtod_l+0xa8>
 800ab4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b28      	cmp	r3, #40	@ 0x28
 800ab50:	d12e      	bne.n	800abb0 <_strtod_l+0x380>
 800ab52:	4997      	ldr	r1, [pc, #604]	@ (800adb0 <_strtod_l+0x580>)
 800ab54:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab56:	a819      	add	r0, sp, #100	@ 0x64
 800ab58:	f001 f9e2 	bl	800bf20 <__hexnan>
 800ab5c:	2805      	cmp	r0, #5
 800ab5e:	d127      	bne.n	800abb0 <_strtod_l+0x380>
 800ab60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab62:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ab66:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ab6a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ab6e:	e698      	b.n	800a8a2 <_strtod_l+0x72>
 800ab70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab72:	fb08 2101 	mla	r1, r8, r1, r2
 800ab76:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ab7a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab7c:	e7b5      	b.n	800aaea <_strtod_l+0x2ba>
 800ab7e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ab80:	e7da      	b.n	800ab38 <_strtod_l+0x308>
 800ab82:	498c      	ldr	r1, [pc, #560]	@ (800adb4 <_strtod_l+0x584>)
 800ab84:	a819      	add	r0, sp, #100	@ 0x64
 800ab86:	f001 f9b7 	bl	800bef8 <__match>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f43f aea4 	beq.w	800a8d8 <_strtod_l+0xa8>
 800ab90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab92:	4989      	ldr	r1, [pc, #548]	@ (800adb8 <_strtod_l+0x588>)
 800ab94:	3b01      	subs	r3, #1
 800ab96:	a819      	add	r0, sp, #100	@ 0x64
 800ab98:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab9a:	f001 f9ad 	bl	800bef8 <__match>
 800ab9e:	b910      	cbnz	r0, 800aba6 <_strtod_l+0x376>
 800aba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aba2:	3301      	adds	r3, #1
 800aba4:	9319      	str	r3, [sp, #100]	@ 0x64
 800aba6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800adc8 <_strtod_l+0x598>
 800abaa:	f04f 0a00 	mov.w	sl, #0
 800abae:	e678      	b.n	800a8a2 <_strtod_l+0x72>
 800abb0:	4882      	ldr	r0, [pc, #520]	@ (800adbc <_strtod_l+0x58c>)
 800abb2:	f000 fef5 	bl	800b9a0 <nan>
 800abb6:	ec5b ab10 	vmov	sl, fp, d0
 800abba:	e672      	b.n	800a8a2 <_strtod_l+0x72>
 800abbc:	eba8 0309 	sub.w	r3, r8, r9
 800abc0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800abc4:	2f00      	cmp	r7, #0
 800abc6:	bf08      	it	eq
 800abc8:	462f      	moveq	r7, r5
 800abca:	2d10      	cmp	r5, #16
 800abcc:	462c      	mov	r4, r5
 800abce:	bfa8      	it	ge
 800abd0:	2410      	movge	r4, #16
 800abd2:	f7f5 fc97 	bl	8000504 <__aeabi_ui2d>
 800abd6:	2d09      	cmp	r5, #9
 800abd8:	4682      	mov	sl, r0
 800abda:	468b      	mov	fp, r1
 800abdc:	dc13      	bgt.n	800ac06 <_strtod_l+0x3d6>
 800abde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f43f ae5e 	beq.w	800a8a2 <_strtod_l+0x72>
 800abe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe8:	dd78      	ble.n	800acdc <_strtod_l+0x4ac>
 800abea:	2b16      	cmp	r3, #22
 800abec:	dc5f      	bgt.n	800acae <_strtod_l+0x47e>
 800abee:	4974      	ldr	r1, [pc, #464]	@ (800adc0 <_strtod_l+0x590>)
 800abf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abf8:	4652      	mov	r2, sl
 800abfa:	465b      	mov	r3, fp
 800abfc:	f7f5 fcfc 	bl	80005f8 <__aeabi_dmul>
 800ac00:	4682      	mov	sl, r0
 800ac02:	468b      	mov	fp, r1
 800ac04:	e64d      	b.n	800a8a2 <_strtod_l+0x72>
 800ac06:	4b6e      	ldr	r3, [pc, #440]	@ (800adc0 <_strtod_l+0x590>)
 800ac08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ac10:	f7f5 fcf2 	bl	80005f8 <__aeabi_dmul>
 800ac14:	4682      	mov	sl, r0
 800ac16:	9808      	ldr	r0, [sp, #32]
 800ac18:	468b      	mov	fp, r1
 800ac1a:	f7f5 fc73 	bl	8000504 <__aeabi_ui2d>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	460b      	mov	r3, r1
 800ac22:	4650      	mov	r0, sl
 800ac24:	4659      	mov	r1, fp
 800ac26:	f7f5 fb31 	bl	800028c <__adddf3>
 800ac2a:	2d0f      	cmp	r5, #15
 800ac2c:	4682      	mov	sl, r0
 800ac2e:	468b      	mov	fp, r1
 800ac30:	ddd5      	ble.n	800abde <_strtod_l+0x3ae>
 800ac32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac34:	1b2c      	subs	r4, r5, r4
 800ac36:	441c      	add	r4, r3
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	f340 8096 	ble.w	800ad6a <_strtod_l+0x53a>
 800ac3e:	f014 030f 	ands.w	r3, r4, #15
 800ac42:	d00a      	beq.n	800ac5a <_strtod_l+0x42a>
 800ac44:	495e      	ldr	r1, [pc, #376]	@ (800adc0 <_strtod_l+0x590>)
 800ac46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac4a:	4652      	mov	r2, sl
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac52:	f7f5 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ac56:	4682      	mov	sl, r0
 800ac58:	468b      	mov	fp, r1
 800ac5a:	f034 040f 	bics.w	r4, r4, #15
 800ac5e:	d073      	beq.n	800ad48 <_strtod_l+0x518>
 800ac60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ac64:	dd48      	ble.n	800acf8 <_strtod_l+0x4c8>
 800ac66:	2400      	movs	r4, #0
 800ac68:	46a0      	mov	r8, r4
 800ac6a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ac6c:	46a1      	mov	r9, r4
 800ac6e:	9a05      	ldr	r2, [sp, #20]
 800ac70:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800adc8 <_strtod_l+0x598>
 800ac74:	2322      	movs	r3, #34	@ 0x22
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	f04f 0a00 	mov.w	sl, #0
 800ac7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f43f ae0f 	beq.w	800a8a2 <_strtod_l+0x72>
 800ac84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac86:	9805      	ldr	r0, [sp, #20]
 800ac88:	f7ff f942 	bl	8009f10 <_Bfree>
 800ac8c:	9805      	ldr	r0, [sp, #20]
 800ac8e:	4649      	mov	r1, r9
 800ac90:	f7ff f93e 	bl	8009f10 <_Bfree>
 800ac94:	9805      	ldr	r0, [sp, #20]
 800ac96:	4641      	mov	r1, r8
 800ac98:	f7ff f93a 	bl	8009f10 <_Bfree>
 800ac9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac9e:	9805      	ldr	r0, [sp, #20]
 800aca0:	f7ff f936 	bl	8009f10 <_Bfree>
 800aca4:	9805      	ldr	r0, [sp, #20]
 800aca6:	4621      	mov	r1, r4
 800aca8:	f7ff f932 	bl	8009f10 <_Bfree>
 800acac:	e5f9      	b.n	800a8a2 <_strtod_l+0x72>
 800acae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acb0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800acb4:	4293      	cmp	r3, r2
 800acb6:	dbbc      	blt.n	800ac32 <_strtod_l+0x402>
 800acb8:	4c41      	ldr	r4, [pc, #260]	@ (800adc0 <_strtod_l+0x590>)
 800acba:	f1c5 050f 	rsb	r5, r5, #15
 800acbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800acc2:	4652      	mov	r2, sl
 800acc4:	465b      	mov	r3, fp
 800acc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acca:	f7f5 fc95 	bl	80005f8 <__aeabi_dmul>
 800acce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd0:	1b5d      	subs	r5, r3, r5
 800acd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800acd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800acda:	e78f      	b.n	800abfc <_strtod_l+0x3cc>
 800acdc:	3316      	adds	r3, #22
 800acde:	dba8      	blt.n	800ac32 <_strtod_l+0x402>
 800ace0:	4b37      	ldr	r3, [pc, #220]	@ (800adc0 <_strtod_l+0x590>)
 800ace2:	eba9 0808 	sub.w	r8, r9, r8
 800ace6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800acea:	e9d8 2300 	ldrd	r2, r3, [r8]
 800acee:	4650      	mov	r0, sl
 800acf0:	4659      	mov	r1, fp
 800acf2:	f7f5 fdab 	bl	800084c <__aeabi_ddiv>
 800acf6:	e783      	b.n	800ac00 <_strtod_l+0x3d0>
 800acf8:	4b32      	ldr	r3, [pc, #200]	@ (800adc4 <_strtod_l+0x594>)
 800acfa:	9308      	str	r3, [sp, #32]
 800acfc:	2300      	movs	r3, #0
 800acfe:	1124      	asrs	r4, r4, #4
 800ad00:	4650      	mov	r0, sl
 800ad02:	4659      	mov	r1, fp
 800ad04:	461e      	mov	r6, r3
 800ad06:	2c01      	cmp	r4, #1
 800ad08:	dc21      	bgt.n	800ad4e <_strtod_l+0x51e>
 800ad0a:	b10b      	cbz	r3, 800ad10 <_strtod_l+0x4e0>
 800ad0c:	4682      	mov	sl, r0
 800ad0e:	468b      	mov	fp, r1
 800ad10:	492c      	ldr	r1, [pc, #176]	@ (800adc4 <_strtod_l+0x594>)
 800ad12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ad16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ad1a:	4652      	mov	r2, sl
 800ad1c:	465b      	mov	r3, fp
 800ad1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad22:	f7f5 fc69 	bl	80005f8 <__aeabi_dmul>
 800ad26:	4b28      	ldr	r3, [pc, #160]	@ (800adc8 <_strtod_l+0x598>)
 800ad28:	460a      	mov	r2, r1
 800ad2a:	400b      	ands	r3, r1
 800ad2c:	4927      	ldr	r1, [pc, #156]	@ (800adcc <_strtod_l+0x59c>)
 800ad2e:	428b      	cmp	r3, r1
 800ad30:	4682      	mov	sl, r0
 800ad32:	d898      	bhi.n	800ac66 <_strtod_l+0x436>
 800ad34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ad38:	428b      	cmp	r3, r1
 800ad3a:	bf86      	itte	hi
 800ad3c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800add0 <_strtod_l+0x5a0>
 800ad40:	f04f 3aff 	movhi.w	sl, #4294967295
 800ad44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9308      	str	r3, [sp, #32]
 800ad4c:	e07a      	b.n	800ae44 <_strtod_l+0x614>
 800ad4e:	07e2      	lsls	r2, r4, #31
 800ad50:	d505      	bpl.n	800ad5e <_strtod_l+0x52e>
 800ad52:	9b08      	ldr	r3, [sp, #32]
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f7f5 fc4e 	bl	80005f8 <__aeabi_dmul>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	9a08      	ldr	r2, [sp, #32]
 800ad60:	3208      	adds	r2, #8
 800ad62:	3601      	adds	r6, #1
 800ad64:	1064      	asrs	r4, r4, #1
 800ad66:	9208      	str	r2, [sp, #32]
 800ad68:	e7cd      	b.n	800ad06 <_strtod_l+0x4d6>
 800ad6a:	d0ed      	beq.n	800ad48 <_strtod_l+0x518>
 800ad6c:	4264      	negs	r4, r4
 800ad6e:	f014 020f 	ands.w	r2, r4, #15
 800ad72:	d00a      	beq.n	800ad8a <_strtod_l+0x55a>
 800ad74:	4b12      	ldr	r3, [pc, #72]	@ (800adc0 <_strtod_l+0x590>)
 800ad76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad7a:	4650      	mov	r0, sl
 800ad7c:	4659      	mov	r1, fp
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	f7f5 fd63 	bl	800084c <__aeabi_ddiv>
 800ad86:	4682      	mov	sl, r0
 800ad88:	468b      	mov	fp, r1
 800ad8a:	1124      	asrs	r4, r4, #4
 800ad8c:	d0dc      	beq.n	800ad48 <_strtod_l+0x518>
 800ad8e:	2c1f      	cmp	r4, #31
 800ad90:	dd20      	ble.n	800add4 <_strtod_l+0x5a4>
 800ad92:	2400      	movs	r4, #0
 800ad94:	46a0      	mov	r8, r4
 800ad96:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad98:	46a1      	mov	r9, r4
 800ad9a:	9a05      	ldr	r2, [sp, #20]
 800ad9c:	2322      	movs	r3, #34	@ 0x22
 800ad9e:	f04f 0a00 	mov.w	sl, #0
 800ada2:	f04f 0b00 	mov.w	fp, #0
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	e768      	b.n	800ac7c <_strtod_l+0x44c>
 800adaa:	bf00      	nop
 800adac:	0800c760 	.word	0x0800c760
 800adb0:	0800c99c 	.word	0x0800c99c
 800adb4:	0800c758 	.word	0x0800c758
 800adb8:	0800c7cb 	.word	0x0800c7cb
 800adbc:	0800c7c7 	.word	0x0800c7c7
 800adc0:	0800c8d0 	.word	0x0800c8d0
 800adc4:	0800c8a8 	.word	0x0800c8a8
 800adc8:	7ff00000 	.word	0x7ff00000
 800adcc:	7ca00000 	.word	0x7ca00000
 800add0:	7fefffff 	.word	0x7fefffff
 800add4:	f014 0310 	ands.w	r3, r4, #16
 800add8:	bf18      	it	ne
 800adda:	236a      	movne	r3, #106	@ 0x6a
 800addc:	4ea9      	ldr	r6, [pc, #676]	@ (800b084 <_strtod_l+0x854>)
 800adde:	9308      	str	r3, [sp, #32]
 800ade0:	4650      	mov	r0, sl
 800ade2:	4659      	mov	r1, fp
 800ade4:	2300      	movs	r3, #0
 800ade6:	07e2      	lsls	r2, r4, #31
 800ade8:	d504      	bpl.n	800adf4 <_strtod_l+0x5c4>
 800adea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800adee:	f7f5 fc03 	bl	80005f8 <__aeabi_dmul>
 800adf2:	2301      	movs	r3, #1
 800adf4:	1064      	asrs	r4, r4, #1
 800adf6:	f106 0608 	add.w	r6, r6, #8
 800adfa:	d1f4      	bne.n	800ade6 <_strtod_l+0x5b6>
 800adfc:	b10b      	cbz	r3, 800ae02 <_strtod_l+0x5d2>
 800adfe:	4682      	mov	sl, r0
 800ae00:	468b      	mov	fp, r1
 800ae02:	9b08      	ldr	r3, [sp, #32]
 800ae04:	b1b3      	cbz	r3, 800ae34 <_strtod_l+0x604>
 800ae06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ae0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	4659      	mov	r1, fp
 800ae12:	dd0f      	ble.n	800ae34 <_strtod_l+0x604>
 800ae14:	2b1f      	cmp	r3, #31
 800ae16:	dd55      	ble.n	800aec4 <_strtod_l+0x694>
 800ae18:	2b34      	cmp	r3, #52	@ 0x34
 800ae1a:	bfde      	ittt	le
 800ae1c:	f04f 33ff 	movle.w	r3, #4294967295
 800ae20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ae24:	4093      	lslle	r3, r2
 800ae26:	f04f 0a00 	mov.w	sl, #0
 800ae2a:	bfcc      	ite	gt
 800ae2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ae30:	ea03 0b01 	andle.w	fp, r3, r1
 800ae34:	2200      	movs	r2, #0
 800ae36:	2300      	movs	r3, #0
 800ae38:	4650      	mov	r0, sl
 800ae3a:	4659      	mov	r1, fp
 800ae3c:	f7f5 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d1a6      	bne.n	800ad92 <_strtod_l+0x562>
 800ae44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae4a:	9805      	ldr	r0, [sp, #20]
 800ae4c:	462b      	mov	r3, r5
 800ae4e:	463a      	mov	r2, r7
 800ae50:	f7ff f8c6 	bl	8009fe0 <__s2b>
 800ae54:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f43f af05 	beq.w	800ac66 <_strtod_l+0x436>
 800ae5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	eba9 0308 	sub.w	r3, r9, r8
 800ae64:	bfa8      	it	ge
 800ae66:	2300      	movge	r3, #0
 800ae68:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae6a:	2400      	movs	r4, #0
 800ae6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae70:	9316      	str	r3, [sp, #88]	@ 0x58
 800ae72:	46a0      	mov	r8, r4
 800ae74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae76:	9805      	ldr	r0, [sp, #20]
 800ae78:	6859      	ldr	r1, [r3, #4]
 800ae7a:	f7ff f809 	bl	8009e90 <_Balloc>
 800ae7e:	4681      	mov	r9, r0
 800ae80:	2800      	cmp	r0, #0
 800ae82:	f43f aef4 	beq.w	800ac6e <_strtod_l+0x43e>
 800ae86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae88:	691a      	ldr	r2, [r3, #16]
 800ae8a:	3202      	adds	r2, #2
 800ae8c:	f103 010c 	add.w	r1, r3, #12
 800ae90:	0092      	lsls	r2, r2, #2
 800ae92:	300c      	adds	r0, #12
 800ae94:	f7fe f87d 	bl	8008f92 <memcpy>
 800ae98:	ec4b ab10 	vmov	d0, sl, fp
 800ae9c:	9805      	ldr	r0, [sp, #20]
 800ae9e:	aa1c      	add	r2, sp, #112	@ 0x70
 800aea0:	a91b      	add	r1, sp, #108	@ 0x6c
 800aea2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aea6:	f7ff fbd7 	bl	800a658 <__d2b>
 800aeaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800aeac:	2800      	cmp	r0, #0
 800aeae:	f43f aede 	beq.w	800ac6e <_strtod_l+0x43e>
 800aeb2:	9805      	ldr	r0, [sp, #20]
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	f7ff f929 	bl	800a10c <__i2b>
 800aeba:	4680      	mov	r8, r0
 800aebc:	b948      	cbnz	r0, 800aed2 <_strtod_l+0x6a2>
 800aebe:	f04f 0800 	mov.w	r8, #0
 800aec2:	e6d4      	b.n	800ac6e <_strtod_l+0x43e>
 800aec4:	f04f 32ff 	mov.w	r2, #4294967295
 800aec8:	fa02 f303 	lsl.w	r3, r2, r3
 800aecc:	ea03 0a0a 	and.w	sl, r3, sl
 800aed0:	e7b0      	b.n	800ae34 <_strtod_l+0x604>
 800aed2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aed4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aed6:	2d00      	cmp	r5, #0
 800aed8:	bfab      	itete	ge
 800aeda:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aedc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aede:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aee0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aee2:	bfac      	ite	ge
 800aee4:	18ef      	addge	r7, r5, r3
 800aee6:	1b5e      	sublt	r6, r3, r5
 800aee8:	9b08      	ldr	r3, [sp, #32]
 800aeea:	1aed      	subs	r5, r5, r3
 800aeec:	4415      	add	r5, r2
 800aeee:	4b66      	ldr	r3, [pc, #408]	@ (800b088 <_strtod_l+0x858>)
 800aef0:	3d01      	subs	r5, #1
 800aef2:	429d      	cmp	r5, r3
 800aef4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aef8:	da50      	bge.n	800af9c <_strtod_l+0x76c>
 800aefa:	1b5b      	subs	r3, r3, r5
 800aefc:	2b1f      	cmp	r3, #31
 800aefe:	eba2 0203 	sub.w	r2, r2, r3
 800af02:	f04f 0101 	mov.w	r1, #1
 800af06:	dc3d      	bgt.n	800af84 <_strtod_l+0x754>
 800af08:	fa01 f303 	lsl.w	r3, r1, r3
 800af0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af0e:	2300      	movs	r3, #0
 800af10:	9310      	str	r3, [sp, #64]	@ 0x40
 800af12:	18bd      	adds	r5, r7, r2
 800af14:	9b08      	ldr	r3, [sp, #32]
 800af16:	42af      	cmp	r7, r5
 800af18:	4416      	add	r6, r2
 800af1a:	441e      	add	r6, r3
 800af1c:	463b      	mov	r3, r7
 800af1e:	bfa8      	it	ge
 800af20:	462b      	movge	r3, r5
 800af22:	42b3      	cmp	r3, r6
 800af24:	bfa8      	it	ge
 800af26:	4633      	movge	r3, r6
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bfc2      	ittt	gt
 800af2c:	1aed      	subgt	r5, r5, r3
 800af2e:	1af6      	subgt	r6, r6, r3
 800af30:	1aff      	subgt	r7, r7, r3
 800af32:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd16      	ble.n	800af66 <_strtod_l+0x736>
 800af38:	4641      	mov	r1, r8
 800af3a:	9805      	ldr	r0, [sp, #20]
 800af3c:	461a      	mov	r2, r3
 800af3e:	f7ff f9a5 	bl	800a28c <__pow5mult>
 800af42:	4680      	mov	r8, r0
 800af44:	2800      	cmp	r0, #0
 800af46:	d0ba      	beq.n	800aebe <_strtod_l+0x68e>
 800af48:	4601      	mov	r1, r0
 800af4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af4c:	9805      	ldr	r0, [sp, #20]
 800af4e:	f7ff f8f3 	bl	800a138 <__multiply>
 800af52:	900e      	str	r0, [sp, #56]	@ 0x38
 800af54:	2800      	cmp	r0, #0
 800af56:	f43f ae8a 	beq.w	800ac6e <_strtod_l+0x43e>
 800af5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af5c:	9805      	ldr	r0, [sp, #20]
 800af5e:	f7fe ffd7 	bl	8009f10 <_Bfree>
 800af62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af64:	931a      	str	r3, [sp, #104]	@ 0x68
 800af66:	2d00      	cmp	r5, #0
 800af68:	dc1d      	bgt.n	800afa6 <_strtod_l+0x776>
 800af6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	dd23      	ble.n	800afb8 <_strtod_l+0x788>
 800af70:	4649      	mov	r1, r9
 800af72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800af74:	9805      	ldr	r0, [sp, #20]
 800af76:	f7ff f989 	bl	800a28c <__pow5mult>
 800af7a:	4681      	mov	r9, r0
 800af7c:	b9e0      	cbnz	r0, 800afb8 <_strtod_l+0x788>
 800af7e:	f04f 0900 	mov.w	r9, #0
 800af82:	e674      	b.n	800ac6e <_strtod_l+0x43e>
 800af84:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800af88:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800af8c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800af90:	35e2      	adds	r5, #226	@ 0xe2
 800af92:	fa01 f305 	lsl.w	r3, r1, r5
 800af96:	9310      	str	r3, [sp, #64]	@ 0x40
 800af98:	9113      	str	r1, [sp, #76]	@ 0x4c
 800af9a:	e7ba      	b.n	800af12 <_strtod_l+0x6e2>
 800af9c:	2300      	movs	r3, #0
 800af9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800afa0:	2301      	movs	r3, #1
 800afa2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800afa4:	e7b5      	b.n	800af12 <_strtod_l+0x6e2>
 800afa6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afa8:	9805      	ldr	r0, [sp, #20]
 800afaa:	462a      	mov	r2, r5
 800afac:	f7ff f9c8 	bl	800a340 <__lshift>
 800afb0:	901a      	str	r0, [sp, #104]	@ 0x68
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d1d9      	bne.n	800af6a <_strtod_l+0x73a>
 800afb6:	e65a      	b.n	800ac6e <_strtod_l+0x43e>
 800afb8:	2e00      	cmp	r6, #0
 800afba:	dd07      	ble.n	800afcc <_strtod_l+0x79c>
 800afbc:	4649      	mov	r1, r9
 800afbe:	9805      	ldr	r0, [sp, #20]
 800afc0:	4632      	mov	r2, r6
 800afc2:	f7ff f9bd 	bl	800a340 <__lshift>
 800afc6:	4681      	mov	r9, r0
 800afc8:	2800      	cmp	r0, #0
 800afca:	d0d8      	beq.n	800af7e <_strtod_l+0x74e>
 800afcc:	2f00      	cmp	r7, #0
 800afce:	dd08      	ble.n	800afe2 <_strtod_l+0x7b2>
 800afd0:	4641      	mov	r1, r8
 800afd2:	9805      	ldr	r0, [sp, #20]
 800afd4:	463a      	mov	r2, r7
 800afd6:	f7ff f9b3 	bl	800a340 <__lshift>
 800afda:	4680      	mov	r8, r0
 800afdc:	2800      	cmp	r0, #0
 800afde:	f43f ae46 	beq.w	800ac6e <_strtod_l+0x43e>
 800afe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afe4:	9805      	ldr	r0, [sp, #20]
 800afe6:	464a      	mov	r2, r9
 800afe8:	f7ff fa32 	bl	800a450 <__mdiff>
 800afec:	4604      	mov	r4, r0
 800afee:	2800      	cmp	r0, #0
 800aff0:	f43f ae3d 	beq.w	800ac6e <_strtod_l+0x43e>
 800aff4:	68c3      	ldr	r3, [r0, #12]
 800aff6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aff8:	2300      	movs	r3, #0
 800affa:	60c3      	str	r3, [r0, #12]
 800affc:	4641      	mov	r1, r8
 800affe:	f7ff fa0b 	bl	800a418 <__mcmp>
 800b002:	2800      	cmp	r0, #0
 800b004:	da46      	bge.n	800b094 <_strtod_l+0x864>
 800b006:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b008:	ea53 030a 	orrs.w	r3, r3, sl
 800b00c:	d16c      	bne.n	800b0e8 <_strtod_l+0x8b8>
 800b00e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b012:	2b00      	cmp	r3, #0
 800b014:	d168      	bne.n	800b0e8 <_strtod_l+0x8b8>
 800b016:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b01a:	0d1b      	lsrs	r3, r3, #20
 800b01c:	051b      	lsls	r3, r3, #20
 800b01e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b022:	d961      	bls.n	800b0e8 <_strtod_l+0x8b8>
 800b024:	6963      	ldr	r3, [r4, #20]
 800b026:	b913      	cbnz	r3, 800b02e <_strtod_l+0x7fe>
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	dd5c      	ble.n	800b0e8 <_strtod_l+0x8b8>
 800b02e:	4621      	mov	r1, r4
 800b030:	2201      	movs	r2, #1
 800b032:	9805      	ldr	r0, [sp, #20]
 800b034:	f7ff f984 	bl	800a340 <__lshift>
 800b038:	4641      	mov	r1, r8
 800b03a:	4604      	mov	r4, r0
 800b03c:	f7ff f9ec 	bl	800a418 <__mcmp>
 800b040:	2800      	cmp	r0, #0
 800b042:	dd51      	ble.n	800b0e8 <_strtod_l+0x8b8>
 800b044:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b048:	9a08      	ldr	r2, [sp, #32]
 800b04a:	0d1b      	lsrs	r3, r3, #20
 800b04c:	051b      	lsls	r3, r3, #20
 800b04e:	2a00      	cmp	r2, #0
 800b050:	d06b      	beq.n	800b12a <_strtod_l+0x8fa>
 800b052:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b056:	d868      	bhi.n	800b12a <_strtod_l+0x8fa>
 800b058:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b05c:	f67f ae9d 	bls.w	800ad9a <_strtod_l+0x56a>
 800b060:	4b0a      	ldr	r3, [pc, #40]	@ (800b08c <_strtod_l+0x85c>)
 800b062:	4650      	mov	r0, sl
 800b064:	4659      	mov	r1, fp
 800b066:	2200      	movs	r2, #0
 800b068:	f7f5 fac6 	bl	80005f8 <__aeabi_dmul>
 800b06c:	4b08      	ldr	r3, [pc, #32]	@ (800b090 <_strtod_l+0x860>)
 800b06e:	400b      	ands	r3, r1
 800b070:	4682      	mov	sl, r0
 800b072:	468b      	mov	fp, r1
 800b074:	2b00      	cmp	r3, #0
 800b076:	f47f ae05 	bne.w	800ac84 <_strtod_l+0x454>
 800b07a:	9a05      	ldr	r2, [sp, #20]
 800b07c:	2322      	movs	r3, #34	@ 0x22
 800b07e:	6013      	str	r3, [r2, #0]
 800b080:	e600      	b.n	800ac84 <_strtod_l+0x454>
 800b082:	bf00      	nop
 800b084:	0800c9c8 	.word	0x0800c9c8
 800b088:	fffffc02 	.word	0xfffffc02
 800b08c:	39500000 	.word	0x39500000
 800b090:	7ff00000 	.word	0x7ff00000
 800b094:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b098:	d165      	bne.n	800b166 <_strtod_l+0x936>
 800b09a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b09c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0a0:	b35a      	cbz	r2, 800b0fa <_strtod_l+0x8ca>
 800b0a2:	4a9f      	ldr	r2, [pc, #636]	@ (800b320 <_strtod_l+0xaf0>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d12b      	bne.n	800b100 <_strtod_l+0x8d0>
 800b0a8:	9b08      	ldr	r3, [sp, #32]
 800b0aa:	4651      	mov	r1, sl
 800b0ac:	b303      	cbz	r3, 800b0f0 <_strtod_l+0x8c0>
 800b0ae:	4b9d      	ldr	r3, [pc, #628]	@ (800b324 <_strtod_l+0xaf4>)
 800b0b0:	465a      	mov	r2, fp
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0bc:	d81b      	bhi.n	800b0f6 <_strtod_l+0x8c6>
 800b0be:	0d1b      	lsrs	r3, r3, #20
 800b0c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d119      	bne.n	800b100 <_strtod_l+0x8d0>
 800b0cc:	4b96      	ldr	r3, [pc, #600]	@ (800b328 <_strtod_l+0xaf8>)
 800b0ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d102      	bne.n	800b0da <_strtod_l+0x8aa>
 800b0d4:	3101      	adds	r1, #1
 800b0d6:	f43f adca 	beq.w	800ac6e <_strtod_l+0x43e>
 800b0da:	4b92      	ldr	r3, [pc, #584]	@ (800b324 <_strtod_l+0xaf4>)
 800b0dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0de:	401a      	ands	r2, r3
 800b0e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b0e4:	f04f 0a00 	mov.w	sl, #0
 800b0e8:	9b08      	ldr	r3, [sp, #32]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1b8      	bne.n	800b060 <_strtod_l+0x830>
 800b0ee:	e5c9      	b.n	800ac84 <_strtod_l+0x454>
 800b0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f4:	e7e8      	b.n	800b0c8 <_strtod_l+0x898>
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	e7e6      	b.n	800b0c8 <_strtod_l+0x898>
 800b0fa:	ea53 030a 	orrs.w	r3, r3, sl
 800b0fe:	d0a1      	beq.n	800b044 <_strtod_l+0x814>
 800b100:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b102:	b1db      	cbz	r3, 800b13c <_strtod_l+0x90c>
 800b104:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b106:	4213      	tst	r3, r2
 800b108:	d0ee      	beq.n	800b0e8 <_strtod_l+0x8b8>
 800b10a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b10c:	9a08      	ldr	r2, [sp, #32]
 800b10e:	4650      	mov	r0, sl
 800b110:	4659      	mov	r1, fp
 800b112:	b1bb      	cbz	r3, 800b144 <_strtod_l+0x914>
 800b114:	f7ff fb6e 	bl	800a7f4 <sulp>
 800b118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b11c:	ec53 2b10 	vmov	r2, r3, d0
 800b120:	f7f5 f8b4 	bl	800028c <__adddf3>
 800b124:	4682      	mov	sl, r0
 800b126:	468b      	mov	fp, r1
 800b128:	e7de      	b.n	800b0e8 <_strtod_l+0x8b8>
 800b12a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b12e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b132:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b136:	f04f 3aff 	mov.w	sl, #4294967295
 800b13a:	e7d5      	b.n	800b0e8 <_strtod_l+0x8b8>
 800b13c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b13e:	ea13 0f0a 	tst.w	r3, sl
 800b142:	e7e1      	b.n	800b108 <_strtod_l+0x8d8>
 800b144:	f7ff fb56 	bl	800a7f4 <sulp>
 800b148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b14c:	ec53 2b10 	vmov	r2, r3, d0
 800b150:	f7f5 f89a 	bl	8000288 <__aeabi_dsub>
 800b154:	2200      	movs	r2, #0
 800b156:	2300      	movs	r3, #0
 800b158:	4682      	mov	sl, r0
 800b15a:	468b      	mov	fp, r1
 800b15c:	f7f5 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b160:	2800      	cmp	r0, #0
 800b162:	d0c1      	beq.n	800b0e8 <_strtod_l+0x8b8>
 800b164:	e619      	b.n	800ad9a <_strtod_l+0x56a>
 800b166:	4641      	mov	r1, r8
 800b168:	4620      	mov	r0, r4
 800b16a:	f7ff facd 	bl	800a708 <__ratio>
 800b16e:	ec57 6b10 	vmov	r6, r7, d0
 800b172:	2200      	movs	r2, #0
 800b174:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b178:	4630      	mov	r0, r6
 800b17a:	4639      	mov	r1, r7
 800b17c:	f7f5 fcb8 	bl	8000af0 <__aeabi_dcmple>
 800b180:	2800      	cmp	r0, #0
 800b182:	d06f      	beq.n	800b264 <_strtod_l+0xa34>
 800b184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d17a      	bne.n	800b280 <_strtod_l+0xa50>
 800b18a:	f1ba 0f00 	cmp.w	sl, #0
 800b18e:	d158      	bne.n	800b242 <_strtod_l+0xa12>
 800b190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b196:	2b00      	cmp	r3, #0
 800b198:	d15a      	bne.n	800b250 <_strtod_l+0xa20>
 800b19a:	4b64      	ldr	r3, [pc, #400]	@ (800b32c <_strtod_l+0xafc>)
 800b19c:	2200      	movs	r2, #0
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	f7f5 fc9b 	bl	8000adc <__aeabi_dcmplt>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d159      	bne.n	800b25e <_strtod_l+0xa2e>
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	4b60      	ldr	r3, [pc, #384]	@ (800b330 <_strtod_l+0xb00>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f7f5 fa21 	bl	80005f8 <__aeabi_dmul>
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b1be:	9606      	str	r6, [sp, #24]
 800b1c0:	9307      	str	r3, [sp, #28]
 800b1c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1c6:	4d57      	ldr	r5, [pc, #348]	@ (800b324 <_strtod_l+0xaf4>)
 800b1c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ce:	401d      	ands	r5, r3
 800b1d0:	4b58      	ldr	r3, [pc, #352]	@ (800b334 <_strtod_l+0xb04>)
 800b1d2:	429d      	cmp	r5, r3
 800b1d4:	f040 80b2 	bne.w	800b33c <_strtod_l+0xb0c>
 800b1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b1de:	ec4b ab10 	vmov	d0, sl, fp
 800b1e2:	f7ff f9c9 	bl	800a578 <__ulp>
 800b1e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1ea:	ec51 0b10 	vmov	r0, r1, d0
 800b1ee:	f7f5 fa03 	bl	80005f8 <__aeabi_dmul>
 800b1f2:	4652      	mov	r2, sl
 800b1f4:	465b      	mov	r3, fp
 800b1f6:	f7f5 f849 	bl	800028c <__adddf3>
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4949      	ldr	r1, [pc, #292]	@ (800b324 <_strtod_l+0xaf4>)
 800b1fe:	4a4e      	ldr	r2, [pc, #312]	@ (800b338 <_strtod_l+0xb08>)
 800b200:	4019      	ands	r1, r3
 800b202:	4291      	cmp	r1, r2
 800b204:	4682      	mov	sl, r0
 800b206:	d942      	bls.n	800b28e <_strtod_l+0xa5e>
 800b208:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b20a:	4b47      	ldr	r3, [pc, #284]	@ (800b328 <_strtod_l+0xaf8>)
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d103      	bne.n	800b218 <_strtod_l+0x9e8>
 800b210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b212:	3301      	adds	r3, #1
 800b214:	f43f ad2b 	beq.w	800ac6e <_strtod_l+0x43e>
 800b218:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b328 <_strtod_l+0xaf8>
 800b21c:	f04f 3aff 	mov.w	sl, #4294967295
 800b220:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b222:	9805      	ldr	r0, [sp, #20]
 800b224:	f7fe fe74 	bl	8009f10 <_Bfree>
 800b228:	9805      	ldr	r0, [sp, #20]
 800b22a:	4649      	mov	r1, r9
 800b22c:	f7fe fe70 	bl	8009f10 <_Bfree>
 800b230:	9805      	ldr	r0, [sp, #20]
 800b232:	4641      	mov	r1, r8
 800b234:	f7fe fe6c 	bl	8009f10 <_Bfree>
 800b238:	9805      	ldr	r0, [sp, #20]
 800b23a:	4621      	mov	r1, r4
 800b23c:	f7fe fe68 	bl	8009f10 <_Bfree>
 800b240:	e618      	b.n	800ae74 <_strtod_l+0x644>
 800b242:	f1ba 0f01 	cmp.w	sl, #1
 800b246:	d103      	bne.n	800b250 <_strtod_l+0xa20>
 800b248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f43f ada5 	beq.w	800ad9a <_strtod_l+0x56a>
 800b250:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b300 <_strtod_l+0xad0>
 800b254:	4f35      	ldr	r7, [pc, #212]	@ (800b32c <_strtod_l+0xafc>)
 800b256:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b25a:	2600      	movs	r6, #0
 800b25c:	e7b1      	b.n	800b1c2 <_strtod_l+0x992>
 800b25e:	4f34      	ldr	r7, [pc, #208]	@ (800b330 <_strtod_l+0xb00>)
 800b260:	2600      	movs	r6, #0
 800b262:	e7aa      	b.n	800b1ba <_strtod_l+0x98a>
 800b264:	4b32      	ldr	r3, [pc, #200]	@ (800b330 <_strtod_l+0xb00>)
 800b266:	4630      	mov	r0, r6
 800b268:	4639      	mov	r1, r7
 800b26a:	2200      	movs	r2, #0
 800b26c:	f7f5 f9c4 	bl	80005f8 <__aeabi_dmul>
 800b270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	2b00      	cmp	r3, #0
 800b278:	d09f      	beq.n	800b1ba <_strtod_l+0x98a>
 800b27a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b27e:	e7a0      	b.n	800b1c2 <_strtod_l+0x992>
 800b280:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b308 <_strtod_l+0xad8>
 800b284:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b288:	ec57 6b17 	vmov	r6, r7, d7
 800b28c:	e799      	b.n	800b1c2 <_strtod_l+0x992>
 800b28e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b292:	9b08      	ldr	r3, [sp, #32]
 800b294:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1c1      	bne.n	800b220 <_strtod_l+0x9f0>
 800b29c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2a0:	0d1b      	lsrs	r3, r3, #20
 800b2a2:	051b      	lsls	r3, r3, #20
 800b2a4:	429d      	cmp	r5, r3
 800b2a6:	d1bb      	bne.n	800b220 <_strtod_l+0x9f0>
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 fcec 	bl	8000c88 <__aeabi_d2lz>
 800b2b0:	f7f5 f974 	bl	800059c <__aeabi_l2d>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f7f4 ffe4 	bl	8000288 <__aeabi_dsub>
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b2c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ce:	ea46 060a 	orr.w	r6, r6, sl
 800b2d2:	431e      	orrs	r6, r3
 800b2d4:	d06f      	beq.n	800b3b6 <_strtod_l+0xb86>
 800b2d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b310 <_strtod_l+0xae0>)
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f7f5 fbfe 	bl	8000adc <__aeabi_dcmplt>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	f47f accf 	bne.w	800ac84 <_strtod_l+0x454>
 800b2e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b318 <_strtod_l+0xae8>)
 800b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2f0:	f7f5 fc12 	bl	8000b18 <__aeabi_dcmpgt>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d093      	beq.n	800b220 <_strtod_l+0x9f0>
 800b2f8:	e4c4      	b.n	800ac84 <_strtod_l+0x454>
 800b2fa:	bf00      	nop
 800b2fc:	f3af 8000 	nop.w
 800b300:	00000000 	.word	0x00000000
 800b304:	bff00000 	.word	0xbff00000
 800b308:	00000000 	.word	0x00000000
 800b30c:	3ff00000 	.word	0x3ff00000
 800b310:	94a03595 	.word	0x94a03595
 800b314:	3fdfffff 	.word	0x3fdfffff
 800b318:	35afe535 	.word	0x35afe535
 800b31c:	3fe00000 	.word	0x3fe00000
 800b320:	000fffff 	.word	0x000fffff
 800b324:	7ff00000 	.word	0x7ff00000
 800b328:	7fefffff 	.word	0x7fefffff
 800b32c:	3ff00000 	.word	0x3ff00000
 800b330:	3fe00000 	.word	0x3fe00000
 800b334:	7fe00000 	.word	0x7fe00000
 800b338:	7c9fffff 	.word	0x7c9fffff
 800b33c:	9b08      	ldr	r3, [sp, #32]
 800b33e:	b323      	cbz	r3, 800b38a <_strtod_l+0xb5a>
 800b340:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b344:	d821      	bhi.n	800b38a <_strtod_l+0xb5a>
 800b346:	a328      	add	r3, pc, #160	@ (adr r3, 800b3e8 <_strtod_l+0xbb8>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	4630      	mov	r0, r6
 800b34e:	4639      	mov	r1, r7
 800b350:	f7f5 fbce 	bl	8000af0 <__aeabi_dcmple>
 800b354:	b1a0      	cbz	r0, 800b380 <_strtod_l+0xb50>
 800b356:	4639      	mov	r1, r7
 800b358:	4630      	mov	r0, r6
 800b35a:	f7f5 fc25 	bl	8000ba8 <__aeabi_d2uiz>
 800b35e:	2801      	cmp	r0, #1
 800b360:	bf38      	it	cc
 800b362:	2001      	movcc	r0, #1
 800b364:	f7f5 f8ce 	bl	8000504 <__aeabi_ui2d>
 800b368:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	b9fb      	cbnz	r3, 800b3b0 <_strtod_l+0xb80>
 800b370:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b374:	9014      	str	r0, [sp, #80]	@ 0x50
 800b376:	9315      	str	r3, [sp, #84]	@ 0x54
 800b378:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b37c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b380:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b382:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b386:	1b5b      	subs	r3, r3, r5
 800b388:	9311      	str	r3, [sp, #68]	@ 0x44
 800b38a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b38e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b392:	f7ff f8f1 	bl	800a578 <__ulp>
 800b396:	4650      	mov	r0, sl
 800b398:	ec53 2b10 	vmov	r2, r3, d0
 800b39c:	4659      	mov	r1, fp
 800b39e:	f7f5 f92b 	bl	80005f8 <__aeabi_dmul>
 800b3a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b3a6:	f7f4 ff71 	bl	800028c <__adddf3>
 800b3aa:	4682      	mov	sl, r0
 800b3ac:	468b      	mov	fp, r1
 800b3ae:	e770      	b.n	800b292 <_strtod_l+0xa62>
 800b3b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b3b4:	e7e0      	b.n	800b378 <_strtod_l+0xb48>
 800b3b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800b3f0 <_strtod_l+0xbc0>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f7f5 fb8e 	bl	8000adc <__aeabi_dcmplt>
 800b3c0:	e798      	b.n	800b2f4 <_strtod_l+0xac4>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b3c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	f7ff ba6d 	b.w	800a8aa <_strtod_l+0x7a>
 800b3d0:	2a65      	cmp	r2, #101	@ 0x65
 800b3d2:	f43f ab66 	beq.w	800aaa2 <_strtod_l+0x272>
 800b3d6:	2a45      	cmp	r2, #69	@ 0x45
 800b3d8:	f43f ab63 	beq.w	800aaa2 <_strtod_l+0x272>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f7ff bb9e 	b.w	800ab1e <_strtod_l+0x2ee>
 800b3e2:	bf00      	nop
 800b3e4:	f3af 8000 	nop.w
 800b3e8:	ffc00000 	.word	0xffc00000
 800b3ec:	41dfffff 	.word	0x41dfffff
 800b3f0:	94a03595 	.word	0x94a03595
 800b3f4:	3fcfffff 	.word	0x3fcfffff

0800b3f8 <_strtod_r>:
 800b3f8:	4b01      	ldr	r3, [pc, #4]	@ (800b400 <_strtod_r+0x8>)
 800b3fa:	f7ff ba19 	b.w	800a830 <_strtod_l>
 800b3fe:	bf00      	nop
 800b400:	2000007c 	.word	0x2000007c

0800b404 <_strtol_l.constprop.0>:
 800b404:	2b24      	cmp	r3, #36	@ 0x24
 800b406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40a:	4686      	mov	lr, r0
 800b40c:	4690      	mov	r8, r2
 800b40e:	d801      	bhi.n	800b414 <_strtol_l.constprop.0+0x10>
 800b410:	2b01      	cmp	r3, #1
 800b412:	d106      	bne.n	800b422 <_strtol_l.constprop.0+0x1e>
 800b414:	f7fd fd90 	bl	8008f38 <__errno>
 800b418:	2316      	movs	r3, #22
 800b41a:	6003      	str	r3, [r0, #0]
 800b41c:	2000      	movs	r0, #0
 800b41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b422:	4834      	ldr	r0, [pc, #208]	@ (800b4f4 <_strtol_l.constprop.0+0xf0>)
 800b424:	460d      	mov	r5, r1
 800b426:	462a      	mov	r2, r5
 800b428:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b42c:	5d06      	ldrb	r6, [r0, r4]
 800b42e:	f016 0608 	ands.w	r6, r6, #8
 800b432:	d1f8      	bne.n	800b426 <_strtol_l.constprop.0+0x22>
 800b434:	2c2d      	cmp	r4, #45	@ 0x2d
 800b436:	d12d      	bne.n	800b494 <_strtol_l.constprop.0+0x90>
 800b438:	782c      	ldrb	r4, [r5, #0]
 800b43a:	2601      	movs	r6, #1
 800b43c:	1c95      	adds	r5, r2, #2
 800b43e:	f033 0210 	bics.w	r2, r3, #16
 800b442:	d109      	bne.n	800b458 <_strtol_l.constprop.0+0x54>
 800b444:	2c30      	cmp	r4, #48	@ 0x30
 800b446:	d12a      	bne.n	800b49e <_strtol_l.constprop.0+0x9a>
 800b448:	782a      	ldrb	r2, [r5, #0]
 800b44a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b44e:	2a58      	cmp	r2, #88	@ 0x58
 800b450:	d125      	bne.n	800b49e <_strtol_l.constprop.0+0x9a>
 800b452:	786c      	ldrb	r4, [r5, #1]
 800b454:	2310      	movs	r3, #16
 800b456:	3502      	adds	r5, #2
 800b458:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b45c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b460:	2200      	movs	r2, #0
 800b462:	fbbc f9f3 	udiv	r9, ip, r3
 800b466:	4610      	mov	r0, r2
 800b468:	fb03 ca19 	mls	sl, r3, r9, ip
 800b46c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b470:	2f09      	cmp	r7, #9
 800b472:	d81b      	bhi.n	800b4ac <_strtol_l.constprop.0+0xa8>
 800b474:	463c      	mov	r4, r7
 800b476:	42a3      	cmp	r3, r4
 800b478:	dd27      	ble.n	800b4ca <_strtol_l.constprop.0+0xc6>
 800b47a:	1c57      	adds	r7, r2, #1
 800b47c:	d007      	beq.n	800b48e <_strtol_l.constprop.0+0x8a>
 800b47e:	4581      	cmp	r9, r0
 800b480:	d320      	bcc.n	800b4c4 <_strtol_l.constprop.0+0xc0>
 800b482:	d101      	bne.n	800b488 <_strtol_l.constprop.0+0x84>
 800b484:	45a2      	cmp	sl, r4
 800b486:	db1d      	blt.n	800b4c4 <_strtol_l.constprop.0+0xc0>
 800b488:	fb00 4003 	mla	r0, r0, r3, r4
 800b48c:	2201      	movs	r2, #1
 800b48e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b492:	e7eb      	b.n	800b46c <_strtol_l.constprop.0+0x68>
 800b494:	2c2b      	cmp	r4, #43	@ 0x2b
 800b496:	bf04      	itt	eq
 800b498:	782c      	ldrbeq	r4, [r5, #0]
 800b49a:	1c95      	addeq	r5, r2, #2
 800b49c:	e7cf      	b.n	800b43e <_strtol_l.constprop.0+0x3a>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1da      	bne.n	800b458 <_strtol_l.constprop.0+0x54>
 800b4a2:	2c30      	cmp	r4, #48	@ 0x30
 800b4a4:	bf0c      	ite	eq
 800b4a6:	2308      	moveq	r3, #8
 800b4a8:	230a      	movne	r3, #10
 800b4aa:	e7d5      	b.n	800b458 <_strtol_l.constprop.0+0x54>
 800b4ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b4b0:	2f19      	cmp	r7, #25
 800b4b2:	d801      	bhi.n	800b4b8 <_strtol_l.constprop.0+0xb4>
 800b4b4:	3c37      	subs	r4, #55	@ 0x37
 800b4b6:	e7de      	b.n	800b476 <_strtol_l.constprop.0+0x72>
 800b4b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b4bc:	2f19      	cmp	r7, #25
 800b4be:	d804      	bhi.n	800b4ca <_strtol_l.constprop.0+0xc6>
 800b4c0:	3c57      	subs	r4, #87	@ 0x57
 800b4c2:	e7d8      	b.n	800b476 <_strtol_l.constprop.0+0x72>
 800b4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c8:	e7e1      	b.n	800b48e <_strtol_l.constprop.0+0x8a>
 800b4ca:	1c53      	adds	r3, r2, #1
 800b4cc:	d108      	bne.n	800b4e0 <_strtol_l.constprop.0+0xdc>
 800b4ce:	2322      	movs	r3, #34	@ 0x22
 800b4d0:	f8ce 3000 	str.w	r3, [lr]
 800b4d4:	4660      	mov	r0, ip
 800b4d6:	f1b8 0f00 	cmp.w	r8, #0
 800b4da:	d0a0      	beq.n	800b41e <_strtol_l.constprop.0+0x1a>
 800b4dc:	1e69      	subs	r1, r5, #1
 800b4de:	e006      	b.n	800b4ee <_strtol_l.constprop.0+0xea>
 800b4e0:	b106      	cbz	r6, 800b4e4 <_strtol_l.constprop.0+0xe0>
 800b4e2:	4240      	negs	r0, r0
 800b4e4:	f1b8 0f00 	cmp.w	r8, #0
 800b4e8:	d099      	beq.n	800b41e <_strtol_l.constprop.0+0x1a>
 800b4ea:	2a00      	cmp	r2, #0
 800b4ec:	d1f6      	bne.n	800b4dc <_strtol_l.constprop.0+0xd8>
 800b4ee:	f8c8 1000 	str.w	r1, [r8]
 800b4f2:	e794      	b.n	800b41e <_strtol_l.constprop.0+0x1a>
 800b4f4:	0800c9f1 	.word	0x0800c9f1

0800b4f8 <_strtol_r>:
 800b4f8:	f7ff bf84 	b.w	800b404 <_strtol_l.constprop.0>

0800b4fc <__ssputs_r>:
 800b4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b500:	688e      	ldr	r6, [r1, #8]
 800b502:	461f      	mov	r7, r3
 800b504:	42be      	cmp	r6, r7
 800b506:	680b      	ldr	r3, [r1, #0]
 800b508:	4682      	mov	sl, r0
 800b50a:	460c      	mov	r4, r1
 800b50c:	4690      	mov	r8, r2
 800b50e:	d82d      	bhi.n	800b56c <__ssputs_r+0x70>
 800b510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b514:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b518:	d026      	beq.n	800b568 <__ssputs_r+0x6c>
 800b51a:	6965      	ldr	r5, [r4, #20]
 800b51c:	6909      	ldr	r1, [r1, #16]
 800b51e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b522:	eba3 0901 	sub.w	r9, r3, r1
 800b526:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b52a:	1c7b      	adds	r3, r7, #1
 800b52c:	444b      	add	r3, r9
 800b52e:	106d      	asrs	r5, r5, #1
 800b530:	429d      	cmp	r5, r3
 800b532:	bf38      	it	cc
 800b534:	461d      	movcc	r5, r3
 800b536:	0553      	lsls	r3, r2, #21
 800b538:	d527      	bpl.n	800b58a <__ssputs_r+0x8e>
 800b53a:	4629      	mov	r1, r5
 800b53c:	f7fe fc1c 	bl	8009d78 <_malloc_r>
 800b540:	4606      	mov	r6, r0
 800b542:	b360      	cbz	r0, 800b59e <__ssputs_r+0xa2>
 800b544:	6921      	ldr	r1, [r4, #16]
 800b546:	464a      	mov	r2, r9
 800b548:	f7fd fd23 	bl	8008f92 <memcpy>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	6126      	str	r6, [r4, #16]
 800b55a:	6165      	str	r5, [r4, #20]
 800b55c:	444e      	add	r6, r9
 800b55e:	eba5 0509 	sub.w	r5, r5, r9
 800b562:	6026      	str	r6, [r4, #0]
 800b564:	60a5      	str	r5, [r4, #8]
 800b566:	463e      	mov	r6, r7
 800b568:	42be      	cmp	r6, r7
 800b56a:	d900      	bls.n	800b56e <__ssputs_r+0x72>
 800b56c:	463e      	mov	r6, r7
 800b56e:	6820      	ldr	r0, [r4, #0]
 800b570:	4632      	mov	r2, r6
 800b572:	4641      	mov	r1, r8
 800b574:	f000 f9d8 	bl	800b928 <memmove>
 800b578:	68a3      	ldr	r3, [r4, #8]
 800b57a:	1b9b      	subs	r3, r3, r6
 800b57c:	60a3      	str	r3, [r4, #8]
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	4433      	add	r3, r6
 800b582:	6023      	str	r3, [r4, #0]
 800b584:	2000      	movs	r0, #0
 800b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b58a:	462a      	mov	r2, r5
 800b58c:	f000 fd75 	bl	800c07a <_realloc_r>
 800b590:	4606      	mov	r6, r0
 800b592:	2800      	cmp	r0, #0
 800b594:	d1e0      	bne.n	800b558 <__ssputs_r+0x5c>
 800b596:	6921      	ldr	r1, [r4, #16]
 800b598:	4650      	mov	r0, sl
 800b59a:	f7fe fb79 	bl	8009c90 <_free_r>
 800b59e:	230c      	movs	r3, #12
 800b5a0:	f8ca 3000 	str.w	r3, [sl]
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5aa:	81a3      	strh	r3, [r4, #12]
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b0:	e7e9      	b.n	800b586 <__ssputs_r+0x8a>
	...

0800b5b4 <_svfiprintf_r>:
 800b5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	4698      	mov	r8, r3
 800b5ba:	898b      	ldrh	r3, [r1, #12]
 800b5bc:	061b      	lsls	r3, r3, #24
 800b5be:	b09d      	sub	sp, #116	@ 0x74
 800b5c0:	4607      	mov	r7, r0
 800b5c2:	460d      	mov	r5, r1
 800b5c4:	4614      	mov	r4, r2
 800b5c6:	d510      	bpl.n	800b5ea <_svfiprintf_r+0x36>
 800b5c8:	690b      	ldr	r3, [r1, #16]
 800b5ca:	b973      	cbnz	r3, 800b5ea <_svfiprintf_r+0x36>
 800b5cc:	2140      	movs	r1, #64	@ 0x40
 800b5ce:	f7fe fbd3 	bl	8009d78 <_malloc_r>
 800b5d2:	6028      	str	r0, [r5, #0]
 800b5d4:	6128      	str	r0, [r5, #16]
 800b5d6:	b930      	cbnz	r0, 800b5e6 <_svfiprintf_r+0x32>
 800b5d8:	230c      	movs	r3, #12
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e0:	b01d      	add	sp, #116	@ 0x74
 800b5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e6:	2340      	movs	r3, #64	@ 0x40
 800b5e8:	616b      	str	r3, [r5, #20]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ee:	2320      	movs	r3, #32
 800b5f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5f8:	2330      	movs	r3, #48	@ 0x30
 800b5fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b798 <_svfiprintf_r+0x1e4>
 800b5fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b602:	f04f 0901 	mov.w	r9, #1
 800b606:	4623      	mov	r3, r4
 800b608:	469a      	mov	sl, r3
 800b60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b60e:	b10a      	cbz	r2, 800b614 <_svfiprintf_r+0x60>
 800b610:	2a25      	cmp	r2, #37	@ 0x25
 800b612:	d1f9      	bne.n	800b608 <_svfiprintf_r+0x54>
 800b614:	ebba 0b04 	subs.w	fp, sl, r4
 800b618:	d00b      	beq.n	800b632 <_svfiprintf_r+0x7e>
 800b61a:	465b      	mov	r3, fp
 800b61c:	4622      	mov	r2, r4
 800b61e:	4629      	mov	r1, r5
 800b620:	4638      	mov	r0, r7
 800b622:	f7ff ff6b 	bl	800b4fc <__ssputs_r>
 800b626:	3001      	adds	r0, #1
 800b628:	f000 80a7 	beq.w	800b77a <_svfiprintf_r+0x1c6>
 800b62c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b62e:	445a      	add	r2, fp
 800b630:	9209      	str	r2, [sp, #36]	@ 0x24
 800b632:	f89a 3000 	ldrb.w	r3, [sl]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 809f 	beq.w	800b77a <_svfiprintf_r+0x1c6>
 800b63c:	2300      	movs	r3, #0
 800b63e:	f04f 32ff 	mov.w	r2, #4294967295
 800b642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b646:	f10a 0a01 	add.w	sl, sl, #1
 800b64a:	9304      	str	r3, [sp, #16]
 800b64c:	9307      	str	r3, [sp, #28]
 800b64e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b652:	931a      	str	r3, [sp, #104]	@ 0x68
 800b654:	4654      	mov	r4, sl
 800b656:	2205      	movs	r2, #5
 800b658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b65c:	484e      	ldr	r0, [pc, #312]	@ (800b798 <_svfiprintf_r+0x1e4>)
 800b65e:	f7f4 fdb7 	bl	80001d0 <memchr>
 800b662:	9a04      	ldr	r2, [sp, #16]
 800b664:	b9d8      	cbnz	r0, 800b69e <_svfiprintf_r+0xea>
 800b666:	06d0      	lsls	r0, r2, #27
 800b668:	bf44      	itt	mi
 800b66a:	2320      	movmi	r3, #32
 800b66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b670:	0711      	lsls	r1, r2, #28
 800b672:	bf44      	itt	mi
 800b674:	232b      	movmi	r3, #43	@ 0x2b
 800b676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b67a:	f89a 3000 	ldrb.w	r3, [sl]
 800b67e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b680:	d015      	beq.n	800b6ae <_svfiprintf_r+0xfa>
 800b682:	9a07      	ldr	r2, [sp, #28]
 800b684:	4654      	mov	r4, sl
 800b686:	2000      	movs	r0, #0
 800b688:	f04f 0c0a 	mov.w	ip, #10
 800b68c:	4621      	mov	r1, r4
 800b68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b692:	3b30      	subs	r3, #48	@ 0x30
 800b694:	2b09      	cmp	r3, #9
 800b696:	d94b      	bls.n	800b730 <_svfiprintf_r+0x17c>
 800b698:	b1b0      	cbz	r0, 800b6c8 <_svfiprintf_r+0x114>
 800b69a:	9207      	str	r2, [sp, #28]
 800b69c:	e014      	b.n	800b6c8 <_svfiprintf_r+0x114>
 800b69e:	eba0 0308 	sub.w	r3, r0, r8
 800b6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	46a2      	mov	sl, r4
 800b6ac:	e7d2      	b.n	800b654 <_svfiprintf_r+0xa0>
 800b6ae:	9b03      	ldr	r3, [sp, #12]
 800b6b0:	1d19      	adds	r1, r3, #4
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	9103      	str	r1, [sp, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bfbb      	ittet	lt
 800b6ba:	425b      	neglt	r3, r3
 800b6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b6c0:	9307      	strge	r3, [sp, #28]
 800b6c2:	9307      	strlt	r3, [sp, #28]
 800b6c4:	bfb8      	it	lt
 800b6c6:	9204      	strlt	r2, [sp, #16]
 800b6c8:	7823      	ldrb	r3, [r4, #0]
 800b6ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6cc:	d10a      	bne.n	800b6e4 <_svfiprintf_r+0x130>
 800b6ce:	7863      	ldrb	r3, [r4, #1]
 800b6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6d2:	d132      	bne.n	800b73a <_svfiprintf_r+0x186>
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	1d1a      	adds	r2, r3, #4
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	9203      	str	r2, [sp, #12]
 800b6dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6e0:	3402      	adds	r4, #2
 800b6e2:	9305      	str	r3, [sp, #20]
 800b6e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7a8 <_svfiprintf_r+0x1f4>
 800b6e8:	7821      	ldrb	r1, [r4, #0]
 800b6ea:	2203      	movs	r2, #3
 800b6ec:	4650      	mov	r0, sl
 800b6ee:	f7f4 fd6f 	bl	80001d0 <memchr>
 800b6f2:	b138      	cbz	r0, 800b704 <_svfiprintf_r+0x150>
 800b6f4:	9b04      	ldr	r3, [sp, #16]
 800b6f6:	eba0 000a 	sub.w	r0, r0, sl
 800b6fa:	2240      	movs	r2, #64	@ 0x40
 800b6fc:	4082      	lsls	r2, r0
 800b6fe:	4313      	orrs	r3, r2
 800b700:	3401      	adds	r4, #1
 800b702:	9304      	str	r3, [sp, #16]
 800b704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b708:	4824      	ldr	r0, [pc, #144]	@ (800b79c <_svfiprintf_r+0x1e8>)
 800b70a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b70e:	2206      	movs	r2, #6
 800b710:	f7f4 fd5e 	bl	80001d0 <memchr>
 800b714:	2800      	cmp	r0, #0
 800b716:	d036      	beq.n	800b786 <_svfiprintf_r+0x1d2>
 800b718:	4b21      	ldr	r3, [pc, #132]	@ (800b7a0 <_svfiprintf_r+0x1ec>)
 800b71a:	bb1b      	cbnz	r3, 800b764 <_svfiprintf_r+0x1b0>
 800b71c:	9b03      	ldr	r3, [sp, #12]
 800b71e:	3307      	adds	r3, #7
 800b720:	f023 0307 	bic.w	r3, r3, #7
 800b724:	3308      	adds	r3, #8
 800b726:	9303      	str	r3, [sp, #12]
 800b728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b72a:	4433      	add	r3, r6
 800b72c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b72e:	e76a      	b.n	800b606 <_svfiprintf_r+0x52>
 800b730:	fb0c 3202 	mla	r2, ip, r2, r3
 800b734:	460c      	mov	r4, r1
 800b736:	2001      	movs	r0, #1
 800b738:	e7a8      	b.n	800b68c <_svfiprintf_r+0xd8>
 800b73a:	2300      	movs	r3, #0
 800b73c:	3401      	adds	r4, #1
 800b73e:	9305      	str	r3, [sp, #20]
 800b740:	4619      	mov	r1, r3
 800b742:	f04f 0c0a 	mov.w	ip, #10
 800b746:	4620      	mov	r0, r4
 800b748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b74c:	3a30      	subs	r2, #48	@ 0x30
 800b74e:	2a09      	cmp	r2, #9
 800b750:	d903      	bls.n	800b75a <_svfiprintf_r+0x1a6>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d0c6      	beq.n	800b6e4 <_svfiprintf_r+0x130>
 800b756:	9105      	str	r1, [sp, #20]
 800b758:	e7c4      	b.n	800b6e4 <_svfiprintf_r+0x130>
 800b75a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b75e:	4604      	mov	r4, r0
 800b760:	2301      	movs	r3, #1
 800b762:	e7f0      	b.n	800b746 <_svfiprintf_r+0x192>
 800b764:	ab03      	add	r3, sp, #12
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	462a      	mov	r2, r5
 800b76a:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a4 <_svfiprintf_r+0x1f0>)
 800b76c:	a904      	add	r1, sp, #16
 800b76e:	4638      	mov	r0, r7
 800b770:	f7fc fc9e 	bl	80080b0 <_printf_float>
 800b774:	1c42      	adds	r2, r0, #1
 800b776:	4606      	mov	r6, r0
 800b778:	d1d6      	bne.n	800b728 <_svfiprintf_r+0x174>
 800b77a:	89ab      	ldrh	r3, [r5, #12]
 800b77c:	065b      	lsls	r3, r3, #25
 800b77e:	f53f af2d 	bmi.w	800b5dc <_svfiprintf_r+0x28>
 800b782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b784:	e72c      	b.n	800b5e0 <_svfiprintf_r+0x2c>
 800b786:	ab03      	add	r3, sp, #12
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	462a      	mov	r2, r5
 800b78c:	4b05      	ldr	r3, [pc, #20]	@ (800b7a4 <_svfiprintf_r+0x1f0>)
 800b78e:	a904      	add	r1, sp, #16
 800b790:	4638      	mov	r0, r7
 800b792:	f7fc ff25 	bl	80085e0 <_printf_i>
 800b796:	e7ed      	b.n	800b774 <_svfiprintf_r+0x1c0>
 800b798:	0800caf1 	.word	0x0800caf1
 800b79c:	0800cafb 	.word	0x0800cafb
 800b7a0:	080080b1 	.word	0x080080b1
 800b7a4:	0800b4fd 	.word	0x0800b4fd
 800b7a8:	0800caf7 	.word	0x0800caf7

0800b7ac <__sflush_r>:
 800b7ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b4:	0716      	lsls	r6, r2, #28
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	d454      	bmi.n	800b866 <__sflush_r+0xba>
 800b7bc:	684b      	ldr	r3, [r1, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	dc02      	bgt.n	800b7c8 <__sflush_r+0x1c>
 800b7c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dd48      	ble.n	800b85a <__sflush_r+0xae>
 800b7c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7ca:	2e00      	cmp	r6, #0
 800b7cc:	d045      	beq.n	800b85a <__sflush_r+0xae>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7d4:	682f      	ldr	r7, [r5, #0]
 800b7d6:	6a21      	ldr	r1, [r4, #32]
 800b7d8:	602b      	str	r3, [r5, #0]
 800b7da:	d030      	beq.n	800b83e <__sflush_r+0x92>
 800b7dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	0759      	lsls	r1, r3, #29
 800b7e2:	d505      	bpl.n	800b7f0 <__sflush_r+0x44>
 800b7e4:	6863      	ldr	r3, [r4, #4]
 800b7e6:	1ad2      	subs	r2, r2, r3
 800b7e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7ea:	b10b      	cbz	r3, 800b7f0 <__sflush_r+0x44>
 800b7ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7ee:	1ad2      	subs	r2, r2, r3
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7f4:	6a21      	ldr	r1, [r4, #32]
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	47b0      	blx	r6
 800b7fa:	1c43      	adds	r3, r0, #1
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	d106      	bne.n	800b80e <__sflush_r+0x62>
 800b800:	6829      	ldr	r1, [r5, #0]
 800b802:	291d      	cmp	r1, #29
 800b804:	d82b      	bhi.n	800b85e <__sflush_r+0xb2>
 800b806:	4a2a      	ldr	r2, [pc, #168]	@ (800b8b0 <__sflush_r+0x104>)
 800b808:	410a      	asrs	r2, r1
 800b80a:	07d6      	lsls	r6, r2, #31
 800b80c:	d427      	bmi.n	800b85e <__sflush_r+0xb2>
 800b80e:	2200      	movs	r2, #0
 800b810:	6062      	str	r2, [r4, #4]
 800b812:	04d9      	lsls	r1, r3, #19
 800b814:	6922      	ldr	r2, [r4, #16]
 800b816:	6022      	str	r2, [r4, #0]
 800b818:	d504      	bpl.n	800b824 <__sflush_r+0x78>
 800b81a:	1c42      	adds	r2, r0, #1
 800b81c:	d101      	bne.n	800b822 <__sflush_r+0x76>
 800b81e:	682b      	ldr	r3, [r5, #0]
 800b820:	b903      	cbnz	r3, 800b824 <__sflush_r+0x78>
 800b822:	6560      	str	r0, [r4, #84]	@ 0x54
 800b824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b826:	602f      	str	r7, [r5, #0]
 800b828:	b1b9      	cbz	r1, 800b85a <__sflush_r+0xae>
 800b82a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b82e:	4299      	cmp	r1, r3
 800b830:	d002      	beq.n	800b838 <__sflush_r+0x8c>
 800b832:	4628      	mov	r0, r5
 800b834:	f7fe fa2c 	bl	8009c90 <_free_r>
 800b838:	2300      	movs	r3, #0
 800b83a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b83c:	e00d      	b.n	800b85a <__sflush_r+0xae>
 800b83e:	2301      	movs	r3, #1
 800b840:	4628      	mov	r0, r5
 800b842:	47b0      	blx	r6
 800b844:	4602      	mov	r2, r0
 800b846:	1c50      	adds	r0, r2, #1
 800b848:	d1c9      	bne.n	800b7de <__sflush_r+0x32>
 800b84a:	682b      	ldr	r3, [r5, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d0c6      	beq.n	800b7de <__sflush_r+0x32>
 800b850:	2b1d      	cmp	r3, #29
 800b852:	d001      	beq.n	800b858 <__sflush_r+0xac>
 800b854:	2b16      	cmp	r3, #22
 800b856:	d11e      	bne.n	800b896 <__sflush_r+0xea>
 800b858:	602f      	str	r7, [r5, #0]
 800b85a:	2000      	movs	r0, #0
 800b85c:	e022      	b.n	800b8a4 <__sflush_r+0xf8>
 800b85e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b862:	b21b      	sxth	r3, r3
 800b864:	e01b      	b.n	800b89e <__sflush_r+0xf2>
 800b866:	690f      	ldr	r7, [r1, #16]
 800b868:	2f00      	cmp	r7, #0
 800b86a:	d0f6      	beq.n	800b85a <__sflush_r+0xae>
 800b86c:	0793      	lsls	r3, r2, #30
 800b86e:	680e      	ldr	r6, [r1, #0]
 800b870:	bf08      	it	eq
 800b872:	694b      	ldreq	r3, [r1, #20]
 800b874:	600f      	str	r7, [r1, #0]
 800b876:	bf18      	it	ne
 800b878:	2300      	movne	r3, #0
 800b87a:	eba6 0807 	sub.w	r8, r6, r7
 800b87e:	608b      	str	r3, [r1, #8]
 800b880:	f1b8 0f00 	cmp.w	r8, #0
 800b884:	dde9      	ble.n	800b85a <__sflush_r+0xae>
 800b886:	6a21      	ldr	r1, [r4, #32]
 800b888:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b88a:	4643      	mov	r3, r8
 800b88c:	463a      	mov	r2, r7
 800b88e:	4628      	mov	r0, r5
 800b890:	47b0      	blx	r6
 800b892:	2800      	cmp	r0, #0
 800b894:	dc08      	bgt.n	800b8a8 <__sflush_r+0xfc>
 800b896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b89a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b89e:	81a3      	strh	r3, [r4, #12]
 800b8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a8:	4407      	add	r7, r0
 800b8aa:	eba8 0800 	sub.w	r8, r8, r0
 800b8ae:	e7e7      	b.n	800b880 <__sflush_r+0xd4>
 800b8b0:	dfbffffe 	.word	0xdfbffffe

0800b8b4 <_fflush_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	690b      	ldr	r3, [r1, #16]
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	b913      	cbnz	r3, 800b8c4 <_fflush_r+0x10>
 800b8be:	2500      	movs	r5, #0
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	b118      	cbz	r0, 800b8ce <_fflush_r+0x1a>
 800b8c6:	6a03      	ldr	r3, [r0, #32]
 800b8c8:	b90b      	cbnz	r3, 800b8ce <_fflush_r+0x1a>
 800b8ca:	f7fd fa49 	bl	8008d60 <__sinit>
 800b8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0f3      	beq.n	800b8be <_fflush_r+0xa>
 800b8d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8d8:	07d0      	lsls	r0, r2, #31
 800b8da:	d404      	bmi.n	800b8e6 <_fflush_r+0x32>
 800b8dc:	0599      	lsls	r1, r3, #22
 800b8de:	d402      	bmi.n	800b8e6 <_fflush_r+0x32>
 800b8e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8e2:	f7fd fb54 	bl	8008f8e <__retarget_lock_acquire_recursive>
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	f7ff ff5f 	bl	800b7ac <__sflush_r>
 800b8ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8f0:	07da      	lsls	r2, r3, #31
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	d4e4      	bmi.n	800b8c0 <_fflush_r+0xc>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	059b      	lsls	r3, r3, #22
 800b8fa:	d4e1      	bmi.n	800b8c0 <_fflush_r+0xc>
 800b8fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8fe:	f7fd fb47 	bl	8008f90 <__retarget_lock_release_recursive>
 800b902:	e7dd      	b.n	800b8c0 <_fflush_r+0xc>

0800b904 <fiprintf>:
 800b904:	b40e      	push	{r1, r2, r3}
 800b906:	b503      	push	{r0, r1, lr}
 800b908:	4601      	mov	r1, r0
 800b90a:	ab03      	add	r3, sp, #12
 800b90c:	4805      	ldr	r0, [pc, #20]	@ (800b924 <fiprintf+0x20>)
 800b90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b912:	6800      	ldr	r0, [r0, #0]
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	f000 fc15 	bl	800c144 <_vfiprintf_r>
 800b91a:	b002      	add	sp, #8
 800b91c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b920:	b003      	add	sp, #12
 800b922:	4770      	bx	lr
 800b924:	2000002c 	.word	0x2000002c

0800b928 <memmove>:
 800b928:	4288      	cmp	r0, r1
 800b92a:	b510      	push	{r4, lr}
 800b92c:	eb01 0402 	add.w	r4, r1, r2
 800b930:	d902      	bls.n	800b938 <memmove+0x10>
 800b932:	4284      	cmp	r4, r0
 800b934:	4623      	mov	r3, r4
 800b936:	d807      	bhi.n	800b948 <memmove+0x20>
 800b938:	1e43      	subs	r3, r0, #1
 800b93a:	42a1      	cmp	r1, r4
 800b93c:	d008      	beq.n	800b950 <memmove+0x28>
 800b93e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b942:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b946:	e7f8      	b.n	800b93a <memmove+0x12>
 800b948:	4402      	add	r2, r0
 800b94a:	4601      	mov	r1, r0
 800b94c:	428a      	cmp	r2, r1
 800b94e:	d100      	bne.n	800b952 <memmove+0x2a>
 800b950:	bd10      	pop	{r4, pc}
 800b952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b95a:	e7f7      	b.n	800b94c <memmove+0x24>

0800b95c <strncmp>:
 800b95c:	b510      	push	{r4, lr}
 800b95e:	b16a      	cbz	r2, 800b97c <strncmp+0x20>
 800b960:	3901      	subs	r1, #1
 800b962:	1884      	adds	r4, r0, r2
 800b964:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b968:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d103      	bne.n	800b978 <strncmp+0x1c>
 800b970:	42a0      	cmp	r0, r4
 800b972:	d001      	beq.n	800b978 <strncmp+0x1c>
 800b974:	2a00      	cmp	r2, #0
 800b976:	d1f5      	bne.n	800b964 <strncmp+0x8>
 800b978:	1ad0      	subs	r0, r2, r3
 800b97a:	bd10      	pop	{r4, pc}
 800b97c:	4610      	mov	r0, r2
 800b97e:	e7fc      	b.n	800b97a <strncmp+0x1e>

0800b980 <_sbrk_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	@ (800b99c <_sbrk_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7fc fa50 	bl	8007e30 <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_sbrk_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_sbrk_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	2000092c 	.word	0x2000092c

0800b9a0 <nan>:
 800b9a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b9a8 <nan+0x8>
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	00000000 	.word	0x00000000
 800b9ac:	7ff80000 	.word	0x7ff80000

0800b9b0 <abort>:
 800b9b0:	b508      	push	{r3, lr}
 800b9b2:	2006      	movs	r0, #6
 800b9b4:	f000 fd9a 	bl	800c4ec <raise>
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	f7fc f9c1 	bl	8007d40 <_exit>

0800b9be <_calloc_r>:
 800b9be:	b570      	push	{r4, r5, r6, lr}
 800b9c0:	fba1 5402 	umull	r5, r4, r1, r2
 800b9c4:	b93c      	cbnz	r4, 800b9d6 <_calloc_r+0x18>
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f7fe f9d6 	bl	8009d78 <_malloc_r>
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	b928      	cbnz	r0, 800b9dc <_calloc_r+0x1e>
 800b9d0:	2600      	movs	r6, #0
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	bd70      	pop	{r4, r5, r6, pc}
 800b9d6:	220c      	movs	r2, #12
 800b9d8:	6002      	str	r2, [r0, #0]
 800b9da:	e7f9      	b.n	800b9d0 <_calloc_r+0x12>
 800b9dc:	462a      	mov	r2, r5
 800b9de:	4621      	mov	r1, r4
 800b9e0:	f7fd fa57 	bl	8008e92 <memset>
 800b9e4:	e7f5      	b.n	800b9d2 <_calloc_r+0x14>

0800b9e6 <rshift>:
 800b9e6:	6903      	ldr	r3, [r0, #16]
 800b9e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9f4:	f100 0414 	add.w	r4, r0, #20
 800b9f8:	dd45      	ble.n	800ba86 <rshift+0xa0>
 800b9fa:	f011 011f 	ands.w	r1, r1, #31
 800b9fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba02:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba06:	d10c      	bne.n	800ba22 <rshift+0x3c>
 800ba08:	f100 0710 	add.w	r7, r0, #16
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	42b1      	cmp	r1, r6
 800ba10:	d334      	bcc.n	800ba7c <rshift+0x96>
 800ba12:	1a9b      	subs	r3, r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	1eea      	subs	r2, r5, #3
 800ba18:	4296      	cmp	r6, r2
 800ba1a:	bf38      	it	cc
 800ba1c:	2300      	movcc	r3, #0
 800ba1e:	4423      	add	r3, r4
 800ba20:	e015      	b.n	800ba4e <rshift+0x68>
 800ba22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba26:	f1c1 0820 	rsb	r8, r1, #32
 800ba2a:	40cf      	lsrs	r7, r1
 800ba2c:	f105 0e04 	add.w	lr, r5, #4
 800ba30:	46a1      	mov	r9, r4
 800ba32:	4576      	cmp	r6, lr
 800ba34:	46f4      	mov	ip, lr
 800ba36:	d815      	bhi.n	800ba64 <rshift+0x7e>
 800ba38:	1a9a      	subs	r2, r3, r2
 800ba3a:	0092      	lsls	r2, r2, #2
 800ba3c:	3a04      	subs	r2, #4
 800ba3e:	3501      	adds	r5, #1
 800ba40:	42ae      	cmp	r6, r5
 800ba42:	bf38      	it	cc
 800ba44:	2200      	movcc	r2, #0
 800ba46:	18a3      	adds	r3, r4, r2
 800ba48:	50a7      	str	r7, [r4, r2]
 800ba4a:	b107      	cbz	r7, 800ba4e <rshift+0x68>
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	1b1a      	subs	r2, r3, r4
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba56:	bf08      	it	eq
 800ba58:	2300      	moveq	r3, #0
 800ba5a:	6102      	str	r2, [r0, #16]
 800ba5c:	bf08      	it	eq
 800ba5e:	6143      	streq	r3, [r0, #20]
 800ba60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba64:	f8dc c000 	ldr.w	ip, [ip]
 800ba68:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba6c:	ea4c 0707 	orr.w	r7, ip, r7
 800ba70:	f849 7b04 	str.w	r7, [r9], #4
 800ba74:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba78:	40cf      	lsrs	r7, r1
 800ba7a:	e7da      	b.n	800ba32 <rshift+0x4c>
 800ba7c:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba80:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba84:	e7c3      	b.n	800ba0e <rshift+0x28>
 800ba86:	4623      	mov	r3, r4
 800ba88:	e7e1      	b.n	800ba4e <rshift+0x68>

0800ba8a <__hexdig_fun>:
 800ba8a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ba8e:	2b09      	cmp	r3, #9
 800ba90:	d802      	bhi.n	800ba98 <__hexdig_fun+0xe>
 800ba92:	3820      	subs	r0, #32
 800ba94:	b2c0      	uxtb	r0, r0
 800ba96:	4770      	bx	lr
 800ba98:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ba9c:	2b05      	cmp	r3, #5
 800ba9e:	d801      	bhi.n	800baa4 <__hexdig_fun+0x1a>
 800baa0:	3847      	subs	r0, #71	@ 0x47
 800baa2:	e7f7      	b.n	800ba94 <__hexdig_fun+0xa>
 800baa4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800baa8:	2b05      	cmp	r3, #5
 800baaa:	d801      	bhi.n	800bab0 <__hexdig_fun+0x26>
 800baac:	3827      	subs	r0, #39	@ 0x27
 800baae:	e7f1      	b.n	800ba94 <__hexdig_fun+0xa>
 800bab0:	2000      	movs	r0, #0
 800bab2:	4770      	bx	lr

0800bab4 <__gethex>:
 800bab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	b085      	sub	sp, #20
 800baba:	468a      	mov	sl, r1
 800babc:	9302      	str	r3, [sp, #8]
 800babe:	680b      	ldr	r3, [r1, #0]
 800bac0:	9001      	str	r0, [sp, #4]
 800bac2:	4690      	mov	r8, r2
 800bac4:	1c9c      	adds	r4, r3, #2
 800bac6:	46a1      	mov	r9, r4
 800bac8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bacc:	2830      	cmp	r0, #48	@ 0x30
 800bace:	d0fa      	beq.n	800bac6 <__gethex+0x12>
 800bad0:	eba9 0303 	sub.w	r3, r9, r3
 800bad4:	f1a3 0b02 	sub.w	fp, r3, #2
 800bad8:	f7ff ffd7 	bl	800ba8a <__hexdig_fun>
 800badc:	4605      	mov	r5, r0
 800bade:	2800      	cmp	r0, #0
 800bae0:	d168      	bne.n	800bbb4 <__gethex+0x100>
 800bae2:	49a0      	ldr	r1, [pc, #640]	@ (800bd64 <__gethex+0x2b0>)
 800bae4:	2201      	movs	r2, #1
 800bae6:	4648      	mov	r0, r9
 800bae8:	f7ff ff38 	bl	800b95c <strncmp>
 800baec:	4607      	mov	r7, r0
 800baee:	2800      	cmp	r0, #0
 800baf0:	d167      	bne.n	800bbc2 <__gethex+0x10e>
 800baf2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800baf6:	4626      	mov	r6, r4
 800baf8:	f7ff ffc7 	bl	800ba8a <__hexdig_fun>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d062      	beq.n	800bbc6 <__gethex+0x112>
 800bb00:	4623      	mov	r3, r4
 800bb02:	7818      	ldrb	r0, [r3, #0]
 800bb04:	2830      	cmp	r0, #48	@ 0x30
 800bb06:	4699      	mov	r9, r3
 800bb08:	f103 0301 	add.w	r3, r3, #1
 800bb0c:	d0f9      	beq.n	800bb02 <__gethex+0x4e>
 800bb0e:	f7ff ffbc 	bl	800ba8a <__hexdig_fun>
 800bb12:	fab0 f580 	clz	r5, r0
 800bb16:	096d      	lsrs	r5, r5, #5
 800bb18:	f04f 0b01 	mov.w	fp, #1
 800bb1c:	464a      	mov	r2, r9
 800bb1e:	4616      	mov	r6, r2
 800bb20:	3201      	adds	r2, #1
 800bb22:	7830      	ldrb	r0, [r6, #0]
 800bb24:	f7ff ffb1 	bl	800ba8a <__hexdig_fun>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d1f8      	bne.n	800bb1e <__gethex+0x6a>
 800bb2c:	498d      	ldr	r1, [pc, #564]	@ (800bd64 <__gethex+0x2b0>)
 800bb2e:	2201      	movs	r2, #1
 800bb30:	4630      	mov	r0, r6
 800bb32:	f7ff ff13 	bl	800b95c <strncmp>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d13f      	bne.n	800bbba <__gethex+0x106>
 800bb3a:	b944      	cbnz	r4, 800bb4e <__gethex+0x9a>
 800bb3c:	1c74      	adds	r4, r6, #1
 800bb3e:	4622      	mov	r2, r4
 800bb40:	4616      	mov	r6, r2
 800bb42:	3201      	adds	r2, #1
 800bb44:	7830      	ldrb	r0, [r6, #0]
 800bb46:	f7ff ffa0 	bl	800ba8a <__hexdig_fun>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d1f8      	bne.n	800bb40 <__gethex+0x8c>
 800bb4e:	1ba4      	subs	r4, r4, r6
 800bb50:	00a7      	lsls	r7, r4, #2
 800bb52:	7833      	ldrb	r3, [r6, #0]
 800bb54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bb58:	2b50      	cmp	r3, #80	@ 0x50
 800bb5a:	d13e      	bne.n	800bbda <__gethex+0x126>
 800bb5c:	7873      	ldrb	r3, [r6, #1]
 800bb5e:	2b2b      	cmp	r3, #43	@ 0x2b
 800bb60:	d033      	beq.n	800bbca <__gethex+0x116>
 800bb62:	2b2d      	cmp	r3, #45	@ 0x2d
 800bb64:	d034      	beq.n	800bbd0 <__gethex+0x11c>
 800bb66:	1c71      	adds	r1, r6, #1
 800bb68:	2400      	movs	r4, #0
 800bb6a:	7808      	ldrb	r0, [r1, #0]
 800bb6c:	f7ff ff8d 	bl	800ba8a <__hexdig_fun>
 800bb70:	1e43      	subs	r3, r0, #1
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	2b18      	cmp	r3, #24
 800bb76:	d830      	bhi.n	800bbda <__gethex+0x126>
 800bb78:	f1a0 0210 	sub.w	r2, r0, #16
 800bb7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb80:	f7ff ff83 	bl	800ba8a <__hexdig_fun>
 800bb84:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb88:	fa5f fc8c 	uxtb.w	ip, ip
 800bb8c:	f1bc 0f18 	cmp.w	ip, #24
 800bb90:	f04f 030a 	mov.w	r3, #10
 800bb94:	d91e      	bls.n	800bbd4 <__gethex+0x120>
 800bb96:	b104      	cbz	r4, 800bb9a <__gethex+0xe6>
 800bb98:	4252      	negs	r2, r2
 800bb9a:	4417      	add	r7, r2
 800bb9c:	f8ca 1000 	str.w	r1, [sl]
 800bba0:	b1ed      	cbz	r5, 800bbde <__gethex+0x12a>
 800bba2:	f1bb 0f00 	cmp.w	fp, #0
 800bba6:	bf0c      	ite	eq
 800bba8:	2506      	moveq	r5, #6
 800bbaa:	2500      	movne	r5, #0
 800bbac:	4628      	mov	r0, r5
 800bbae:	b005      	add	sp, #20
 800bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb4:	2500      	movs	r5, #0
 800bbb6:	462c      	mov	r4, r5
 800bbb8:	e7b0      	b.n	800bb1c <__gethex+0x68>
 800bbba:	2c00      	cmp	r4, #0
 800bbbc:	d1c7      	bne.n	800bb4e <__gethex+0x9a>
 800bbbe:	4627      	mov	r7, r4
 800bbc0:	e7c7      	b.n	800bb52 <__gethex+0x9e>
 800bbc2:	464e      	mov	r6, r9
 800bbc4:	462f      	mov	r7, r5
 800bbc6:	2501      	movs	r5, #1
 800bbc8:	e7c3      	b.n	800bb52 <__gethex+0x9e>
 800bbca:	2400      	movs	r4, #0
 800bbcc:	1cb1      	adds	r1, r6, #2
 800bbce:	e7cc      	b.n	800bb6a <__gethex+0xb6>
 800bbd0:	2401      	movs	r4, #1
 800bbd2:	e7fb      	b.n	800bbcc <__gethex+0x118>
 800bbd4:	fb03 0002 	mla	r0, r3, r2, r0
 800bbd8:	e7ce      	b.n	800bb78 <__gethex+0xc4>
 800bbda:	4631      	mov	r1, r6
 800bbdc:	e7de      	b.n	800bb9c <__gethex+0xe8>
 800bbde:	eba6 0309 	sub.w	r3, r6, r9
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	2b07      	cmp	r3, #7
 800bbe8:	dc0a      	bgt.n	800bc00 <__gethex+0x14c>
 800bbea:	9801      	ldr	r0, [sp, #4]
 800bbec:	f7fe f950 	bl	8009e90 <_Balloc>
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	b940      	cbnz	r0, 800bc06 <__gethex+0x152>
 800bbf4:	4b5c      	ldr	r3, [pc, #368]	@ (800bd68 <__gethex+0x2b4>)
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	21e4      	movs	r1, #228	@ 0xe4
 800bbfa:	485c      	ldr	r0, [pc, #368]	@ (800bd6c <__gethex+0x2b8>)
 800bbfc:	f7fd f9de 	bl	8008fbc <__assert_func>
 800bc00:	3101      	adds	r1, #1
 800bc02:	105b      	asrs	r3, r3, #1
 800bc04:	e7ef      	b.n	800bbe6 <__gethex+0x132>
 800bc06:	f100 0a14 	add.w	sl, r0, #20
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4655      	mov	r5, sl
 800bc0e:	469b      	mov	fp, r3
 800bc10:	45b1      	cmp	r9, r6
 800bc12:	d337      	bcc.n	800bc84 <__gethex+0x1d0>
 800bc14:	f845 bb04 	str.w	fp, [r5], #4
 800bc18:	eba5 050a 	sub.w	r5, r5, sl
 800bc1c:	10ad      	asrs	r5, r5, #2
 800bc1e:	6125      	str	r5, [r4, #16]
 800bc20:	4658      	mov	r0, fp
 800bc22:	f7fe fa27 	bl	800a074 <__hi0bits>
 800bc26:	016d      	lsls	r5, r5, #5
 800bc28:	f8d8 6000 	ldr.w	r6, [r8]
 800bc2c:	1a2d      	subs	r5, r5, r0
 800bc2e:	42b5      	cmp	r5, r6
 800bc30:	dd54      	ble.n	800bcdc <__gethex+0x228>
 800bc32:	1bad      	subs	r5, r5, r6
 800bc34:	4629      	mov	r1, r5
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7fe fdbb 	bl	800a7b2 <__any_on>
 800bc3c:	4681      	mov	r9, r0
 800bc3e:	b178      	cbz	r0, 800bc60 <__gethex+0x1ac>
 800bc40:	1e6b      	subs	r3, r5, #1
 800bc42:	1159      	asrs	r1, r3, #5
 800bc44:	f003 021f 	and.w	r2, r3, #31
 800bc48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc4c:	f04f 0901 	mov.w	r9, #1
 800bc50:	fa09 f202 	lsl.w	r2, r9, r2
 800bc54:	420a      	tst	r2, r1
 800bc56:	d003      	beq.n	800bc60 <__gethex+0x1ac>
 800bc58:	454b      	cmp	r3, r9
 800bc5a:	dc36      	bgt.n	800bcca <__gethex+0x216>
 800bc5c:	f04f 0902 	mov.w	r9, #2
 800bc60:	4629      	mov	r1, r5
 800bc62:	4620      	mov	r0, r4
 800bc64:	f7ff febf 	bl	800b9e6 <rshift>
 800bc68:	442f      	add	r7, r5
 800bc6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc6e:	42bb      	cmp	r3, r7
 800bc70:	da42      	bge.n	800bcf8 <__gethex+0x244>
 800bc72:	9801      	ldr	r0, [sp, #4]
 800bc74:	4621      	mov	r1, r4
 800bc76:	f7fe f94b 	bl	8009f10 <_Bfree>
 800bc7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	25a3      	movs	r5, #163	@ 0xa3
 800bc82:	e793      	b.n	800bbac <__gethex+0xf8>
 800bc84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bc88:	2a2e      	cmp	r2, #46	@ 0x2e
 800bc8a:	d012      	beq.n	800bcb2 <__gethex+0x1fe>
 800bc8c:	2b20      	cmp	r3, #32
 800bc8e:	d104      	bne.n	800bc9a <__gethex+0x1e6>
 800bc90:	f845 bb04 	str.w	fp, [r5], #4
 800bc94:	f04f 0b00 	mov.w	fp, #0
 800bc98:	465b      	mov	r3, fp
 800bc9a:	7830      	ldrb	r0, [r6, #0]
 800bc9c:	9303      	str	r3, [sp, #12]
 800bc9e:	f7ff fef4 	bl	800ba8a <__hexdig_fun>
 800bca2:	9b03      	ldr	r3, [sp, #12]
 800bca4:	f000 000f 	and.w	r0, r0, #15
 800bca8:	4098      	lsls	r0, r3
 800bcaa:	ea4b 0b00 	orr.w	fp, fp, r0
 800bcae:	3304      	adds	r3, #4
 800bcb0:	e7ae      	b.n	800bc10 <__gethex+0x15c>
 800bcb2:	45b1      	cmp	r9, r6
 800bcb4:	d8ea      	bhi.n	800bc8c <__gethex+0x1d8>
 800bcb6:	492b      	ldr	r1, [pc, #172]	@ (800bd64 <__gethex+0x2b0>)
 800bcb8:	9303      	str	r3, [sp, #12]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f7ff fe4d 	bl	800b95c <strncmp>
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d1e1      	bne.n	800bc8c <__gethex+0x1d8>
 800bcc8:	e7a2      	b.n	800bc10 <__gethex+0x15c>
 800bcca:	1ea9      	subs	r1, r5, #2
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7fe fd70 	bl	800a7b2 <__any_on>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d0c2      	beq.n	800bc5c <__gethex+0x1a8>
 800bcd6:	f04f 0903 	mov.w	r9, #3
 800bcda:	e7c1      	b.n	800bc60 <__gethex+0x1ac>
 800bcdc:	da09      	bge.n	800bcf2 <__gethex+0x23e>
 800bcde:	1b75      	subs	r5, r6, r5
 800bce0:	4621      	mov	r1, r4
 800bce2:	9801      	ldr	r0, [sp, #4]
 800bce4:	462a      	mov	r2, r5
 800bce6:	f7fe fb2b 	bl	800a340 <__lshift>
 800bcea:	1b7f      	subs	r7, r7, r5
 800bcec:	4604      	mov	r4, r0
 800bcee:	f100 0a14 	add.w	sl, r0, #20
 800bcf2:	f04f 0900 	mov.w	r9, #0
 800bcf6:	e7b8      	b.n	800bc6a <__gethex+0x1b6>
 800bcf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bcfc:	42bd      	cmp	r5, r7
 800bcfe:	dd6f      	ble.n	800bde0 <__gethex+0x32c>
 800bd00:	1bed      	subs	r5, r5, r7
 800bd02:	42ae      	cmp	r6, r5
 800bd04:	dc34      	bgt.n	800bd70 <__gethex+0x2bc>
 800bd06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	d022      	beq.n	800bd54 <__gethex+0x2a0>
 800bd0e:	2b03      	cmp	r3, #3
 800bd10:	d024      	beq.n	800bd5c <__gethex+0x2a8>
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d115      	bne.n	800bd42 <__gethex+0x28e>
 800bd16:	42ae      	cmp	r6, r5
 800bd18:	d113      	bne.n	800bd42 <__gethex+0x28e>
 800bd1a:	2e01      	cmp	r6, #1
 800bd1c:	d10b      	bne.n	800bd36 <__gethex+0x282>
 800bd1e:	9a02      	ldr	r2, [sp, #8]
 800bd20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	2301      	movs	r3, #1
 800bd28:	6123      	str	r3, [r4, #16]
 800bd2a:	f8ca 3000 	str.w	r3, [sl]
 800bd2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd30:	2562      	movs	r5, #98	@ 0x62
 800bd32:	601c      	str	r4, [r3, #0]
 800bd34:	e73a      	b.n	800bbac <__gethex+0xf8>
 800bd36:	1e71      	subs	r1, r6, #1
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f7fe fd3a 	bl	800a7b2 <__any_on>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d1ed      	bne.n	800bd1e <__gethex+0x26a>
 800bd42:	9801      	ldr	r0, [sp, #4]
 800bd44:	4621      	mov	r1, r4
 800bd46:	f7fe f8e3 	bl	8009f10 <_Bfree>
 800bd4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	6013      	str	r3, [r2, #0]
 800bd50:	2550      	movs	r5, #80	@ 0x50
 800bd52:	e72b      	b.n	800bbac <__gethex+0xf8>
 800bd54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1f3      	bne.n	800bd42 <__gethex+0x28e>
 800bd5a:	e7e0      	b.n	800bd1e <__gethex+0x26a>
 800bd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1dd      	bne.n	800bd1e <__gethex+0x26a>
 800bd62:	e7ee      	b.n	800bd42 <__gethex+0x28e>
 800bd64:	0800c998 	.word	0x0800c998
 800bd68:	0800c82d 	.word	0x0800c82d
 800bd6c:	0800cb0a 	.word	0x0800cb0a
 800bd70:	1e6f      	subs	r7, r5, #1
 800bd72:	f1b9 0f00 	cmp.w	r9, #0
 800bd76:	d130      	bne.n	800bdda <__gethex+0x326>
 800bd78:	b127      	cbz	r7, 800bd84 <__gethex+0x2d0>
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f7fe fd18 	bl	800a7b2 <__any_on>
 800bd82:	4681      	mov	r9, r0
 800bd84:	117a      	asrs	r2, r7, #5
 800bd86:	2301      	movs	r3, #1
 800bd88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bd8c:	f007 071f 	and.w	r7, r7, #31
 800bd90:	40bb      	lsls	r3, r7
 800bd92:	4213      	tst	r3, r2
 800bd94:	4629      	mov	r1, r5
 800bd96:	4620      	mov	r0, r4
 800bd98:	bf18      	it	ne
 800bd9a:	f049 0902 	orrne.w	r9, r9, #2
 800bd9e:	f7ff fe22 	bl	800b9e6 <rshift>
 800bda2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bda6:	1b76      	subs	r6, r6, r5
 800bda8:	2502      	movs	r5, #2
 800bdaa:	f1b9 0f00 	cmp.w	r9, #0
 800bdae:	d047      	beq.n	800be40 <__gethex+0x38c>
 800bdb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d015      	beq.n	800bde4 <__gethex+0x330>
 800bdb8:	2b03      	cmp	r3, #3
 800bdba:	d017      	beq.n	800bdec <__gethex+0x338>
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d109      	bne.n	800bdd4 <__gethex+0x320>
 800bdc0:	f019 0f02 	tst.w	r9, #2
 800bdc4:	d006      	beq.n	800bdd4 <__gethex+0x320>
 800bdc6:	f8da 3000 	ldr.w	r3, [sl]
 800bdca:	ea49 0903 	orr.w	r9, r9, r3
 800bdce:	f019 0f01 	tst.w	r9, #1
 800bdd2:	d10e      	bne.n	800bdf2 <__gethex+0x33e>
 800bdd4:	f045 0510 	orr.w	r5, r5, #16
 800bdd8:	e032      	b.n	800be40 <__gethex+0x38c>
 800bdda:	f04f 0901 	mov.w	r9, #1
 800bdde:	e7d1      	b.n	800bd84 <__gethex+0x2d0>
 800bde0:	2501      	movs	r5, #1
 800bde2:	e7e2      	b.n	800bdaa <__gethex+0x2f6>
 800bde4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bde6:	f1c3 0301 	rsb	r3, r3, #1
 800bdea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bdec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0f0      	beq.n	800bdd4 <__gethex+0x320>
 800bdf2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bdf6:	f104 0314 	add.w	r3, r4, #20
 800bdfa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bdfe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be02:	f04f 0c00 	mov.w	ip, #0
 800be06:	4618      	mov	r0, r3
 800be08:	f853 2b04 	ldr.w	r2, [r3], #4
 800be0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be10:	d01b      	beq.n	800be4a <__gethex+0x396>
 800be12:	3201      	adds	r2, #1
 800be14:	6002      	str	r2, [r0, #0]
 800be16:	2d02      	cmp	r5, #2
 800be18:	f104 0314 	add.w	r3, r4, #20
 800be1c:	d13c      	bne.n	800be98 <__gethex+0x3e4>
 800be1e:	f8d8 2000 	ldr.w	r2, [r8]
 800be22:	3a01      	subs	r2, #1
 800be24:	42b2      	cmp	r2, r6
 800be26:	d109      	bne.n	800be3c <__gethex+0x388>
 800be28:	1171      	asrs	r1, r6, #5
 800be2a:	2201      	movs	r2, #1
 800be2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be30:	f006 061f 	and.w	r6, r6, #31
 800be34:	fa02 f606 	lsl.w	r6, r2, r6
 800be38:	421e      	tst	r6, r3
 800be3a:	d13a      	bne.n	800beb2 <__gethex+0x3fe>
 800be3c:	f045 0520 	orr.w	r5, r5, #32
 800be40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be42:	601c      	str	r4, [r3, #0]
 800be44:	9b02      	ldr	r3, [sp, #8]
 800be46:	601f      	str	r7, [r3, #0]
 800be48:	e6b0      	b.n	800bbac <__gethex+0xf8>
 800be4a:	4299      	cmp	r1, r3
 800be4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800be50:	d8d9      	bhi.n	800be06 <__gethex+0x352>
 800be52:	68a3      	ldr	r3, [r4, #8]
 800be54:	459b      	cmp	fp, r3
 800be56:	db17      	blt.n	800be88 <__gethex+0x3d4>
 800be58:	6861      	ldr	r1, [r4, #4]
 800be5a:	9801      	ldr	r0, [sp, #4]
 800be5c:	3101      	adds	r1, #1
 800be5e:	f7fe f817 	bl	8009e90 <_Balloc>
 800be62:	4681      	mov	r9, r0
 800be64:	b918      	cbnz	r0, 800be6e <__gethex+0x3ba>
 800be66:	4b1a      	ldr	r3, [pc, #104]	@ (800bed0 <__gethex+0x41c>)
 800be68:	4602      	mov	r2, r0
 800be6a:	2184      	movs	r1, #132	@ 0x84
 800be6c:	e6c5      	b.n	800bbfa <__gethex+0x146>
 800be6e:	6922      	ldr	r2, [r4, #16]
 800be70:	3202      	adds	r2, #2
 800be72:	f104 010c 	add.w	r1, r4, #12
 800be76:	0092      	lsls	r2, r2, #2
 800be78:	300c      	adds	r0, #12
 800be7a:	f7fd f88a 	bl	8008f92 <memcpy>
 800be7e:	4621      	mov	r1, r4
 800be80:	9801      	ldr	r0, [sp, #4]
 800be82:	f7fe f845 	bl	8009f10 <_Bfree>
 800be86:	464c      	mov	r4, r9
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be90:	6122      	str	r2, [r4, #16]
 800be92:	2201      	movs	r2, #1
 800be94:	615a      	str	r2, [r3, #20]
 800be96:	e7be      	b.n	800be16 <__gethex+0x362>
 800be98:	6922      	ldr	r2, [r4, #16]
 800be9a:	455a      	cmp	r2, fp
 800be9c:	dd0b      	ble.n	800beb6 <__gethex+0x402>
 800be9e:	2101      	movs	r1, #1
 800bea0:	4620      	mov	r0, r4
 800bea2:	f7ff fda0 	bl	800b9e6 <rshift>
 800bea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800beaa:	3701      	adds	r7, #1
 800beac:	42bb      	cmp	r3, r7
 800beae:	f6ff aee0 	blt.w	800bc72 <__gethex+0x1be>
 800beb2:	2501      	movs	r5, #1
 800beb4:	e7c2      	b.n	800be3c <__gethex+0x388>
 800beb6:	f016 061f 	ands.w	r6, r6, #31
 800beba:	d0fa      	beq.n	800beb2 <__gethex+0x3fe>
 800bebc:	4453      	add	r3, sl
 800bebe:	f1c6 0620 	rsb	r6, r6, #32
 800bec2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bec6:	f7fe f8d5 	bl	800a074 <__hi0bits>
 800beca:	42b0      	cmp	r0, r6
 800becc:	dbe7      	blt.n	800be9e <__gethex+0x3ea>
 800bece:	e7f0      	b.n	800beb2 <__gethex+0x3fe>
 800bed0:	0800c82d 	.word	0x0800c82d

0800bed4 <L_shift>:
 800bed4:	f1c2 0208 	rsb	r2, r2, #8
 800bed8:	0092      	lsls	r2, r2, #2
 800beda:	b570      	push	{r4, r5, r6, lr}
 800bedc:	f1c2 0620 	rsb	r6, r2, #32
 800bee0:	6843      	ldr	r3, [r0, #4]
 800bee2:	6804      	ldr	r4, [r0, #0]
 800bee4:	fa03 f506 	lsl.w	r5, r3, r6
 800bee8:	432c      	orrs	r4, r5
 800beea:	40d3      	lsrs	r3, r2
 800beec:	6004      	str	r4, [r0, #0]
 800beee:	f840 3f04 	str.w	r3, [r0, #4]!
 800bef2:	4288      	cmp	r0, r1
 800bef4:	d3f4      	bcc.n	800bee0 <L_shift+0xc>
 800bef6:	bd70      	pop	{r4, r5, r6, pc}

0800bef8 <__match>:
 800bef8:	b530      	push	{r4, r5, lr}
 800befa:	6803      	ldr	r3, [r0, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf02:	b914      	cbnz	r4, 800bf0a <__match+0x12>
 800bf04:	6003      	str	r3, [r0, #0]
 800bf06:	2001      	movs	r0, #1
 800bf08:	bd30      	pop	{r4, r5, pc}
 800bf0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bf12:	2d19      	cmp	r5, #25
 800bf14:	bf98      	it	ls
 800bf16:	3220      	addls	r2, #32
 800bf18:	42a2      	cmp	r2, r4
 800bf1a:	d0f0      	beq.n	800befe <__match+0x6>
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	e7f3      	b.n	800bf08 <__match+0x10>

0800bf20 <__hexnan>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	680b      	ldr	r3, [r1, #0]
 800bf26:	6801      	ldr	r1, [r0, #0]
 800bf28:	115e      	asrs	r6, r3, #5
 800bf2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf2e:	f013 031f 	ands.w	r3, r3, #31
 800bf32:	b087      	sub	sp, #28
 800bf34:	bf18      	it	ne
 800bf36:	3604      	addne	r6, #4
 800bf38:	2500      	movs	r5, #0
 800bf3a:	1f37      	subs	r7, r6, #4
 800bf3c:	4682      	mov	sl, r0
 800bf3e:	4690      	mov	r8, r2
 800bf40:	9301      	str	r3, [sp, #4]
 800bf42:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf46:	46b9      	mov	r9, r7
 800bf48:	463c      	mov	r4, r7
 800bf4a:	9502      	str	r5, [sp, #8]
 800bf4c:	46ab      	mov	fp, r5
 800bf4e:	784a      	ldrb	r2, [r1, #1]
 800bf50:	1c4b      	adds	r3, r1, #1
 800bf52:	9303      	str	r3, [sp, #12]
 800bf54:	b342      	cbz	r2, 800bfa8 <__hexnan+0x88>
 800bf56:	4610      	mov	r0, r2
 800bf58:	9105      	str	r1, [sp, #20]
 800bf5a:	9204      	str	r2, [sp, #16]
 800bf5c:	f7ff fd95 	bl	800ba8a <__hexdig_fun>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d151      	bne.n	800c008 <__hexnan+0xe8>
 800bf64:	9a04      	ldr	r2, [sp, #16]
 800bf66:	9905      	ldr	r1, [sp, #20]
 800bf68:	2a20      	cmp	r2, #32
 800bf6a:	d818      	bhi.n	800bf9e <__hexnan+0x7e>
 800bf6c:	9b02      	ldr	r3, [sp, #8]
 800bf6e:	459b      	cmp	fp, r3
 800bf70:	dd13      	ble.n	800bf9a <__hexnan+0x7a>
 800bf72:	454c      	cmp	r4, r9
 800bf74:	d206      	bcs.n	800bf84 <__hexnan+0x64>
 800bf76:	2d07      	cmp	r5, #7
 800bf78:	dc04      	bgt.n	800bf84 <__hexnan+0x64>
 800bf7a:	462a      	mov	r2, r5
 800bf7c:	4649      	mov	r1, r9
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f7ff ffa8 	bl	800bed4 <L_shift>
 800bf84:	4544      	cmp	r4, r8
 800bf86:	d952      	bls.n	800c02e <__hexnan+0x10e>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	f1a4 0904 	sub.w	r9, r4, #4
 800bf8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf92:	f8cd b008 	str.w	fp, [sp, #8]
 800bf96:	464c      	mov	r4, r9
 800bf98:	461d      	mov	r5, r3
 800bf9a:	9903      	ldr	r1, [sp, #12]
 800bf9c:	e7d7      	b.n	800bf4e <__hexnan+0x2e>
 800bf9e:	2a29      	cmp	r2, #41	@ 0x29
 800bfa0:	d157      	bne.n	800c052 <__hexnan+0x132>
 800bfa2:	3102      	adds	r1, #2
 800bfa4:	f8ca 1000 	str.w	r1, [sl]
 800bfa8:	f1bb 0f00 	cmp.w	fp, #0
 800bfac:	d051      	beq.n	800c052 <__hexnan+0x132>
 800bfae:	454c      	cmp	r4, r9
 800bfb0:	d206      	bcs.n	800bfc0 <__hexnan+0xa0>
 800bfb2:	2d07      	cmp	r5, #7
 800bfb4:	dc04      	bgt.n	800bfc0 <__hexnan+0xa0>
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	4649      	mov	r1, r9
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f7ff ff8a 	bl	800bed4 <L_shift>
 800bfc0:	4544      	cmp	r4, r8
 800bfc2:	d936      	bls.n	800c032 <__hexnan+0x112>
 800bfc4:	f1a8 0204 	sub.w	r2, r8, #4
 800bfc8:	4623      	mov	r3, r4
 800bfca:	f853 1b04 	ldr.w	r1, [r3], #4
 800bfce:	f842 1f04 	str.w	r1, [r2, #4]!
 800bfd2:	429f      	cmp	r7, r3
 800bfd4:	d2f9      	bcs.n	800bfca <__hexnan+0xaa>
 800bfd6:	1b3b      	subs	r3, r7, r4
 800bfd8:	f023 0303 	bic.w	r3, r3, #3
 800bfdc:	3304      	adds	r3, #4
 800bfde:	3401      	adds	r4, #1
 800bfe0:	3e03      	subs	r6, #3
 800bfe2:	42b4      	cmp	r4, r6
 800bfe4:	bf88      	it	hi
 800bfe6:	2304      	movhi	r3, #4
 800bfe8:	4443      	add	r3, r8
 800bfea:	2200      	movs	r2, #0
 800bfec:	f843 2b04 	str.w	r2, [r3], #4
 800bff0:	429f      	cmp	r7, r3
 800bff2:	d2fb      	bcs.n	800bfec <__hexnan+0xcc>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	b91b      	cbnz	r3, 800c000 <__hexnan+0xe0>
 800bff8:	4547      	cmp	r7, r8
 800bffa:	d128      	bne.n	800c04e <__hexnan+0x12e>
 800bffc:	2301      	movs	r3, #1
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	2005      	movs	r0, #5
 800c002:	b007      	add	sp, #28
 800c004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c008:	3501      	adds	r5, #1
 800c00a:	2d08      	cmp	r5, #8
 800c00c:	f10b 0b01 	add.w	fp, fp, #1
 800c010:	dd06      	ble.n	800c020 <__hexnan+0x100>
 800c012:	4544      	cmp	r4, r8
 800c014:	d9c1      	bls.n	800bf9a <__hexnan+0x7a>
 800c016:	2300      	movs	r3, #0
 800c018:	f844 3c04 	str.w	r3, [r4, #-4]
 800c01c:	2501      	movs	r5, #1
 800c01e:	3c04      	subs	r4, #4
 800c020:	6822      	ldr	r2, [r4, #0]
 800c022:	f000 000f 	and.w	r0, r0, #15
 800c026:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c02a:	6020      	str	r0, [r4, #0]
 800c02c:	e7b5      	b.n	800bf9a <__hexnan+0x7a>
 800c02e:	2508      	movs	r5, #8
 800c030:	e7b3      	b.n	800bf9a <__hexnan+0x7a>
 800c032:	9b01      	ldr	r3, [sp, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0dd      	beq.n	800bff4 <__hexnan+0xd4>
 800c038:	f1c3 0320 	rsb	r3, r3, #32
 800c03c:	f04f 32ff 	mov.w	r2, #4294967295
 800c040:	40da      	lsrs	r2, r3
 800c042:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c046:	4013      	ands	r3, r2
 800c048:	f846 3c04 	str.w	r3, [r6, #-4]
 800c04c:	e7d2      	b.n	800bff4 <__hexnan+0xd4>
 800c04e:	3f04      	subs	r7, #4
 800c050:	e7d0      	b.n	800bff4 <__hexnan+0xd4>
 800c052:	2004      	movs	r0, #4
 800c054:	e7d5      	b.n	800c002 <__hexnan+0xe2>

0800c056 <__ascii_mbtowc>:
 800c056:	b082      	sub	sp, #8
 800c058:	b901      	cbnz	r1, 800c05c <__ascii_mbtowc+0x6>
 800c05a:	a901      	add	r1, sp, #4
 800c05c:	b142      	cbz	r2, 800c070 <__ascii_mbtowc+0x1a>
 800c05e:	b14b      	cbz	r3, 800c074 <__ascii_mbtowc+0x1e>
 800c060:	7813      	ldrb	r3, [r2, #0]
 800c062:	600b      	str	r3, [r1, #0]
 800c064:	7812      	ldrb	r2, [r2, #0]
 800c066:	1e10      	subs	r0, r2, #0
 800c068:	bf18      	it	ne
 800c06a:	2001      	movne	r0, #1
 800c06c:	b002      	add	sp, #8
 800c06e:	4770      	bx	lr
 800c070:	4610      	mov	r0, r2
 800c072:	e7fb      	b.n	800c06c <__ascii_mbtowc+0x16>
 800c074:	f06f 0001 	mvn.w	r0, #1
 800c078:	e7f8      	b.n	800c06c <__ascii_mbtowc+0x16>

0800c07a <_realloc_r>:
 800c07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07e:	4680      	mov	r8, r0
 800c080:	4615      	mov	r5, r2
 800c082:	460c      	mov	r4, r1
 800c084:	b921      	cbnz	r1, 800c090 <_realloc_r+0x16>
 800c086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c08a:	4611      	mov	r1, r2
 800c08c:	f7fd be74 	b.w	8009d78 <_malloc_r>
 800c090:	b92a      	cbnz	r2, 800c09e <_realloc_r+0x24>
 800c092:	f7fd fdfd 	bl	8009c90 <_free_r>
 800c096:	2400      	movs	r4, #0
 800c098:	4620      	mov	r0, r4
 800c09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c09e:	f000 fa41 	bl	800c524 <_malloc_usable_size_r>
 800c0a2:	4285      	cmp	r5, r0
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	d802      	bhi.n	800c0ae <_realloc_r+0x34>
 800c0a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c0ac:	d8f4      	bhi.n	800c098 <_realloc_r+0x1e>
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	f7fd fe61 	bl	8009d78 <_malloc_r>
 800c0b6:	4607      	mov	r7, r0
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d0ec      	beq.n	800c096 <_realloc_r+0x1c>
 800c0bc:	42b5      	cmp	r5, r6
 800c0be:	462a      	mov	r2, r5
 800c0c0:	4621      	mov	r1, r4
 800c0c2:	bf28      	it	cs
 800c0c4:	4632      	movcs	r2, r6
 800c0c6:	f7fc ff64 	bl	8008f92 <memcpy>
 800c0ca:	4621      	mov	r1, r4
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	f7fd fddf 	bl	8009c90 <_free_r>
 800c0d2:	463c      	mov	r4, r7
 800c0d4:	e7e0      	b.n	800c098 <_realloc_r+0x1e>

0800c0d6 <__ascii_wctomb>:
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	4608      	mov	r0, r1
 800c0da:	b141      	cbz	r1, 800c0ee <__ascii_wctomb+0x18>
 800c0dc:	2aff      	cmp	r2, #255	@ 0xff
 800c0de:	d904      	bls.n	800c0ea <__ascii_wctomb+0x14>
 800c0e0:	228a      	movs	r2, #138	@ 0x8a
 800c0e2:	601a      	str	r2, [r3, #0]
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e8:	4770      	bx	lr
 800c0ea:	700a      	strb	r2, [r1, #0]
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	4770      	bx	lr

0800c0f0 <__sfputc_r>:
 800c0f0:	6893      	ldr	r3, [r2, #8]
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	b410      	push	{r4}
 800c0f8:	6093      	str	r3, [r2, #8]
 800c0fa:	da08      	bge.n	800c10e <__sfputc_r+0x1e>
 800c0fc:	6994      	ldr	r4, [r2, #24]
 800c0fe:	42a3      	cmp	r3, r4
 800c100:	db01      	blt.n	800c106 <__sfputc_r+0x16>
 800c102:	290a      	cmp	r1, #10
 800c104:	d103      	bne.n	800c10e <__sfputc_r+0x1e>
 800c106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c10a:	f000 b933 	b.w	800c374 <__swbuf_r>
 800c10e:	6813      	ldr	r3, [r2, #0]
 800c110:	1c58      	adds	r0, r3, #1
 800c112:	6010      	str	r0, [r2, #0]
 800c114:	7019      	strb	r1, [r3, #0]
 800c116:	4608      	mov	r0, r1
 800c118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <__sfputs_r>:
 800c11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c120:	4606      	mov	r6, r0
 800c122:	460f      	mov	r7, r1
 800c124:	4614      	mov	r4, r2
 800c126:	18d5      	adds	r5, r2, r3
 800c128:	42ac      	cmp	r4, r5
 800c12a:	d101      	bne.n	800c130 <__sfputs_r+0x12>
 800c12c:	2000      	movs	r0, #0
 800c12e:	e007      	b.n	800c140 <__sfputs_r+0x22>
 800c130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c134:	463a      	mov	r2, r7
 800c136:	4630      	mov	r0, r6
 800c138:	f7ff ffda 	bl	800c0f0 <__sfputc_r>
 800c13c:	1c43      	adds	r3, r0, #1
 800c13e:	d1f3      	bne.n	800c128 <__sfputs_r+0xa>
 800c140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c144 <_vfiprintf_r>:
 800c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	460d      	mov	r5, r1
 800c14a:	b09d      	sub	sp, #116	@ 0x74
 800c14c:	4614      	mov	r4, r2
 800c14e:	4698      	mov	r8, r3
 800c150:	4606      	mov	r6, r0
 800c152:	b118      	cbz	r0, 800c15c <_vfiprintf_r+0x18>
 800c154:	6a03      	ldr	r3, [r0, #32]
 800c156:	b90b      	cbnz	r3, 800c15c <_vfiprintf_r+0x18>
 800c158:	f7fc fe02 	bl	8008d60 <__sinit>
 800c15c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c15e:	07d9      	lsls	r1, r3, #31
 800c160:	d405      	bmi.n	800c16e <_vfiprintf_r+0x2a>
 800c162:	89ab      	ldrh	r3, [r5, #12]
 800c164:	059a      	lsls	r2, r3, #22
 800c166:	d402      	bmi.n	800c16e <_vfiprintf_r+0x2a>
 800c168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c16a:	f7fc ff10 	bl	8008f8e <__retarget_lock_acquire_recursive>
 800c16e:	89ab      	ldrh	r3, [r5, #12]
 800c170:	071b      	lsls	r3, r3, #28
 800c172:	d501      	bpl.n	800c178 <_vfiprintf_r+0x34>
 800c174:	692b      	ldr	r3, [r5, #16]
 800c176:	b99b      	cbnz	r3, 800c1a0 <_vfiprintf_r+0x5c>
 800c178:	4629      	mov	r1, r5
 800c17a:	4630      	mov	r0, r6
 800c17c:	f000 f938 	bl	800c3f0 <__swsetup_r>
 800c180:	b170      	cbz	r0, 800c1a0 <_vfiprintf_r+0x5c>
 800c182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c184:	07dc      	lsls	r4, r3, #31
 800c186:	d504      	bpl.n	800c192 <_vfiprintf_r+0x4e>
 800c188:	f04f 30ff 	mov.w	r0, #4294967295
 800c18c:	b01d      	add	sp, #116	@ 0x74
 800c18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c192:	89ab      	ldrh	r3, [r5, #12]
 800c194:	0598      	lsls	r0, r3, #22
 800c196:	d4f7      	bmi.n	800c188 <_vfiprintf_r+0x44>
 800c198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c19a:	f7fc fef9 	bl	8008f90 <__retarget_lock_release_recursive>
 800c19e:	e7f3      	b.n	800c188 <_vfiprintf_r+0x44>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1a4:	2320      	movs	r3, #32
 800c1a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1ae:	2330      	movs	r3, #48	@ 0x30
 800c1b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c360 <_vfiprintf_r+0x21c>
 800c1b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1b8:	f04f 0901 	mov.w	r9, #1
 800c1bc:	4623      	mov	r3, r4
 800c1be:	469a      	mov	sl, r3
 800c1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1c4:	b10a      	cbz	r2, 800c1ca <_vfiprintf_r+0x86>
 800c1c6:	2a25      	cmp	r2, #37	@ 0x25
 800c1c8:	d1f9      	bne.n	800c1be <_vfiprintf_r+0x7a>
 800c1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ce:	d00b      	beq.n	800c1e8 <_vfiprintf_r+0xa4>
 800c1d0:	465b      	mov	r3, fp
 800c1d2:	4622      	mov	r2, r4
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f7ff ffa1 	bl	800c11e <__sfputs_r>
 800c1dc:	3001      	adds	r0, #1
 800c1de:	f000 80a7 	beq.w	800c330 <_vfiprintf_r+0x1ec>
 800c1e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1e4:	445a      	add	r2, fp
 800c1e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f000 809f 	beq.w	800c330 <_vfiprintf_r+0x1ec>
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1fc:	f10a 0a01 	add.w	sl, sl, #1
 800c200:	9304      	str	r3, [sp, #16]
 800c202:	9307      	str	r3, [sp, #28]
 800c204:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c208:	931a      	str	r3, [sp, #104]	@ 0x68
 800c20a:	4654      	mov	r4, sl
 800c20c:	2205      	movs	r2, #5
 800c20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c212:	4853      	ldr	r0, [pc, #332]	@ (800c360 <_vfiprintf_r+0x21c>)
 800c214:	f7f3 ffdc 	bl	80001d0 <memchr>
 800c218:	9a04      	ldr	r2, [sp, #16]
 800c21a:	b9d8      	cbnz	r0, 800c254 <_vfiprintf_r+0x110>
 800c21c:	06d1      	lsls	r1, r2, #27
 800c21e:	bf44      	itt	mi
 800c220:	2320      	movmi	r3, #32
 800c222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c226:	0713      	lsls	r3, r2, #28
 800c228:	bf44      	itt	mi
 800c22a:	232b      	movmi	r3, #43	@ 0x2b
 800c22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c230:	f89a 3000 	ldrb.w	r3, [sl]
 800c234:	2b2a      	cmp	r3, #42	@ 0x2a
 800c236:	d015      	beq.n	800c264 <_vfiprintf_r+0x120>
 800c238:	9a07      	ldr	r2, [sp, #28]
 800c23a:	4654      	mov	r4, sl
 800c23c:	2000      	movs	r0, #0
 800c23e:	f04f 0c0a 	mov.w	ip, #10
 800c242:	4621      	mov	r1, r4
 800c244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c248:	3b30      	subs	r3, #48	@ 0x30
 800c24a:	2b09      	cmp	r3, #9
 800c24c:	d94b      	bls.n	800c2e6 <_vfiprintf_r+0x1a2>
 800c24e:	b1b0      	cbz	r0, 800c27e <_vfiprintf_r+0x13a>
 800c250:	9207      	str	r2, [sp, #28]
 800c252:	e014      	b.n	800c27e <_vfiprintf_r+0x13a>
 800c254:	eba0 0308 	sub.w	r3, r0, r8
 800c258:	fa09 f303 	lsl.w	r3, r9, r3
 800c25c:	4313      	orrs	r3, r2
 800c25e:	9304      	str	r3, [sp, #16]
 800c260:	46a2      	mov	sl, r4
 800c262:	e7d2      	b.n	800c20a <_vfiprintf_r+0xc6>
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	1d19      	adds	r1, r3, #4
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	9103      	str	r1, [sp, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	bfbb      	ittet	lt
 800c270:	425b      	neglt	r3, r3
 800c272:	f042 0202 	orrlt.w	r2, r2, #2
 800c276:	9307      	strge	r3, [sp, #28]
 800c278:	9307      	strlt	r3, [sp, #28]
 800c27a:	bfb8      	it	lt
 800c27c:	9204      	strlt	r2, [sp, #16]
 800c27e:	7823      	ldrb	r3, [r4, #0]
 800c280:	2b2e      	cmp	r3, #46	@ 0x2e
 800c282:	d10a      	bne.n	800c29a <_vfiprintf_r+0x156>
 800c284:	7863      	ldrb	r3, [r4, #1]
 800c286:	2b2a      	cmp	r3, #42	@ 0x2a
 800c288:	d132      	bne.n	800c2f0 <_vfiprintf_r+0x1ac>
 800c28a:	9b03      	ldr	r3, [sp, #12]
 800c28c:	1d1a      	adds	r2, r3, #4
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	9203      	str	r2, [sp, #12]
 800c292:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c296:	3402      	adds	r4, #2
 800c298:	9305      	str	r3, [sp, #20]
 800c29a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c370 <_vfiprintf_r+0x22c>
 800c29e:	7821      	ldrb	r1, [r4, #0]
 800c2a0:	2203      	movs	r2, #3
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	f7f3 ff94 	bl	80001d0 <memchr>
 800c2a8:	b138      	cbz	r0, 800c2ba <_vfiprintf_r+0x176>
 800c2aa:	9b04      	ldr	r3, [sp, #16]
 800c2ac:	eba0 000a 	sub.w	r0, r0, sl
 800c2b0:	2240      	movs	r2, #64	@ 0x40
 800c2b2:	4082      	lsls	r2, r0
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	3401      	adds	r4, #1
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2be:	4829      	ldr	r0, [pc, #164]	@ (800c364 <_vfiprintf_r+0x220>)
 800c2c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2c4:	2206      	movs	r2, #6
 800c2c6:	f7f3 ff83 	bl	80001d0 <memchr>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d03f      	beq.n	800c34e <_vfiprintf_r+0x20a>
 800c2ce:	4b26      	ldr	r3, [pc, #152]	@ (800c368 <_vfiprintf_r+0x224>)
 800c2d0:	bb1b      	cbnz	r3, 800c31a <_vfiprintf_r+0x1d6>
 800c2d2:	9b03      	ldr	r3, [sp, #12]
 800c2d4:	3307      	adds	r3, #7
 800c2d6:	f023 0307 	bic.w	r3, r3, #7
 800c2da:	3308      	adds	r3, #8
 800c2dc:	9303      	str	r3, [sp, #12]
 800c2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e0:	443b      	add	r3, r7
 800c2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2e4:	e76a      	b.n	800c1bc <_vfiprintf_r+0x78>
 800c2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	e7a8      	b.n	800c242 <_vfiprintf_r+0xfe>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	3401      	adds	r4, #1
 800c2f4:	9305      	str	r3, [sp, #20]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	f04f 0c0a 	mov.w	ip, #10
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c302:	3a30      	subs	r2, #48	@ 0x30
 800c304:	2a09      	cmp	r2, #9
 800c306:	d903      	bls.n	800c310 <_vfiprintf_r+0x1cc>
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d0c6      	beq.n	800c29a <_vfiprintf_r+0x156>
 800c30c:	9105      	str	r1, [sp, #20]
 800c30e:	e7c4      	b.n	800c29a <_vfiprintf_r+0x156>
 800c310:	fb0c 2101 	mla	r1, ip, r1, r2
 800c314:	4604      	mov	r4, r0
 800c316:	2301      	movs	r3, #1
 800c318:	e7f0      	b.n	800c2fc <_vfiprintf_r+0x1b8>
 800c31a:	ab03      	add	r3, sp, #12
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	462a      	mov	r2, r5
 800c320:	4b12      	ldr	r3, [pc, #72]	@ (800c36c <_vfiprintf_r+0x228>)
 800c322:	a904      	add	r1, sp, #16
 800c324:	4630      	mov	r0, r6
 800c326:	f7fb fec3 	bl	80080b0 <_printf_float>
 800c32a:	4607      	mov	r7, r0
 800c32c:	1c78      	adds	r0, r7, #1
 800c32e:	d1d6      	bne.n	800c2de <_vfiprintf_r+0x19a>
 800c330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c332:	07d9      	lsls	r1, r3, #31
 800c334:	d405      	bmi.n	800c342 <_vfiprintf_r+0x1fe>
 800c336:	89ab      	ldrh	r3, [r5, #12]
 800c338:	059a      	lsls	r2, r3, #22
 800c33a:	d402      	bmi.n	800c342 <_vfiprintf_r+0x1fe>
 800c33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c33e:	f7fc fe27 	bl	8008f90 <__retarget_lock_release_recursive>
 800c342:	89ab      	ldrh	r3, [r5, #12]
 800c344:	065b      	lsls	r3, r3, #25
 800c346:	f53f af1f 	bmi.w	800c188 <_vfiprintf_r+0x44>
 800c34a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c34c:	e71e      	b.n	800c18c <_vfiprintf_r+0x48>
 800c34e:	ab03      	add	r3, sp, #12
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	462a      	mov	r2, r5
 800c354:	4b05      	ldr	r3, [pc, #20]	@ (800c36c <_vfiprintf_r+0x228>)
 800c356:	a904      	add	r1, sp, #16
 800c358:	4630      	mov	r0, r6
 800c35a:	f7fc f941 	bl	80085e0 <_printf_i>
 800c35e:	e7e4      	b.n	800c32a <_vfiprintf_r+0x1e6>
 800c360:	0800caf1 	.word	0x0800caf1
 800c364:	0800cafb 	.word	0x0800cafb
 800c368:	080080b1 	.word	0x080080b1
 800c36c:	0800c11f 	.word	0x0800c11f
 800c370:	0800caf7 	.word	0x0800caf7

0800c374 <__swbuf_r>:
 800c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c376:	460e      	mov	r6, r1
 800c378:	4614      	mov	r4, r2
 800c37a:	4605      	mov	r5, r0
 800c37c:	b118      	cbz	r0, 800c386 <__swbuf_r+0x12>
 800c37e:	6a03      	ldr	r3, [r0, #32]
 800c380:	b90b      	cbnz	r3, 800c386 <__swbuf_r+0x12>
 800c382:	f7fc fced 	bl	8008d60 <__sinit>
 800c386:	69a3      	ldr	r3, [r4, #24]
 800c388:	60a3      	str	r3, [r4, #8]
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	071a      	lsls	r2, r3, #28
 800c38e:	d501      	bpl.n	800c394 <__swbuf_r+0x20>
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	b943      	cbnz	r3, 800c3a6 <__swbuf_r+0x32>
 800c394:	4621      	mov	r1, r4
 800c396:	4628      	mov	r0, r5
 800c398:	f000 f82a 	bl	800c3f0 <__swsetup_r>
 800c39c:	b118      	cbz	r0, 800c3a6 <__swbuf_r+0x32>
 800c39e:	f04f 37ff 	mov.w	r7, #4294967295
 800c3a2:	4638      	mov	r0, r7
 800c3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	6922      	ldr	r2, [r4, #16]
 800c3aa:	1a98      	subs	r0, r3, r2
 800c3ac:	6963      	ldr	r3, [r4, #20]
 800c3ae:	b2f6      	uxtb	r6, r6
 800c3b0:	4283      	cmp	r3, r0
 800c3b2:	4637      	mov	r7, r6
 800c3b4:	dc05      	bgt.n	800c3c2 <__swbuf_r+0x4e>
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f7ff fa7b 	bl	800b8b4 <_fflush_r>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d1ed      	bne.n	800c39e <__swbuf_r+0x2a>
 800c3c2:	68a3      	ldr	r3, [r4, #8]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	60a3      	str	r3, [r4, #8]
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	1c5a      	adds	r2, r3, #1
 800c3cc:	6022      	str	r2, [r4, #0]
 800c3ce:	701e      	strb	r6, [r3, #0]
 800c3d0:	6962      	ldr	r2, [r4, #20]
 800c3d2:	1c43      	adds	r3, r0, #1
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d004      	beq.n	800c3e2 <__swbuf_r+0x6e>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	07db      	lsls	r3, r3, #31
 800c3dc:	d5e1      	bpl.n	800c3a2 <__swbuf_r+0x2e>
 800c3de:	2e0a      	cmp	r6, #10
 800c3e0:	d1df      	bne.n	800c3a2 <__swbuf_r+0x2e>
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f7ff fa65 	bl	800b8b4 <_fflush_r>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d0d9      	beq.n	800c3a2 <__swbuf_r+0x2e>
 800c3ee:	e7d6      	b.n	800c39e <__swbuf_r+0x2a>

0800c3f0 <__swsetup_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4b29      	ldr	r3, [pc, #164]	@ (800c498 <__swsetup_r+0xa8>)
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	b118      	cbz	r0, 800c404 <__swsetup_r+0x14>
 800c3fc:	6a03      	ldr	r3, [r0, #32]
 800c3fe:	b90b      	cbnz	r3, 800c404 <__swsetup_r+0x14>
 800c400:	f7fc fcae 	bl	8008d60 <__sinit>
 800c404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c408:	0719      	lsls	r1, r3, #28
 800c40a:	d422      	bmi.n	800c452 <__swsetup_r+0x62>
 800c40c:	06da      	lsls	r2, r3, #27
 800c40e:	d407      	bmi.n	800c420 <__swsetup_r+0x30>
 800c410:	2209      	movs	r2, #9
 800c412:	602a      	str	r2, [r5, #0]
 800c414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	f04f 30ff 	mov.w	r0, #4294967295
 800c41e:	e033      	b.n	800c488 <__swsetup_r+0x98>
 800c420:	0758      	lsls	r0, r3, #29
 800c422:	d512      	bpl.n	800c44a <__swsetup_r+0x5a>
 800c424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c426:	b141      	cbz	r1, 800c43a <__swsetup_r+0x4a>
 800c428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c42c:	4299      	cmp	r1, r3
 800c42e:	d002      	beq.n	800c436 <__swsetup_r+0x46>
 800c430:	4628      	mov	r0, r5
 800c432:	f7fd fc2d 	bl	8009c90 <_free_r>
 800c436:	2300      	movs	r3, #0
 800c438:	6363      	str	r3, [r4, #52]	@ 0x34
 800c43a:	89a3      	ldrh	r3, [r4, #12]
 800c43c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c440:	81a3      	strh	r3, [r4, #12]
 800c442:	2300      	movs	r3, #0
 800c444:	6063      	str	r3, [r4, #4]
 800c446:	6923      	ldr	r3, [r4, #16]
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	f043 0308 	orr.w	r3, r3, #8
 800c450:	81a3      	strh	r3, [r4, #12]
 800c452:	6923      	ldr	r3, [r4, #16]
 800c454:	b94b      	cbnz	r3, 800c46a <__swsetup_r+0x7a>
 800c456:	89a3      	ldrh	r3, [r4, #12]
 800c458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c45c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c460:	d003      	beq.n	800c46a <__swsetup_r+0x7a>
 800c462:	4621      	mov	r1, r4
 800c464:	4628      	mov	r0, r5
 800c466:	f000 f88b 	bl	800c580 <__smakebuf_r>
 800c46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c46e:	f013 0201 	ands.w	r2, r3, #1
 800c472:	d00a      	beq.n	800c48a <__swsetup_r+0x9a>
 800c474:	2200      	movs	r2, #0
 800c476:	60a2      	str	r2, [r4, #8]
 800c478:	6962      	ldr	r2, [r4, #20]
 800c47a:	4252      	negs	r2, r2
 800c47c:	61a2      	str	r2, [r4, #24]
 800c47e:	6922      	ldr	r2, [r4, #16]
 800c480:	b942      	cbnz	r2, 800c494 <__swsetup_r+0xa4>
 800c482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c486:	d1c5      	bne.n	800c414 <__swsetup_r+0x24>
 800c488:	bd38      	pop	{r3, r4, r5, pc}
 800c48a:	0799      	lsls	r1, r3, #30
 800c48c:	bf58      	it	pl
 800c48e:	6962      	ldrpl	r2, [r4, #20]
 800c490:	60a2      	str	r2, [r4, #8]
 800c492:	e7f4      	b.n	800c47e <__swsetup_r+0x8e>
 800c494:	2000      	movs	r0, #0
 800c496:	e7f7      	b.n	800c488 <__swsetup_r+0x98>
 800c498:	2000002c 	.word	0x2000002c

0800c49c <_raise_r>:
 800c49c:	291f      	cmp	r1, #31
 800c49e:	b538      	push	{r3, r4, r5, lr}
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	d904      	bls.n	800c4b0 <_raise_r+0x14>
 800c4a6:	2316      	movs	r3, #22
 800c4a8:	6003      	str	r3, [r0, #0]
 800c4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4b2:	b112      	cbz	r2, 800c4ba <_raise_r+0x1e>
 800c4b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4b8:	b94b      	cbnz	r3, 800c4ce <_raise_r+0x32>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f000 f830 	bl	800c520 <_getpid_r>
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	4601      	mov	r1, r0
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ca:	f000 b817 	b.w	800c4fc <_kill_r>
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d00a      	beq.n	800c4e8 <_raise_r+0x4c>
 800c4d2:	1c59      	adds	r1, r3, #1
 800c4d4:	d103      	bne.n	800c4de <_raise_r+0x42>
 800c4d6:	2316      	movs	r3, #22
 800c4d8:	6003      	str	r3, [r0, #0]
 800c4da:	2001      	movs	r0, #1
 800c4dc:	e7e7      	b.n	800c4ae <_raise_r+0x12>
 800c4de:	2100      	movs	r1, #0
 800c4e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	4798      	blx	r3
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	e7e0      	b.n	800c4ae <_raise_r+0x12>

0800c4ec <raise>:
 800c4ec:	4b02      	ldr	r3, [pc, #8]	@ (800c4f8 <raise+0xc>)
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	6818      	ldr	r0, [r3, #0]
 800c4f2:	f7ff bfd3 	b.w	800c49c <_raise_r>
 800c4f6:	bf00      	nop
 800c4f8:	2000002c 	.word	0x2000002c

0800c4fc <_kill_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d07      	ldr	r5, [pc, #28]	@ (800c51c <_kill_r+0x20>)
 800c500:	2300      	movs	r3, #0
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	4611      	mov	r1, r2
 800c508:	602b      	str	r3, [r5, #0]
 800c50a:	f7fb fc09 	bl	8007d20 <_kill>
 800c50e:	1c43      	adds	r3, r0, #1
 800c510:	d102      	bne.n	800c518 <_kill_r+0x1c>
 800c512:	682b      	ldr	r3, [r5, #0]
 800c514:	b103      	cbz	r3, 800c518 <_kill_r+0x1c>
 800c516:	6023      	str	r3, [r4, #0]
 800c518:	bd38      	pop	{r3, r4, r5, pc}
 800c51a:	bf00      	nop
 800c51c:	2000092c 	.word	0x2000092c

0800c520 <_getpid_r>:
 800c520:	f7fb bbf6 	b.w	8007d10 <_getpid>

0800c524 <_malloc_usable_size_r>:
 800c524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c528:	1f18      	subs	r0, r3, #4
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	bfbc      	itt	lt
 800c52e:	580b      	ldrlt	r3, [r1, r0]
 800c530:	18c0      	addlt	r0, r0, r3
 800c532:	4770      	bx	lr

0800c534 <__swhatbuf_r>:
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	460c      	mov	r4, r1
 800c538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c53c:	2900      	cmp	r1, #0
 800c53e:	b096      	sub	sp, #88	@ 0x58
 800c540:	4615      	mov	r5, r2
 800c542:	461e      	mov	r6, r3
 800c544:	da0d      	bge.n	800c562 <__swhatbuf_r+0x2e>
 800c546:	89a3      	ldrh	r3, [r4, #12]
 800c548:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c54c:	f04f 0100 	mov.w	r1, #0
 800c550:	bf14      	ite	ne
 800c552:	2340      	movne	r3, #64	@ 0x40
 800c554:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c558:	2000      	movs	r0, #0
 800c55a:	6031      	str	r1, [r6, #0]
 800c55c:	602b      	str	r3, [r5, #0]
 800c55e:	b016      	add	sp, #88	@ 0x58
 800c560:	bd70      	pop	{r4, r5, r6, pc}
 800c562:	466a      	mov	r2, sp
 800c564:	f000 f848 	bl	800c5f8 <_fstat_r>
 800c568:	2800      	cmp	r0, #0
 800c56a:	dbec      	blt.n	800c546 <__swhatbuf_r+0x12>
 800c56c:	9901      	ldr	r1, [sp, #4]
 800c56e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c572:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c576:	4259      	negs	r1, r3
 800c578:	4159      	adcs	r1, r3
 800c57a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c57e:	e7eb      	b.n	800c558 <__swhatbuf_r+0x24>

0800c580 <__smakebuf_r>:
 800c580:	898b      	ldrh	r3, [r1, #12]
 800c582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c584:	079d      	lsls	r5, r3, #30
 800c586:	4606      	mov	r6, r0
 800c588:	460c      	mov	r4, r1
 800c58a:	d507      	bpl.n	800c59c <__smakebuf_r+0x1c>
 800c58c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	6123      	str	r3, [r4, #16]
 800c594:	2301      	movs	r3, #1
 800c596:	6163      	str	r3, [r4, #20]
 800c598:	b003      	add	sp, #12
 800c59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c59c:	ab01      	add	r3, sp, #4
 800c59e:	466a      	mov	r2, sp
 800c5a0:	f7ff ffc8 	bl	800c534 <__swhatbuf_r>
 800c5a4:	9f00      	ldr	r7, [sp, #0]
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	4639      	mov	r1, r7
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f7fd fbe4 	bl	8009d78 <_malloc_r>
 800c5b0:	b948      	cbnz	r0, 800c5c6 <__smakebuf_r+0x46>
 800c5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b6:	059a      	lsls	r2, r3, #22
 800c5b8:	d4ee      	bmi.n	800c598 <__smakebuf_r+0x18>
 800c5ba:	f023 0303 	bic.w	r3, r3, #3
 800c5be:	f043 0302 	orr.w	r3, r3, #2
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	e7e2      	b.n	800c58c <__smakebuf_r+0xc>
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	6020      	str	r0, [r4, #0]
 800c5ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ce:	81a3      	strh	r3, [r4, #12]
 800c5d0:	9b01      	ldr	r3, [sp, #4]
 800c5d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5d6:	b15b      	cbz	r3, 800c5f0 <__smakebuf_r+0x70>
 800c5d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f000 f81d 	bl	800c61c <_isatty_r>
 800c5e2:	b128      	cbz	r0, 800c5f0 <__smakebuf_r+0x70>
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	f023 0303 	bic.w	r3, r3, #3
 800c5ea:	f043 0301 	orr.w	r3, r3, #1
 800c5ee:	81a3      	strh	r3, [r4, #12]
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	431d      	orrs	r5, r3
 800c5f4:	81a5      	strh	r5, [r4, #12]
 800c5f6:	e7cf      	b.n	800c598 <__smakebuf_r+0x18>

0800c5f8 <_fstat_r>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	4d07      	ldr	r5, [pc, #28]	@ (800c618 <_fstat_r+0x20>)
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	4604      	mov	r4, r0
 800c600:	4608      	mov	r0, r1
 800c602:	4611      	mov	r1, r2
 800c604:	602b      	str	r3, [r5, #0]
 800c606:	f7fb fbeb 	bl	8007de0 <_fstat>
 800c60a:	1c43      	adds	r3, r0, #1
 800c60c:	d102      	bne.n	800c614 <_fstat_r+0x1c>
 800c60e:	682b      	ldr	r3, [r5, #0]
 800c610:	b103      	cbz	r3, 800c614 <_fstat_r+0x1c>
 800c612:	6023      	str	r3, [r4, #0]
 800c614:	bd38      	pop	{r3, r4, r5, pc}
 800c616:	bf00      	nop
 800c618:	2000092c 	.word	0x2000092c

0800c61c <_isatty_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4d06      	ldr	r5, [pc, #24]	@ (800c638 <_isatty_r+0x1c>)
 800c620:	2300      	movs	r3, #0
 800c622:	4604      	mov	r4, r0
 800c624:	4608      	mov	r0, r1
 800c626:	602b      	str	r3, [r5, #0]
 800c628:	f7fb fbea 	bl	8007e00 <_isatty>
 800c62c:	1c43      	adds	r3, r0, #1
 800c62e:	d102      	bne.n	800c636 <_isatty_r+0x1a>
 800c630:	682b      	ldr	r3, [r5, #0]
 800c632:	b103      	cbz	r3, 800c636 <_isatty_r+0x1a>
 800c634:	6023      	str	r3, [r4, #0]
 800c636:	bd38      	pop	{r3, r4, r5, pc}
 800c638:	2000092c 	.word	0x2000092c

0800c63c <_init>:
 800c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63e:	bf00      	nop
 800c640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c642:	bc08      	pop	{r3}
 800c644:	469e      	mov	lr, r3
 800c646:	4770      	bx	lr

0800c648 <_fini>:
 800c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64a:	bf00      	nop
 800c64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64e:	bc08      	pop	{r3}
 800c650:	469e      	mov	lr, r3
 800c652:	4770      	bx	lr
